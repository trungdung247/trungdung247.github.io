{"version":3,"file":"static/chunks/3843.8ed2dbf72de7f0ca.js","mappings":"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A,EAAA,IACA,EAKAG,IAAOhB,gBAAe,CACtBM,OA9JA,CACAW,OAAA,UACAC,YAAA,YACAC,KAAA,iCA4JApC,aAAA,MACA,GAEAqC,QAAWpB,gBAAe,CAC1BM,OA7JA,CACAW,OAAA,kBACAC,YAAA,sBACAC,KAAA,2DA2JApC,aAAA,OACAyB,iBAAA,GAAAY,EAAA,CACA,GAEAC,MAASrB,gBAAe,CACxBM,OAzJA,CACAW,OAAA,kDACAC,YAAA,CACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,CAEAC,KAAA,CACA,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,WACA,EA4HApC,aAAA,MACA,GAEAuC,IAAOtB,gBAAe,CACtBM,OA7HA,CACAW,OAAA,8BACA1B,MAAA,qCACA2B,YAAA,4CACAC,KAAA,CACA,SACA,SACA,UACA,YACA,WACA,SACA,WACA,EAkHApC,aAAA,MACA,GAEAwC,UAAavB,gBAAe,CAC5BM,OAnHA,CACAW,OAAA,CACAO,GAAA,IACAC,GAAA,IACAC,SAAA,KACAC,KAAA,IACAC,QAAA,UACAC,UAAA,YACAC,QAAA,UACAC,MAAA,OACA,EACAb,YAAA,CACAM,GAAA,KACAC,GAAA,KACAC,SAAA,WACAC,KAAA,OACAC,QAAA,UACAC,UAAA,YACAC,QAAA,UACAC,MAAA,OACA,EACAZ,KAAA,CACAK,GAAA,OACAC,GAAA,OACAC,SAAA,WACAC,KAAA,OACAC,QAAA,UACAC,UAAA,YACAC,QAAA,UACAC,MAAA,OACA,CACA,EAqFAhD,aAAA,OACAqB,iBApFA,CACAa,OAAA,CACAO,GAAA,IACAC,GAAA,IACAC,SAAA,KACAC,KAAA,IACAC,QAAA,iBACAC,UAAA,mBACAC,QAAA,iBACAC,MAAA,UACA,EACAb,YAAA,CACAM,GAAA,KACAC,GAAA,KACAC,SAAA,WACAC,KAAA,OACAC,QAAA,iBACAC,UAAA,mBACAC,QAAA,iBACAC,MAAA,UACA,EACAZ,KAAA,CACAK,GAAA,OACAC,GAAA,OACAC,SAAA,WACA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","sources":["webpack://_N_E/./node_modules/date-fns/toDate.mjs","webpack://_N_E/./node_modules/date-fns/compareAsc.mjs","webpack://_N_E/./node_modules/date-fns/constants.mjs","webpack://_N_E/./node_modules/date-fns/differenceInCalendarMonths.mjs","webpack://_N_E/./node_modules/date-fns/endOfDay.mjs","webpack://_N_E/./node_modules/date-fns/endOfMonth.mjs","webpack://_N_E/./node_modules/date-fns/isLastDayOfMonth.mjs","webpack://_N_E/./node_modules/date-fns/differenceInMonths.mjs","webpack://_N_E/./node_modules/date-fns/_lib/getRoundingMethod.mjs","webpack://_N_E/./node_modules/date-fns/differenceInMilliseconds.mjs","webpack://_N_E/./node_modules/date-fns/differenceInSeconds.mjs","webpack://_N_E/./node_modules/date-fns/locale/en-US/_lib/formatDistance.mjs","webpack://_N_E/./node_modules/date-fns/locale/_lib/buildFormatLongFn.mjs","webpack://_N_E/./node_modules/date-fns/locale/en-US/_lib/formatLong.mjs","webpack://_N_E/./node_modules/date-fns/locale/en-US/_lib/formatRelative.mjs","webpack://_N_E/./node_modules/date-fns/locale/_lib/buildLocalizeFn.mjs","webpack://_N_E/./node_modules/date-fns/locale/en-US/_lib/localize.mjs","webpack://_N_E/./node_modules/date-fns/locale/_lib/buildMatchFn.mjs","webpack://_N_E/./node_modules/date-fns/locale/_lib/buildMatchPatternFn.mjs","webpack://_N_E/./node_modules/date-fns/locale/en-US/_lib/match.mjs","webpack://_N_E/./node_modules/date-fns/locale/en-US.mjs","webpack://_N_E/./node_modules/date-fns/_lib/defaultOptions.mjs","webpack://_N_E/./node_modules/date-fns/_lib/getTimezoneOffsetInMilliseconds.mjs","webpack://_N_E/./node_modules/date-fns/formatDistance.mjs","webpack://_N_E/./containers/Home/components/Collaboration/CommentScene/CommentSceneItem.tsx","webpack://_N_E/<anon>"],"sourcesContent":["/**\n * @name toDate\n * @category Common Helpers\n * @summary Convert the given argument to an instance of Date.\n *\n * @description\n * Convert the given argument to an instance of Date.\n *\n * If the argument is an instance of Date, the function returns its clone.\n *\n * If the argument is a number, it is treated as a timestamp.\n *\n * If the argument is none of the above, the function returns Invalid Date.\n *\n * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param argument - The value to convert\n *\n * @returns The parsed date in the local time zone\n *\n * @example\n * // Clone the date:\n * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))\n * //=> Tue Feb 11 2014 11:30:30\n *\n * @example\n * // Convert the timestamp to date:\n * const result = toDate(1392098430000)\n * //=> Tue Feb 11 2014 11:30:30\n */\nexport function toDate(argument) {\n  const argStr = Object.prototype.toString.call(argument);\n\n  // Clone the date\n  if (\n    argument instanceof Date ||\n    (typeof argument === \"object\" && argStr === \"[object Date]\")\n  ) {\n    // Prevent the date to lose the milliseconds when passed to new Date() in IE10\n    return new argument.constructor(+argument);\n  } else if (\n    typeof argument === \"number\" ||\n    argStr === \"[object Number]\" ||\n    typeof argument === \"string\" ||\n    argStr === \"[object String]\"\n  ) {\n    // TODO: Can we get rid of as?\n    return new Date(argument);\n  } else {\n    // TODO: Can we get rid of as?\n    return new Date(NaN);\n  }\n}\n\n// Fallback for modularized imports:\nexport default toDate;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name compareAsc\n * @category Common Helpers\n * @summary Compare the two dates and return -1, 0 or 1.\n *\n * @description\n * Compare the two dates and return 1 if the first date is after the second,\n * -1 if the first date is before the second or 0 if dates are equal.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The first date to compare\n * @param dateRight - The second date to compare\n *\n * @returns The result of the comparison\n *\n * @example\n * // Compare 11 February 1987 and 10 July 1989:\n * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))\n * //=> -1\n *\n * @example\n * // Sort the array of dates:\n * const result = [\n *   new Date(1995, 6, 2),\n *   new Date(1987, 1, 11),\n *   new Date(1989, 6, 10)\n * ].sort(compareAsc)\n * //=> [\n * //   Wed Feb 11 1987 00:00:00,\n * //   Mon Jul 10 1989 00:00:00,\n * //   Sun Jul 02 1995 00:00:00\n * // ]\n */\nexport function compareAsc(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const diff = _dateLeft.getTime() - _dateRight.getTime();\n\n  if (diff < 0) {\n    return -1;\n  } else if (diff > 0) {\n    return 1;\n    // Return 0 if diff is 0; return NaN if diff is NaN\n  } else {\n    return diff;\n  }\n}\n\n// Fallback for modularized imports:\nexport default compareAsc;\n","/**\n * @module constants\n * @summary Useful constants\n * @description\n * Collection of useful date constants.\n *\n * The constants could be imported from `date-fns/constants`:\n *\n * ```ts\n * import { maxTime, minTime } from \"./constants/date-fns/constants\";\n *\n * function isAllowedTime(time) {\n *   return time <= maxTime && time >= minTime;\n * }\n * ```\n */\n\n/**\n * @constant\n * @name daysInWeek\n * @summary Days in 1 week.\n */\nexport const daysInWeek = 7;\n\n/**\n * @constant\n * @name daysInYear\n * @summary Days in 1 year.\n *\n * @description\n * How many days in a year.\n *\n * One years equals 365.2425 days according to the formula:\n *\n * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.\n * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days\n */\nexport const daysInYear = 365.2425;\n\n/**\n * @constant\n * @name maxTime\n * @summary Maximum allowed time.\n *\n * @example\n * import { maxTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = 8640000000000001 <= maxTime;\n * //=> false\n *\n * new Date(8640000000000001);\n * //=> Invalid Date\n */\nexport const maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1000;\n\n/**\n * @constant\n * @name minTime\n * @summary Minimum allowed time.\n *\n * @example\n * import { minTime } from \"./constants/date-fns/constants\";\n *\n * const isValid = -8640000000000001 >= minTime;\n * //=> false\n *\n * new Date(-8640000000000001)\n * //=> Invalid Date\n */\nexport const minTime = -maxTime;\n\n/**\n * @constant\n * @name millisecondsInWeek\n * @summary Milliseconds in 1 week.\n */\nexport const millisecondsInWeek = 604800000;\n\n/**\n * @constant\n * @name millisecondsInDay\n * @summary Milliseconds in 1 day.\n */\nexport const millisecondsInDay = 86400000;\n\n/**\n * @constant\n * @name millisecondsInMinute\n * @summary Milliseconds in 1 minute\n */\nexport const millisecondsInMinute = 60000;\n\n/**\n * @constant\n * @name millisecondsInHour\n * @summary Milliseconds in 1 hour\n */\nexport const millisecondsInHour = 3600000;\n\n/**\n * @constant\n * @name millisecondsInSecond\n * @summary Milliseconds in 1 second\n */\nexport const millisecondsInSecond = 1000;\n\n/**\n * @constant\n * @name minutesInYear\n * @summary Minutes in 1 year.\n */\nexport const minutesInYear = 525600;\n\n/**\n * @constant\n * @name minutesInMonth\n * @summary Minutes in 1 month.\n */\nexport const minutesInMonth = 43200;\n\n/**\n * @constant\n * @name minutesInDay\n * @summary Minutes in 1 day.\n */\nexport const minutesInDay = 1440;\n\n/**\n * @constant\n * @name minutesInHour\n * @summary Minutes in 1 hour.\n */\nexport const minutesInHour = 60;\n\n/**\n * @constant\n * @name monthsInQuarter\n * @summary Months in 1 quarter.\n */\nexport const monthsInQuarter = 3;\n\n/**\n * @constant\n * @name monthsInYear\n * @summary Months in 1 year.\n */\nexport const monthsInYear = 12;\n\n/**\n * @constant\n * @name quartersInYear\n * @summary Quarters in 1 year\n */\nexport const quartersInYear = 4;\n\n/**\n * @constant\n * @name secondsInHour\n * @summary Seconds in 1 hour.\n */\nexport const secondsInHour = 3600;\n\n/**\n * @constant\n * @name secondsInMinute\n * @summary Seconds in 1 minute.\n */\nexport const secondsInMinute = 60;\n\n/**\n * @constant\n * @name secondsInDay\n * @summary Seconds in 1 day.\n */\nexport const secondsInDay = secondsInHour * 24;\n\n/**\n * @constant\n * @name secondsInWeek\n * @summary Seconds in 1 week.\n */\nexport const secondsInWeek = secondsInDay * 7;\n\n/**\n * @constant\n * @name secondsInYear\n * @summary Seconds in 1 year.\n */\nexport const secondsInYear = secondsInDay * daysInYear;\n\n/**\n * @constant\n * @name secondsInMonth\n * @summary Seconds in 1 month\n */\nexport const secondsInMonth = secondsInYear / 12;\n\n/**\n * @constant\n * @name secondsInQuarter\n * @summary Seconds in 1 quarter.\n */\nexport const secondsInQuarter = secondsInMonth * 3;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInCalendarMonths\n * @category Month Helpers\n * @summary Get the number of calendar months between the given dates.\n *\n * @description\n * Get the number of calendar months between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of calendar months\n *\n * @example\n * // How many calendar months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInCalendarMonths(\n *   new Date(2014, 8, 1),\n *   new Date(2014, 0, 31)\n * )\n * //=> 8\n */\nexport function differenceInCalendarMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const yearDiff = _dateLeft.getFullYear() - _dateRight.getFullYear();\n  const monthDiff = _dateLeft.getMonth() - _dateRight.getMonth();\n\n  return yearDiff * 12 + monthDiff;\n}\n\n// Fallback for modularized imports:\nexport default differenceInCalendarMonths;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfDay\n * @category Day Helpers\n * @summary Return the end of a day for the given date.\n *\n * @description\n * Return the end of a day for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a day\n *\n * @example\n * // The end of a day for 2 September 2014 11:55:00:\n * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 02 2014 23:59:59.999\n */\nexport function endOfDay(date) {\n  const _date = toDate(date);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfDay;\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name endOfMonth\n * @category Month Helpers\n * @summary Return the end of a month for the given date.\n *\n * @description\n * Return the end of a month for the given date.\n * The result will be in the local timezone.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The original date\n *\n * @returns The end of a month\n *\n * @example\n * // The end of a month for 2 September 2014 11:55:00:\n * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))\n * //=> Tue Sep 30 2014 23:59:59.999\n */\nexport function endOfMonth(date) {\n  const _date = toDate(date);\n  const month = _date.getMonth();\n  _date.setFullYear(_date.getFullYear(), month + 1, 0);\n  _date.setHours(23, 59, 59, 999);\n  return _date;\n}\n\n// Fallback for modularized imports:\nexport default endOfMonth;\n","import { endOfDay } from \"./endOfDay.mjs\";\nimport { endOfMonth } from \"./endOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name isLastDayOfMonth\n * @category Month Helpers\n * @summary Is the given date the last day of a month?\n *\n * @description\n * Is the given date the last day of a month?\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date to check\n\n * @returns The date is the last day of a month\n *\n * @example\n * // Is 28 February 2014 the last day of a month?\n * const result = isLastDayOfMonth(new Date(2014, 1, 28))\n * //=> true\n */\nexport function isLastDayOfMonth(date) {\n  const _date = toDate(date);\n  return +endOfDay(_date) === +endOfMonth(_date);\n}\n\n// Fallback for modularized imports:\nexport default isLastDayOfMonth;\n","import { compareAsc } from \"./compareAsc.mjs\";\nimport { differenceInCalendarMonths } from \"./differenceInCalendarMonths.mjs\";\nimport { isLastDayOfMonth } from \"./isLastDayOfMonth.mjs\";\nimport { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInMonths\n * @category Month Helpers\n * @summary Get the number of full months between the given dates.\n *\n * @description\n * Get the number of full months between the given dates using trunc as a default rounding method.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of full months\n *\n * @example\n * // How many full months are between 31 January 2014 and 1 September 2014?\n * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))\n * //=> 7\n */\nexport function differenceInMonths(dateLeft, dateRight) {\n  const _dateLeft = toDate(dateLeft);\n  const _dateRight = toDate(dateRight);\n\n  const sign = compareAsc(_dateLeft, _dateRight);\n  const difference = Math.abs(\n    differenceInCalendarMonths(_dateLeft, _dateRight),\n  );\n  let result;\n\n  // Check for the difference of less than month\n  if (difference < 1) {\n    result = 0;\n  } else {\n    if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) {\n      // This will check if the date is end of Feb and assign a higher end of month date\n      // to compare it with Jan\n      _dateLeft.setDate(30);\n    }\n\n    _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);\n\n    // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full\n    // If so, result must be decreased by 1 in absolute value\n    let isLastMonthNotFull = compareAsc(_dateLeft, _dateRight) === -sign;\n\n    // Check for cases of one full calendar month\n    if (\n      isLastDayOfMonth(toDate(dateLeft)) &&\n      difference === 1 &&\n      compareAsc(dateLeft, _dateRight) === 1\n    ) {\n      isLastMonthNotFull = false;\n    }\n\n    result = sign * (difference - Number(isLastMonthNotFull));\n  }\n\n  // Prevent negative zero\n  return result === 0 ? 0 : result;\n}\n\n// Fallback for modularized imports:\nexport default differenceInMonths;\n","export function getRoundingMethod(method) {\n  return (number) => {\n    const round = method ? Math[method] : Math.trunc;\n    const result = round(number);\n    // Prevent negative zero\n    return result === 0 ? 0 : result;\n  };\n}\n","import { toDate } from \"./toDate.mjs\";\n\n/**\n * @name differenceInMilliseconds\n * @category Millisecond Helpers\n * @summary Get the number of milliseconds between the given dates.\n *\n * @description\n * Get the number of milliseconds between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n *\n * @returns The number of milliseconds\n *\n * @example\n * // How many milliseconds are between\n * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?\n * const result = differenceInMilliseconds(\n *   new Date(2014, 6, 2, 12, 30, 21, 700),\n *   new Date(2014, 6, 2, 12, 30, 20, 600)\n * )\n * //=> 1100\n */\nexport function differenceInMilliseconds(dateLeft, dateRight) {\n  return +toDate(dateLeft) - +toDate(dateRight);\n}\n\n// Fallback for modularized imports:\nexport default differenceInMilliseconds;\n","import { getRoundingMethod } from \"./_lib/getRoundingMethod.mjs\";\nimport { differenceInMilliseconds } from \"./differenceInMilliseconds.mjs\";\n\n/**\n * The {@link differenceInSeconds} function options.\n */\n\n/**\n * @name differenceInSeconds\n * @category Second Helpers\n * @summary Get the number of seconds between the given dates.\n *\n * @description\n * Get the number of seconds between the given dates.\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param dateLeft - The later date\n * @param dateRight - The earlier date\n * @param options - An object with options.\n *\n * @returns The number of seconds\n *\n * @example\n * // How many seconds are between\n * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?\n * const result = differenceInSeconds(\n *   new Date(2014, 6, 2, 12, 30, 20, 0),\n *   new Date(2014, 6, 2, 12, 30, 7, 999)\n * )\n * //=> 12\n */\nexport function differenceInSeconds(dateLeft, dateRight, options) {\n  const diff = differenceInMilliseconds(dateLeft, dateRight) / 1000;\n  return getRoundingMethod(options?.roundingMethod)(diff);\n}\n\n// Fallback for modularized imports:\nexport default differenceInSeconds;\n","const formatDistanceLocale = {\n  lessThanXSeconds: {\n    one: \"less than a second\",\n    other: \"less than {{count}} seconds\",\n  },\n\n  xSeconds: {\n    one: \"1 second\",\n    other: \"{{count}} seconds\",\n  },\n\n  halfAMinute: \"half a minute\",\n\n  lessThanXMinutes: {\n    one: \"less than a minute\",\n    other: \"less than {{count}} minutes\",\n  },\n\n  xMinutes: {\n    one: \"1 minute\",\n    other: \"{{count}} minutes\",\n  },\n\n  aboutXHours: {\n    one: \"about 1 hour\",\n    other: \"about {{count}} hours\",\n  },\n\n  xHours: {\n    one: \"1 hour\",\n    other: \"{{count}} hours\",\n  },\n\n  xDays: {\n    one: \"1 day\",\n    other: \"{{count}} days\",\n  },\n\n  aboutXWeeks: {\n    one: \"about 1 week\",\n    other: \"about {{count}} weeks\",\n  },\n\n  xWeeks: {\n    one: \"1 week\",\n    other: \"{{count}} weeks\",\n  },\n\n  aboutXMonths: {\n    one: \"about 1 month\",\n    other: \"about {{count}} months\",\n  },\n\n  xMonths: {\n    one: \"1 month\",\n    other: \"{{count}} months\",\n  },\n\n  aboutXYears: {\n    one: \"about 1 year\",\n    other: \"about {{count}} years\",\n  },\n\n  xYears: {\n    one: \"1 year\",\n    other: \"{{count}} years\",\n  },\n\n  overXYears: {\n    one: \"over 1 year\",\n    other: \"over {{count}} years\",\n  },\n\n  almostXYears: {\n    one: \"almost 1 year\",\n    other: \"almost {{count}} years\",\n  },\n};\n\nexport const formatDistance = (token, count, options) => {\n  let result;\n\n  const tokenValue = formatDistanceLocale[token];\n  if (typeof tokenValue === \"string\") {\n    result = tokenValue;\n  } else if (count === 1) {\n    result = tokenValue.one;\n  } else {\n    result = tokenValue.other.replace(\"{{count}}\", count.toString());\n  }\n\n  if (options?.addSuffix) {\n    if (options.comparison && options.comparison > 0) {\n      return \"in \" + result;\n    } else {\n      return result + \" ago\";\n    }\n  }\n\n  return result;\n};\n","export function buildFormatLongFn(args) {\n  return (options = {}) => {\n    // TODO: Remove String()\n    const width = options.width ? String(options.width) : args.defaultWidth;\n    const format = args.formats[width] || args.formats[args.defaultWidth];\n    return format;\n  };\n}\n","import { buildFormatLongFn } from \"../../_lib/buildFormatLongFn.mjs\";\n\nconst dateFormats = {\n  full: \"EEEE, MMMM do, y\",\n  long: \"MMMM do, y\",\n  medium: \"MMM d, y\",\n  short: \"MM/dd/yyyy\",\n};\n\nconst timeFormats = {\n  full: \"h:mm:ss a zzzz\",\n  long: \"h:mm:ss a z\",\n  medium: \"h:mm:ss a\",\n  short: \"h:mm a\",\n};\n\nconst dateTimeFormats = {\n  full: \"{{date}} 'at' {{time}}\",\n  long: \"{{date}} 'at' {{time}}\",\n  medium: \"{{date}}, {{time}}\",\n  short: \"{{date}}, {{time}}\",\n};\n\nexport const formatLong = {\n  date: buildFormatLongFn({\n    formats: dateFormats,\n    defaultWidth: \"full\",\n  }),\n\n  time: buildFormatLongFn({\n    formats: timeFormats,\n    defaultWidth: \"full\",\n  }),\n\n  dateTime: buildFormatLongFn({\n    formats: dateTimeFormats,\n    defaultWidth: \"full\",\n  }),\n};\n","const formatRelativeLocale = {\n  lastWeek: \"'last' eeee 'at' p\",\n  yesterday: \"'yesterday at' p\",\n  today: \"'today at' p\",\n  tomorrow: \"'tomorrow at' p\",\n  nextWeek: \"eeee 'at' p\",\n  other: \"P\",\n};\n\nexport const formatRelative = (token, _date, _baseDate, _options) =>\n  formatRelativeLocale[token];\n","/* eslint-disable no-unused-vars */\n\n/**\n * The localize function argument callback which allows to convert raw value to\n * the actual type.\n *\n * @param value - The value to convert\n *\n * @returns The converted value\n */\n\n/**\n * The map of localized values for each width.\n */\n\n/**\n * The index type of the locale unit value. It types conversion of units of\n * values that don't start at 0 (i.e. quarters).\n */\n\n/**\n * Converts the unit value to the tuple of values.\n */\n\n/**\n * The tuple of localized era values. The first element represents BC,\n * the second element represents AD.\n */\n\n/**\n * The tuple of localized quarter values. The first element represents Q1.\n */\n\n/**\n * The tuple of localized day values. The first element represents Sunday.\n */\n\n/**\n * The tuple of localized month values. The first element represents January.\n */\n\nexport function buildLocalizeFn(args) {\n  return (value, options) => {\n    const context = options?.context ? String(options.context) : \"standalone\";\n\n    let valuesArray;\n    if (context === \"formatting\" && args.formattingValues) {\n      const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;\n      const width = options?.width ? String(options.width) : defaultWidth;\n\n      valuesArray =\n        args.formattingValues[width] || args.formattingValues[defaultWidth];\n    } else {\n      const defaultWidth = args.defaultWidth;\n      const width = options?.width ? String(options.width) : args.defaultWidth;\n\n      valuesArray = args.values[width] || args.values[defaultWidth];\n    }\n    const index = args.argumentCallback ? args.argumentCallback(value) : value;\n\n    // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!\n    return valuesArray[index];\n  };\n}\n","import { buildLocalizeFn } from \"../../_lib/buildLocalizeFn.mjs\";\n\nconst eraValues = {\n  narrow: [\"B\", \"A\"],\n  abbreviated: [\"BC\", \"AD\"],\n  wide: [\"Before Christ\", \"Anno Domini\"],\n};\n\nconst quarterValues = {\n  narrow: [\"1\", \"2\", \"3\", \"4\"],\n  abbreviated: [\"Q1\", \"Q2\", \"Q3\", \"Q4\"],\n  wide: [\"1st quarter\", \"2nd quarter\", \"3rd quarter\", \"4th quarter\"],\n};\n\n// Note: in English, the names of days of the week and months are capitalized.\n// If you are making a new locale based on this one, check if the same is true for the language you're working on.\n// Generally, formatted dates should look like they are in the middle of a sentence,\n// e.g. in Spanish language the weekdays and months should be in the lowercase.\nconst monthValues = {\n  narrow: [\"J\", \"F\", \"M\", \"A\", \"M\", \"J\", \"J\", \"A\", \"S\", \"O\", \"N\", \"D\"],\n  abbreviated: [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ],\n\n  wide: [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ],\n};\n\nconst dayValues = {\n  narrow: [\"S\", \"M\", \"T\", \"W\", \"T\", \"F\", \"S\"],\n  short: [\"Su\", \"Mo\", \"Tu\", \"We\", \"Th\", \"Fr\", \"Sa\"],\n  abbreviated: [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"],\n  wide: [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ],\n};\n\nconst dayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"morning\",\n    afternoon: \"afternoon\",\n    evening: \"evening\",\n    night: \"night\",\n  },\n};\n\nconst formattingDayPeriodValues = {\n  narrow: {\n    am: \"a\",\n    pm: \"p\",\n    midnight: \"mi\",\n    noon: \"n\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  abbreviated: {\n    am: \"AM\",\n    pm: \"PM\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n  wide: {\n    am: \"a.m.\",\n    pm: \"p.m.\",\n    midnight: \"midnight\",\n    noon: \"noon\",\n    morning: \"in the morning\",\n    afternoon: \"in the afternoon\",\n    evening: \"in the evening\",\n    night: \"at night\",\n  },\n};\n\nconst ordinalNumber = (dirtyNumber, _options) => {\n  const number = Number(dirtyNumber);\n\n  // If ordinal numbers depend on context, for example,\n  // if they are different for different grammatical genders,\n  // use `options.unit`.\n  //\n  // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',\n  // 'day', 'hour', 'minute', 'second'.\n\n  const rem100 = number % 100;\n  if (rem100 > 20 || rem100 < 10) {\n    switch (rem100 % 10) {\n      case 1:\n        return number + \"st\";\n      case 2:\n        return number + \"nd\";\n      case 3:\n        return number + \"rd\";\n    }\n  }\n  return number + \"th\";\n};\n\nexport const localize = {\n  ordinalNumber,\n\n  era: buildLocalizeFn({\n    values: eraValues,\n    defaultWidth: \"wide\",\n  }),\n\n  quarter: buildLocalizeFn({\n    values: quarterValues,\n    defaultWidth: \"wide\",\n    argumentCallback: (quarter) => quarter - 1,\n  }),\n\n  month: buildLocalizeFn({\n    values: monthValues,\n    defaultWidth: \"wide\",\n  }),\n\n  day: buildLocalizeFn({\n    values: dayValues,\n    defaultWidth: \"wide\",\n  }),\n\n  dayPeriod: buildLocalizeFn({\n    values: dayPeriodValues,\n    defaultWidth: \"wide\",\n    formattingValues: formattingDayPeriodValues,\n    defaultFormattingWidth: \"wide\",\n  }),\n};\n","export function buildMatchFn(args) {\n  return (string, options = {}) => {\n    const width = options.width;\n\n    const matchPattern =\n      (width && args.matchPatterns[width]) ||\n      args.matchPatterns[args.defaultMatchWidth];\n    const matchResult = string.match(matchPattern);\n\n    if (!matchResult) {\n      return null;\n    }\n    const matchedString = matchResult[0];\n\n    const parsePatterns =\n      (width && args.parsePatterns[width]) ||\n      args.parsePatterns[args.defaultParseWidth];\n\n    const key = Array.isArray(parsePatterns)\n      ? findIndex(parsePatterns, (pattern) => pattern.test(matchedString))\n      : // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        findKey(parsePatterns, (pattern) => pattern.test(matchedString));\n\n    let value;\n\n    value = args.valueCallback ? args.valueCallback(key) : key;\n    value = options.valueCallback\n      ? // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n        options.valueCallback(value)\n      : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n\nfunction findKey(object, predicate) {\n  for (const key in object) {\n    if (\n      Object.prototype.hasOwnProperty.call(object, key) &&\n      predicate(object[key])\n    ) {\n      return key;\n    }\n  }\n  return undefined;\n}\n\nfunction findIndex(array, predicate) {\n  for (let key = 0; key < array.length; key++) {\n    if (predicate(array[key])) {\n      return key;\n    }\n  }\n  return undefined;\n}\n","export function buildMatchPatternFn(args) {\n  return (string, options = {}) => {\n    const matchResult = string.match(args.matchPattern);\n    if (!matchResult) return null;\n    const matchedString = matchResult[0];\n\n    const parseResult = string.match(args.parsePattern);\n    if (!parseResult) return null;\n    let value = args.valueCallback\n      ? args.valueCallback(parseResult[0])\n      : parseResult[0];\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type\n    value = options.valueCallback ? options.valueCallback(value) : value;\n\n    const rest = string.slice(matchedString.length);\n\n    return { value, rest };\n  };\n}\n","import { buildMatchFn } from \"../../_lib/buildMatchFn.mjs\";\nimport { buildMatchPatternFn } from \"../../_lib/buildMatchPatternFn.mjs\";\n\nconst matchOrdinalNumberPattern = /^(\\d+)(th|st|nd|rd)?/i;\nconst parseOrdinalNumberPattern = /\\d+/i;\n\nconst matchEraPatterns = {\n  narrow: /^(b|a)/i,\n  abbreviated: /^(b\\.?\\s?c\\.?|b\\.?\\s?c\\.?\\s?e\\.?|a\\.?\\s?d\\.?|c\\.?\\s?e\\.?)/i,\n  wide: /^(before christ|before common era|anno domini|common era)/i,\n};\nconst parseEraPatterns = {\n  any: [/^b/i, /^(a|c)/i],\n};\n\nconst matchQuarterPatterns = {\n  narrow: /^[1234]/i,\n  abbreviated: /^q[1234]/i,\n  wide: /^[1234](th|st|nd|rd)? quarter/i,\n};\nconst parseQuarterPatterns = {\n  any: [/1/i, /2/i, /3/i, /4/i],\n};\n\nconst matchMonthPatterns = {\n  narrow: /^[jfmasond]/i,\n  abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,\n  wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i,\n};\nconst parseMonthPatterns = {\n  narrow: [\n    /^j/i,\n    /^f/i,\n    /^m/i,\n    /^a/i,\n    /^m/i,\n    /^j/i,\n    /^j/i,\n    /^a/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n\n  any: [\n    /^ja/i,\n    /^f/i,\n    /^mar/i,\n    /^ap/i,\n    /^may/i,\n    /^jun/i,\n    /^jul/i,\n    /^au/i,\n    /^s/i,\n    /^o/i,\n    /^n/i,\n    /^d/i,\n  ],\n};\n\nconst matchDayPatterns = {\n  narrow: /^[smtwf]/i,\n  short: /^(su|mo|tu|we|th|fr|sa)/i,\n  abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,\n  wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i,\n};\nconst parseDayPatterns = {\n  narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i],\n  any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i],\n};\n\nconst matchDayPeriodPatterns = {\n  narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,\n  any: /^([ap]\\.?\\s?m\\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i,\n};\nconst parseDayPeriodPatterns = {\n  any: {\n    am: /^a/i,\n    pm: /^p/i,\n    midnight: /^mi/i,\n    noon: /^no/i,\n    morning: /morning/i,\n    afternoon: /afternoon/i,\n    evening: /evening/i,\n    night: /night/i,\n  },\n};\n\nexport const match = {\n  ordinalNumber: buildMatchPatternFn({\n    matchPattern: matchOrdinalNumberPattern,\n    parsePattern: parseOrdinalNumberPattern,\n    valueCallback: (value) => parseInt(value, 10),\n  }),\n\n  era: buildMatchFn({\n    matchPatterns: matchEraPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseEraPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  quarter: buildMatchFn({\n    matchPatterns: matchQuarterPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseQuarterPatterns,\n    defaultParseWidth: \"any\",\n    valueCallback: (index) => index + 1,\n  }),\n\n  month: buildMatchFn({\n    matchPatterns: matchMonthPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseMonthPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  day: buildMatchFn({\n    matchPatterns: matchDayPatterns,\n    defaultMatchWidth: \"wide\",\n    parsePatterns: parseDayPatterns,\n    defaultParseWidth: \"any\",\n  }),\n\n  dayPeriod: buildMatchFn({\n    matchPatterns: matchDayPeriodPatterns,\n    defaultMatchWidth: \"any\",\n    parsePatterns: parseDayPeriodPatterns,\n    defaultParseWidth: \"any\",\n  }),\n};\n","import { formatDistance } from \"./en-US/_lib/formatDistance.mjs\";\nimport { formatLong } from \"./en-US/_lib/formatLong.mjs\";\nimport { formatRelative } from \"./en-US/_lib/formatRelative.mjs\";\nimport { localize } from \"./en-US/_lib/localize.mjs\";\nimport { match } from \"./en-US/_lib/match.mjs\";\n\n/**\n * @category Locales\n * @summary English locale (United States).\n * @language English\n * @iso-639-2 eng\n * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)\n * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)\n */\nexport const enUS = {\n  code: \"en-US\",\n  formatDistance: formatDistance,\n  formatLong: formatLong,\n  formatRelative: formatRelative,\n  localize: localize,\n  match: match,\n  options: {\n    weekStartsOn: 0 /* Sunday */,\n    firstWeekContainsDate: 1,\n  },\n};\n\n// Fallback for modularized imports:\nexport default enUS;\n","let defaultOptions = {};\n\nexport function getDefaultOptions() {\n  return defaultOptions;\n}\n\nexport function setDefaultOptions(newOptions) {\n  defaultOptions = newOptions;\n}\n","import { toDate } from \"../toDate.mjs\";\n\n/**\n * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.\n * They usually appear for dates that denote time before the timezones were introduced\n * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891\n * and GMT+01:00:00 after that date)\n *\n * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,\n * which would lead to incorrect calculations.\n *\n * This function returns the timezone offset in milliseconds that takes seconds in account.\n */\nexport function getTimezoneOffsetInMilliseconds(date) {\n  const _date = toDate(date);\n  const utcDate = new Date(\n    Date.UTC(\n      _date.getFullYear(),\n      _date.getMonth(),\n      _date.getDate(),\n      _date.getHours(),\n      _date.getMinutes(),\n      _date.getSeconds(),\n      _date.getMilliseconds(),\n    ),\n  );\n  utcDate.setUTCFullYear(_date.getFullYear());\n  return +date - +utcDate;\n}\n","import { compareAsc } from \"./compareAsc.mjs\";\nimport { minutesInDay, minutesInMonth } from \"./constants.mjs\";\nimport { differenceInMonths } from \"./differenceInMonths.mjs\";\nimport { differenceInSeconds } from \"./differenceInSeconds.mjs\";\nimport { toDate } from \"./toDate.mjs\";\nimport { defaultLocale } from \"./_lib/defaultLocale.mjs\";\nimport { getDefaultOptions } from \"./_lib/defaultOptions.mjs\";\nimport { getTimezoneOffsetInMilliseconds } from \"./_lib/getTimezoneOffsetInMilliseconds.mjs\";\n\n/**\n * The {@link formatDistance} function options.\n */\n\n/**\n * @name formatDistance\n * @category Common Helpers\n * @summary Return the distance between the given dates in words.\n *\n * @description\n * Return the distance between the given dates in words.\n *\n * | Distance between dates                                            | Result              |\n * |-------------------------------------------------------------------|---------------------|\n * | 0 ... 30 secs                                                     | less than a minute  |\n * | 30 secs ... 1 min 30 secs                                         | 1 minute            |\n * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |\n * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |\n * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |\n * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |\n * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |\n * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |\n * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |\n * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |\n * | 1 yr ... 1 yr 3 months                                            | about 1 year        |\n * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |\n * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |\n * | N yrs ... N yrs 3 months                                          | about N years       |\n * | N yrs 3 months ... N yrs 9 months                                 | over N years        |\n * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |\n *\n * With `options.includeSeconds == true`:\n * | Distance between dates | Result               |\n * |------------------------|----------------------|\n * | 0 secs ... 5 secs      | less than 5 seconds  |\n * | 5 secs ... 10 secs     | less than 10 seconds |\n * | 10 secs ... 20 secs    | less than 20 seconds |\n * | 20 secs ... 40 secs    | half a minute        |\n * | 40 secs ... 60 secs    | less than a minute   |\n * | 60 secs ... 90 secs    | 1 minute             |\n *\n * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).\n *\n * @param date - The date\n * @param baseDate - The date to compare with\n * @param options - An object with options\n *\n * @returns The distance in words\n *\n * @throws `date` must not be Invalid Date\n * @throws `baseDate` must not be Invalid Date\n * @throws `options.locale` must contain `formatDistance` property\n *\n * @example\n * // What is the distance between 2 July 2014 and 1 January 2015?\n * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))\n * //=> '6 months'\n *\n * @example\n * // What is the distance between 1 January 2015 00:00:15\n * // and 1 January 2015 00:00:00, including seconds?\n * const result = formatDistance(\n *   new Date(2015, 0, 1, 0, 0, 15),\n *   new Date(2015, 0, 1, 0, 0, 0),\n *   { includeSeconds: true }\n * )\n * //=> 'less than 20 seconds'\n *\n * @example\n * // What is the distance from 1 January 2016\n * // to 1 January 2015, with a suffix?\n * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {\n *   addSuffix: true\n * })\n * //=> 'about 1 year ago'\n *\n * @example\n * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?\n * import { eoLocale } from 'date-fns/locale/eo'\n * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {\n *   locale: eoLocale\n * })\n * //=> 'pli ol 1 jaro'\n */\n\nexport function formatDistance(date, baseDate, options) {\n  const defaultOptions = getDefaultOptions();\n  const locale = options?.locale ?? defaultOptions.locale ?? defaultLocale;\n  const minutesInAlmostTwoDays = 2520;\n\n  const comparison = compareAsc(date, baseDate);\n\n  if (isNaN(comparison)) {\n    throw new RangeError(\"Invalid time value\");\n  }\n\n  const localizeOptions = Object.assign({}, options, {\n    addSuffix: options?.addSuffix,\n    comparison: comparison,\n  });\n\n  let dateLeft;\n  let dateRight;\n  if (comparison > 0) {\n    dateLeft = toDate(baseDate);\n    dateRight = toDate(date);\n  } else {\n    dateLeft = toDate(date);\n    dateRight = toDate(baseDate);\n  }\n\n  const seconds = differenceInSeconds(dateRight, dateLeft);\n  const offsetInSeconds =\n    (getTimezoneOffsetInMilliseconds(dateRight) -\n      getTimezoneOffsetInMilliseconds(dateLeft)) /\n    1000;\n  const minutes = Math.round((seconds - offsetInSeconds) / 60);\n  let months;\n\n  // 0 up to 2 mins\n  if (minutes < 2) {\n    if (options?.includeSeconds) {\n      if (seconds < 5) {\n        return locale.formatDistance(\"lessThanXSeconds\", 5, localizeOptions);\n      } else if (seconds < 10) {\n        return locale.formatDistance(\"lessThanXSeconds\", 10, localizeOptions);\n      } else if (seconds < 20) {\n        return locale.formatDistance(\"lessThanXSeconds\", 20, localizeOptions);\n      } else if (seconds < 40) {\n        return locale.formatDistance(\"halfAMinute\", 0, localizeOptions);\n      } else if (seconds < 60) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", 1, localizeOptions);\n      }\n    } else {\n      if (minutes === 0) {\n        return locale.formatDistance(\"lessThanXMinutes\", 1, localizeOptions);\n      } else {\n        return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n      }\n    }\n\n    // 2 mins up to 0.75 hrs\n  } else if (minutes < 45) {\n    return locale.formatDistance(\"xMinutes\", minutes, localizeOptions);\n\n    // 0.75 hrs up to 1.5 hrs\n  } else if (minutes < 90) {\n    return locale.formatDistance(\"aboutXHours\", 1, localizeOptions);\n\n    // 1.5 hrs up to 24 hrs\n  } else if (minutes < minutesInDay) {\n    const hours = Math.round(minutes / 60);\n    return locale.formatDistance(\"aboutXHours\", hours, localizeOptions);\n\n    // 1 day up to 1.75 days\n  } else if (minutes < minutesInAlmostTwoDays) {\n    return locale.formatDistance(\"xDays\", 1, localizeOptions);\n\n    // 1.75 days up to 30 days\n  } else if (minutes < minutesInMonth) {\n    const days = Math.round(minutes / minutesInDay);\n    return locale.formatDistance(\"xDays\", days, localizeOptions);\n\n    // 1 month up to 2 months\n  } else if (minutes < minutesInMonth * 2) {\n    months = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"aboutXMonths\", months, localizeOptions);\n  }\n\n  months = differenceInMonths(dateRight, dateLeft);\n\n  // 2 months up to 12 months\n  if (months < 12) {\n    const nearestMonth = Math.round(minutes / minutesInMonth);\n    return locale.formatDistance(\"xMonths\", nearestMonth, localizeOptions);\n\n    // 1 year up to max Date\n  } else {\n    const monthsSinceStartOfYear = months % 12;\n    const years = Math.trunc(months / 12);\n\n    // N years up to 1 years 3 months\n    if (monthsSinceStartOfYear < 3) {\n      return locale.formatDistance(\"aboutXYears\", years, localizeOptions);\n\n      // N years 3 months up to N years 9 months\n    } else if (monthsSinceStartOfYear < 9) {\n      return locale.formatDistance(\"overXYears\", years, localizeOptions);\n\n      // N years 9 months up to N year 12 months\n    } else {\n      return locale.formatDistance(\"almostXYears\", years + 1, localizeOptions);\n    }\n  }\n}\n\n// Fallback for modularized imports:\nexport default formatDistance;\n","/* eslint-disable no-nested-ternary */\nimport { memo, ReactNode, useCallback, useMemo, useState } from 'react';\nimport dynamic from 'next/dynamic';\nimport { formatDistance } from 'date-fns/formatDistance';\nimport { I_CommentScene } from '@containers/Home/types';\nimport { CommentSceneItemWrapper } from './styled';\n\nconst CommentBox = dynamic(() => import('./CommentBox'));\nconst PopoverMenu = dynamic(() => import('@components/PopoverMenu'));\n\nexport const LIST_MENU = [\n  {\n    type: 'edit',\n    classIcon: 'fas fa-pen',\n    label: 'Edit',\n    isOwnerComment: true,\n    isOwnerTour: false,\n  },\n  {\n    type: 'resolved',\n    classIcon: 'fas fa-check',\n    label: 'Mark Resolve',\n    isOwnerTour: true,\n    isOwnerComment: false,\n  },\n  {\n    type: 'processing',\n    classIcon: 'fas fa-undo-alt',\n    label: 'Mark Active',\n    isOwnerTour: true,\n    isOwnerComment: false,\n  },\n  {\n    type: 'remove',\n    classIcon: 'fas fa-trash-alt',\n    label: 'Delete',\n    isOwnerTour: true,\n    isOwnerComment: true,\n  },\n];\n\ninterface Props {\n  commentScene: I_CommentScene;\n  layout?: 'children' | 'parent';\n  children?: ReactNode;\n  onClick?: (commentScene) => void;\n  onUpdate: (commentScene) => void;\n  onDelete: (commentScene) => void;\n}\n\nconst CommentSceneItem = memo(\n  ({\n    layout = 'parent',\n    children,\n    commentScene,\n    onClick,\n    onUpdate,\n    onDelete,\n  }: Props) => {\n    const listMenu = useMemo(\n      () =>\n        LIST_MENU.filter(item => {\n          let isShow = false;\n          if (item.isOwnerComment && item.isOwnerTour)\n            isShow =\n              (commentScene?.isOwnerComment || commentScene?.isOwnerTour) ??\n              false;\n          else if (item.isOwnerComment && !item.isOwnerTour) {\n            isShow = commentScene?.isOwnerComment ?? false;\n          } else if (!item.isOwnerComment && item.isOwnerTour) {\n            isShow =\n              (item.type === 'resolved'\n                ? commentScene?.isOwnerTour &&\n                  !commentScene.isResolved &&\n                  !commentScene.parent\n                : item.type === 'processing'\n                ? commentScene?.isOwnerTour &&\n                  commentScene.isResolved &&\n                  !commentScene.parent\n                : commentScene?.isOwnerTour) ?? false;\n          }\n          return isShow;\n        }),\n      [commentScene],\n    );\n\n    const [isEdit, setEdit] = useState(false);\n\n    const _onClick = useCallback(() => {\n      if (onClick) onClick(commentScene);\n    }, [onClick, commentScene]);\n\n    const onTriggerAction = useCallback(\n      ({ type }) => {\n        switch (type) {\n          case 'edit':\n            setEdit(true);\n            break;\n          case 'resolved':\n            onUpdate({\n              ...commentScene,\n              ath: undefined,\n              atv: undefined,\n              message: undefined,\n              scene_id: commentScene.id,\n              isResolved: true,\n            });\n            break;\n          case 'processing':\n            onUpdate({\n              ...commentScene,\n              ath: undefined,\n              atv: undefined,\n              message: undefined,\n              scene_id: commentScene.id,\n              isResolved: false,\n            });\n            break;\n          case 'remove':\n            onDelete(commentScene);\n            break;\n          default:\n            break;\n        }\n      },\n      [commentScene, onDelete, onUpdate],\n    );\n\n    const onCancelEditing = useCallback(() => setEdit(false), []);\n\n    const onSubmitEditing = useCallback(\n      value =>\n        onUpdate({\n          ...commentScene,\n          message: value,\n          ath: undefined,\n          atv: undefined,\n          isResolved: undefined,\n          scene_id: commentScene.id,\n        }),\n      [commentScene, onUpdate],\n    );\n\n    return (\n      <CommentSceneItemWrapper\n        className={`${layout}-layout`}\n        onClick={_onClick}\n      >\n        <div className=\"--main\">\n          {layout === 'parent' ? (\n            <>\n              <div className=\"user\">\n                <div className=\"avt\">\n                  <img src={commentScene.user.avatar || ''} alt=\"\" />\n                </div>\n                <div className=\"info\">\n                  <div className=\"name\">\n                    {commentScene.user.name || commentScene.user.email || ''}\n                  </div>\n                  <div className=\"time\">\n                    {formatDistance(\n                      new Date(commentScene.created_at),\n                      new Date(),\n                      {\n                        addSuffix: false,\n                      },\n                    )}\n                  </div>\n                </div>\n              </div>\n              {isEdit ? (\n                <CommentBox\n                  initValue={commentScene.message}\n                  onCancel={onCancelEditing}\n                  onSubmit={onSubmitEditing}\n                />\n              ) : (\n                <div className=\"txt\">{commentScene.message}</div>\n              )}\n              {children}\n            </>\n          ) : (\n            <>\n              <div className=\"avt\">\n                <img src={commentScene.user.avatar || ''} alt=\"\" />\n              </div>\n              <div className=\"content\">\n                <div className=\"info\">\n                  <div className=\"name\">\n                    {commentScene.user.name || commentScene.user.email || ''}\n                  </div>\n                  <div className=\"time\">\n                    {formatDistance(\n                      new Date(commentScene.created_at),\n                      new Date(),\n                      {\n                        addSuffix: false,\n                      },\n                    )}\n                  </div>\n                </div>\n                {isEdit ? (\n                  <CommentBox\n                    initValue={commentScene.message}\n                    onCancel={onCancelEditing}\n                    onSubmit={onSubmitEditing}\n                  />\n                ) : (\n                  <div className=\"txt\">{commentScene.message}</div>\n                )}\n              </div>\n              {children}\n            </>\n          )}\n        </div>\n        {!!listMenu.length && (\n          <div className=\"--extra\">\n            <PopoverMenu\n              listMenu={listMenu}\n              onTriggerAction={onTriggerAction}\n              placement=\"bottom\"\n            >\n              <i aria-hidden className=\"fas fa-ellipsis-v\" />\n            </PopoverMenu>\n          </div>\n        )}\n      </CommentSceneItemWrapper>\n    );\n  },\n);\n\nexport default CommentSceneItem;\n"],"names":["args","toDate","argument","argStr","Object","prototype","toString","call","Date","constructor","NaN","compareAsc","dateLeft","dateRight","_dateLeft","_dateRight","diff","getTime","formatDistanceLocale","lessThanXSeconds","one","other","xSeconds","halfAMinute","lessThanXMinutes","xMinutes","aboutXHours","xHours","xDays","aboutXWeeks","xWeeks","aboutXMonths","xMonths","aboutXYears","xYears","overXYears","almostXYears","buildFormatLongFn","options","width","String","defaultWidth","format","formats","formatLong","date","full","long","medium","short","time","dateTime","formatRelativeLocale","lastWeek","yesterday","today","tomorrow","nextWeek","buildLocalizeFn","value","valuesArray","context","formattingValues","defaultFormattingWidth","values","index","argumentCallback","localize","ordinalNumber","dirtyNumber","_options","number","Number","rem100","era","narrow","abbreviated","wide","quarter","month","day","dayPeriod","am","pm","midnight","noon","morning","afternoon","evening","night","buildMatchFn","string","matchPattern","matchPatterns","defaultMatchWidth","matchResult","match","matchedString","parsePatterns","defaultParseWidth","key","Array","isArray","findIndex","array","predicate","length","pattern","test","findKey","object","hasOwnProperty","valueCallback","rest","slice","parsePattern","parseInt","parseResult","any","enUS","code","formatDistance","token","count","result","tokenValue","replace","addSuffix","comparison","formatRelative","_date","_baseDate","weekStartsOn","firstWeekContainsDate","defaultOptions","getTimezoneOffsetInMilliseconds","utcDate","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","getMilliseconds","setUTCFullYear","formatDistance_formatDistance","baseDate","months","locale","isNaN","localizeOptions","assign","seconds","differenceInSeconds","method","getRoundingMethod","round","Math","trunc","offsetInSeconds","minutes","includeSeconds","hours","days","minutesInMonth","differenceInMonths","sign","difference","abs","differenceInCalendarMonths","yearDiff","monthDiff","setDate","setMonth","isLastMonthNotFull","isLastDayOfMonth","endOfDay","setHours","endOfMonth","setFullYear","nearestMonth","monthsSinceStartOfYear","years","CommentBox","dynamic","Promise","all","__webpack_require__","e","then","bind","PopoverMenu","LIST_MENU","type","classIcon","label","isOwnerComment","isOwnerTour","CommentScene_CommentSceneItem","memo","param","layout","_param_layout","children","commentScene","onClick","onUpdate","onDelete","listMenu","useMemo","filter","item","isShow","isResolved","parent","useState","isEdit","setEdit","_onClick","useCallback","onTriggerAction","_object_spread_props","_","_object_spread","ath","undefined","atv","message","scene_id","id","onCancelEditing","onSubmitEditing","jsx_runtime","jsxs","CommentSceneItemWrapper","className","concat","jsx","div","Fragment","img","src","user","avatar","alt","name","email","created_at","initValue","onCancel","onSubmit","placement","i","aria-hidden"],"sourceRoot":""}