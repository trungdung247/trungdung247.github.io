{"version":3,"file":"static/chunks/7526.9cafd31e39f46832.js","mappings":"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","sources":["webpack://_N_E/./containers/Home/themes/ThemeWall/FlickityScenes.tsx","webpack://_N_E/./containers/Home/themes/ThemeWall/ListScene.tsx","webpack://_N_E/./node_modules/flickity/css/flickity.css","webpack://_N_E/<anon>"],"sourcesContent":["import { I_Scene } from '@containers/Home/types';\nimport Flickity from 'react-flickity-component';\n\nexport type TypeFlickity = Flickity;\n\ninterface I_ListSceneProps {\n  sceneSelected?: I_Scene;\n  scenesGroupActive?: I_Scene[];\n  onSetRef: (c: TypeFlickity | null) => void;\n}\n\nfunction ListSceneFlickity({\n  onSetRef,\n  scenesGroupActive,\n  sceneSelected,\n}: I_ListSceneProps) {\n  return (\n    <Flickity\n      elementType=\"div\"\n      className=\"carousel\"\n      flickityRef={c => {\n        if (c) onSetRef(c);\n      }}\n      options={{\n        freeScroll: true,\n        freeScrollFriction: 0.03,\n        contain: true,\n        prevNextButtons: false,\n        pageDots: false,\n        lazyLoad: true,\n        cellAlign: 'left',\n      }}\n    >\n      {scenesGroupActive?.map(scene => (\n        <div\n          key={scene.id}\n          className={`${\n            sceneSelected?.id === scene.id ? 'active' : ''\n          } itemScene`}\n        >\n          <img src={scene.screenshot || scene.media?.src_thumb || ''} alt=\"\" />\n          <h2 className=\"--menuSceneTitle\">{scene.title}</h2>\n        </div>\n      ))}\n    </Flickity>\n  );\n}\n\nexport default ListSceneFlickity;\n","import {\n  selectListGroup,\n  selectSceneSelected,\n} from '@containers/Home/selectors';\nimport { I_Scene } from '@containers/Home/types';\nimport React, {\n  Ref,\n  useRef,\n  useMemo,\n  useEffect,\n  forwardRef,\n  useCallback,\n  useImperativeHandle,\n  useState,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport { Tabs } from 'antd';\nimport ListSceneFlickity, { TypeFlickity } from './FlickityScenes';\nimport { FlickityStyle } from '@styles/flickity';\nimport { ListSceneWrapper } from './styled';\nimport 'flickity/css/flickity.css';\n\ninterface Props {\n  isShow: boolean;\n  className?: string;\n  onChangeScene: (scene: I_Scene) => void;\n}\n\nexport type Type_RefFuncSlide = {\n  onPrevScene: () => void;\n  onNextScene: () => void;\n};\n\nconst ListScene = forwardRef(\n  (\n    { onChangeScene, className, isShow }: Props,\n    ref: Ref<Type_RefFuncSlide>,\n  ) => {\n    const flickityRef = useRef<TypeFlickity | null>(null!);\n\n    const [isShowFlickity, setIsShowFlickity] = useState(false);\n\n    const listGroup = useSelector(selectListGroup);\n    const sceneSelected = useSelector(selectSceneSelected);\n\n    const groupActive = useMemo(\n      () =>\n        listGroup.length === 1 && listGroup[0].id === 'uncategory'\n          ? 'uncategory'\n          : listGroup.filter(item => sceneSelected?.group === item.id)[0]?.id ||\n            '',\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      [listGroup, sceneSelected?.id],\n    );\n\n    const scenesGroupActive = useMemo(\n      () => listGroup.filter(item => item.id === groupActive)[0]?.scenes || [],\n      [groupActive, listGroup],\n    );\n\n    const currentIndex = useMemo(\n      () => scenesGroupActive.findIndex(item => item.id === sceneSelected?.id),\n      [sceneSelected?.id, scenesGroupActive],\n    );\n\n    const onClickScene = useCallback(\n      (_event, _pointer, cellElement, cellIndex) => {\n        if (!cellElement) return;\n        onChangeScene(scenesGroupActive[cellIndex]);\n      },\n      [onChangeScene, scenesGroupActive],\n    );\n\n    useImperativeHandle(ref, () => ({\n      onPrevScene() {\n        if (currentIndex !== 0) {\n          const index = currentIndex - 1;\n          onChangeScene(scenesGroupActive[index]);\n          flickityRef.current?.select(index, false);\n        }\n      },\n      onNextScene() {\n        if (currentIndex + 1 !== scenesGroupActive.length) {\n          const index = currentIndex + 1;\n          onChangeScene(scenesGroupActive[index]);\n          flickityRef.current?.select(index, false);\n        }\n      },\n    }));\n\n    useEffect(() => {\n      setIsShowFlickity(true);\n    }, []);\n\n    useEffect(() => {\n      if (flickityRef?.current)\n        flickityRef.current?.on('staticClick', onClickScene);\n      return () => {\n        if (flickityRef?.current)\n          flickityRef.current?.off('staticClick', onClickScene);\n      };\n    }, [groupActive, onClickScene, isShowFlickity]);\n\n    return (\n      <ListSceneWrapper\n        className={`${className} ${isShow ? '' : '--hide'} ${\n          listGroup.length === 1 && listGroup[0].id === 'uncategory'\n            ? 'hideNav'\n            : ''\n        }`}\n        id=\"themeListScene\"\n      >\n        {listGroup.length === 1 && listGroup[0].id === 'uncategory' ? (\n          <div className=\"scenes\">\n            {isShowFlickity && (\n              <ListSceneFlickity\n                sceneSelected={sceneSelected}\n                scenesGroupActive={scenesGroupActive}\n                onSetRef={c => {\n                  if (!flickityRef.current && c) {\n                    flickityRef.current = c;\n                    flickityRef.current?.on('staticClick', onClickScene);\n                  }\n                }}\n              />\n            )}\n          </div>\n        ) : (\n          <Tabs\n            activeKey={groupActive}\n            tabPosition=\"top\"\n            onTabClick={key => {\n              const group = listGroup.filter(item => item.id === key)[0];\n              if (group.scenes) {\n                flickityRef.current = null;\n                onChangeScene(group.scenes[0]);\n              }\n            }}\n            className=\"--tabs\"\n          >\n            {listGroup.map(group => (\n              <Tabs.TabPane\n                tab={`${group.name || 'N/A'}`}\n                key={group.id}\n                className={`itemSceneCate ${\n                  groupActive === group.id ? 'active' : ''\n                }`}\n              >\n                {groupActive === group.id && isShowFlickity && (\n                  <ListSceneFlickity\n                    sceneSelected={sceneSelected}\n                    scenesGroupActive={scenesGroupActive}\n                    onSetRef={c => {\n                      if (!flickityRef.current) {\n                        flickityRef.current = c;\n                        flickityRef.current?.on('staticClick', onClickScene);\n                      }\n                    }}\n                  />\n                )}\n              </Tabs.TabPane>\n            ))}\n          </Tabs>\n        )}\n\n        <FlickityStyle />\n      </ListSceneWrapper>\n    );\n  },\n);\n\nexport default ListScene;\n","// extracted by mini-css-extract-plugin"],"names":["FlickityScenes","param","onSetRef","scenesGroupActive","sceneSelected","jsx_runtime","jsx","Flickity","elementType","className","flickityRef","c","options","freeScroll","freeScrollFriction","contain","prevNextButtons","pageDots","lazyLoad","cellAlign","map","scene","jsxs","div","concat","id","img","src","screenshot","media","src_thumb","alt","h2","title","ThemeWall_ListScene","forwardRef","ref","onChangeScene","isShow","useRef","useState","isShowFlickity","setIsShowFlickity","listGroup","useSelector","selectListGroup","selectSceneSelected","groupActive","useMemo","length","filter","item","group","scenes","currentIndex","findIndex","onClickScene","useCallback","_event","_pointer","cellElement","cellIndex","useImperativeHandle","onPrevScene","index","current","select","onNextScene","useEffect","on","off","ListSceneWrapper","ListSceneFlickity","Tabs","activeKey","tabPosition","onTabClick","key","TabPane","tab","name","FlickityStyle"],"sourceRoot":""}