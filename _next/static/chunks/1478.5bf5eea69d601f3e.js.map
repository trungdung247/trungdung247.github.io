{"version":3,"file":"static/chunks/1478.5bf5eea69d601f3e.js","mappings":"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","sources":["webpack://_N_E/./containers/Home/components/Floorplan/DisplayPanel.tsx","webpack://_N_E/./containers/Home/components/Floorplan/ImageFloorplan.tsx","webpack://_N_E/./containers/Home/hook/useEventFloorplan.tsx","webpack://_N_E/<anon>"],"sourcesContent":["/* eslint-disable no-nested-ternary */\nimport { memo, useRef } from 'react';\nimport { I_Scene } from '@containers/Home/types';\nimport { DEFAULT_VALUE_FLOORPLAN_CONFIG } from '@containers/Home/constants';\nimport dynamic from 'next/dynamic';\nimport { useTourEventState } from '@containers/Home/global/TourStats';\nimport { useEventFloorplan } from '@containers/Home/hook/useEventFloorplan';\nimport { useSelector } from 'react-redux';\nimport { selectThemeConfigGlobal } from '@containers/Home/selectors';\nimport { ActionFloorplanWrapper, FloorplanPanelWrapper } from './styled';\nimport ImageFloorplan, { Type_RefFuncImageFloorplan } from './ImageFloorplan';\n\nconst DropdownContainer = dynamic(\n  () => import('@components/DropdownContainer'),\n);\nconst Popup = dynamic(() => import('./Popup'));\n\ninterface Props {\n  onChangeScene: (scene: I_Scene) => void;\n}\n\nconst FloorplanPanel = memo(({ onChangeScene }: Props) => {\n  const floorplanRef = useRef<Type_RefFuncImageFloorplan>(null!);\n\n  const themeConfig = useSelector(selectThemeConfigGlobal);\n  const [tourEventStats] = useTourEventState('state');\n\n  const {\n    visiblePopup,\n    sceneSelected,\n    listFloorplan,\n    markerSelected,\n    configFloorplan,\n    floorplanSelected,\n    configDisplayPanel,\n    onCenterToMarkerActive,\n    onChangeFloorplan,\n    onCloseFloorplan,\n    onClosePopup,\n    onOpenPopup,\n    onZoomOut,\n    onZoomIn,\n  } = useEventFloorplan({\n    floorplanRef,\n  });\n\n  return (\n    <FloorplanPanelWrapper\n      bgColor={\n        configFloorplan?.bgColor || DEFAULT_VALUE_FLOORPLAN_CONFIG.bgColor\n      }\n      position={configDisplayPanel?.position || 'left'}\n      className={`${tourEventStats.isVisibleFloorplan ? '' : 'hide'} ${\n        themeConfig?.selected === 'basekrpano'\n          ? 'basekrpano'\n          : themeConfig?.selected === 'custom1'\n          ? 'custom1'\n          : themeConfig?.selected === 'wall'\n          ? 'wall'\n          : 'default'\n      }`}\n    >\n      <div className=\"main\">\n        {floorplanSelected && (\n          <ImageFloorplan\n            zoom={1}\n            ref={floorplanRef}\n            sceneSelected={sceneSelected}\n            markerSelected={markerSelected}\n            floorplanSelected={floorplanSelected}\n            configFloorplan={configFloorplan}\n            onChangeScene={onChangeScene}\n          />\n        )}\n      </div>\n\n      <ActionFloorplanWrapper>\n        <div className=\"--left\">\n          <DropdownContainer\n            menuActive={[floorplanSelected?.id || '']}\n            listMenu={listFloorplan.map(floorplan => ({\n              type: floorplan.id,\n              classIcon: 'far fa-layer-group',\n              label: floorplan.name,\n            }))}\n            onClick={onChangeFloorplan}\n          >\n            <div className=\"action--item --select\">\n              <span>{floorplanSelected?.name || '---'}</span>\n              <i aria-hidden className=\"fas fa-caret-down\" />\n            </div>\n          </DropdownContainer>\n        </div>\n        <div className=\"--right\">\n          <div className=\"action--item\" onClick={onZoomIn}>\n            <i aria-hidden className=\"far fa-search-plus\" />\n          </div>\n          <div className=\"action--item\" onClick={onZoomOut}>\n            <i aria-hidden className=\"far fa-search-minus\" />\n          </div>\n          <div className=\"action--item\" onClick={onCenterToMarkerActive}>\n            <i aria-hidden className=\"far fa-crosshairs\" />\n          </div>\n          <div className=\"action--item\" onClick={onOpenPopup}>\n            <i aria-hidden className=\"far fa-expand\" />\n          </div>\n          <div className=\"action--item\" onClick={onCloseFloorplan}>\n            <i aria-hidden className=\"far fa-times\" />\n          </div>\n        </div>\n      </ActionFloorplanWrapper>\n\n      {visiblePopup && (\n        <Popup\n          visible={visiblePopup}\n          listFloorplan={listFloorplan}\n          markerSelected={markerSelected}\n          floorplanSelected={floorplanSelected}\n          configFloorplan={configFloorplan}\n          onChangeFloorplan={onChangeFloorplan}\n          onChangeScene={onChangeScene}\n          onCancel={onClosePopup}\n        />\n      )}\n    </FloorplanPanelWrapper>\n  );\n});\n\nexport default FloorplanPanel;\n","import {\n  forwardRef,\n  memo,\n  Ref,\n  useCallback,\n  useEffect,\n  useImperativeHandle,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  TransformWrapper,\n  TransformComponent,\n  ReactZoomPanPinchRef,\n} from 'react-zoom-pan-pinch';\nimport dynamic from 'next/dynamic';\nimport { DEFAULT_VALUE_FLOORPLAN_CONFIG } from '@containers/Home/constants';\nimport { selectListScene } from '../../selectors';\nimport { ImageFloorplanWrapper } from './styled';\nimport { I_FloorplanConfig, I_Floorplan, I_Scene } from '../../types';\n\nconst Marker = dynamic(() => import('./Marker'));\n\nexport type Type_RefFuncImageFloorplan = {\n  getInstance: () => ReactZoomPanPinchRef;\n};\n\ninterface Props {\n  zoom?: number;\n  maxZoom?: number;\n  minZoom?: number;\n  sceneSelected?: I_Scene;\n  floorplanSelected?: I_Floorplan;\n  markerSelected?: I_Floorplan['markers'][number];\n  configFloorplan?: I_FloorplanConfig;\n  onChangeScene: (scene: I_Scene) => void;\n}\n\nconst ImageFloorplan = forwardRef(\n  (\n    {\n      configFloorplan,\n      floorplanSelected,\n      sceneSelected,\n      markerSelected,\n      onChangeScene,\n      zoom = 1.5,\n      minZoom = 1,\n      maxZoom = 2,\n    }: Props,\n    ref: Ref<Type_RefFuncImageFloorplan>,\n  ) => {\n    const [isImageLoaded, setIsImageLoaded] = useState(false);\n    const floorplanRef = useRef<ReactZoomPanPinchRef>(null!);\n\n    const listScene = useSelector(selectListScene);\n\n    const configRadar = useMemo(\n      () => ({\n        ...DEFAULT_VALUE_FLOORPLAN_CONFIG.radar,\n        ...configFloorplan?.radar,\n      }),\n      [configFloorplan?.radar],\n    );\n    const configMarker = useMemo(\n      () => ({\n        ...DEFAULT_VALUE_FLOORPLAN_CONFIG.marker,\n        ...configFloorplan?.marker,\n      }),\n      [configFloorplan?.marker],\n    );\n\n    useEffect(() => {\n      if (markerSelected && isImageLoaded) {\n        /**\n         * FIXME: setTimeout is a workaround for the bug that the marker is not rendered yet (error node not found)\n         */\n        setTimeout(() => {\n          const scale = floorplanRef.current?.state?.scale || zoom;\n          markerSelected.id &&\n            floorplanRef.current?.zoomToElement(markerSelected.id, scale);\n        }, 200);\n      }\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isImageLoaded, markerSelected]);\n\n    useImperativeHandle(ref, () => ({\n      getInstance: () => floorplanRef.current,\n    }));\n\n    const onClickMarker = useCallback(\n      marker => {\n        const scene = listScene.filter(\n          item => item.id === marker.target_scene_id,\n        )[0];\n        if (scene) onChangeScene(scene);\n      },\n      [listScene, onChangeScene],\n    );\n\n    return (\n      <TransformWrapper\n        centerZoomedOut\n        initialScale={zoom}\n        ref={floorplanRef}\n        wheel={{ disabled: true }}\n        pinch={{ disabled: true }}\n        doubleClick={{ disabled: true }}\n        minScale={minZoom}\n        maxScale={maxZoom}\n        alignmentAnimation={{\n          animationTime: 150,\n          animationType: 'linear',\n        }}\n      >\n        <TransformComponent wrapperStyle={{ width: '100%', height: '100%' }}>\n          <ImageFloorplanWrapper>\n            <img\n              src={floorplanSelected?.src}\n              alt=\"test\"\n              onLoad={() => setIsImageLoaded(true)}\n            />\n            {floorplanSelected?.markers?.map(marker => (\n              <Marker\n                key={marker.id}\n                marker={marker}\n                onClick={onClickMarker}\n                configRadar={configRadar}\n                configMarker={configMarker}\n                northRadar={sceneSelected?.north_ath || 0}\n                isTurnOnRadar={!!configRadar.isEnabled}\n                isActive={markerSelected?.id === marker.id}\n              />\n            ))}\n          </ImageFloorplanWrapper>\n        </TransformComponent>\n      </TransformWrapper>\n    );\n  },\n);\n\nexport default memo(ImageFloorplan);\n","import { RefObject, useCallback, useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTourEventState } from '../global/TourStats';\nimport {\n  selectListFloorplan,\n  selectConfigFloorplan,\n  selectSceneSelected,\n} from '../selectors';\nimport { I_Floorplan } from '../types';\nimport { Type_RefFuncImageFloorplan } from '../components/Floorplan/ImageFloorplan';\n\ninterface Props {\n  floorplanRef: RefObject<Type_RefFuncImageFloorplan>;\n}\n\nexport const useEventFloorplan = ({ floorplanRef }: Props) => {\n  const listFloorplan = useSelector(selectListFloorplan);\n  const sceneSelected = useSelector(selectSceneSelected);\n  const configFloorplan = useSelector(selectConfigFloorplan);\n\n  const [, setTourEventStats] = useTourEventState('state');\n\n  const [floorplanSelected, setFloorplanSelected] = useState<\n    I_Floorplan | undefined\n  >(undefined);\n\n  useEffect(() => {\n    // if (!floorplanSelected) {\n    const fp = listFloorplan\n      ? listFloorplan.filter(\n          item =>\n            item.markers?.filter(\n              marker => marker.target_scene_id === sceneSelected?.id,\n            ).length > 0,\n        )[0] ||\n        listFloorplan[0] ||\n        undefined\n      : undefined;\n    setFloorplanSelected(fp);\n    // }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [listFloorplan, sceneSelected?.id]);\n\n  const markerSelected = useMemo(\n    () =>\n      floorplanSelected?.markers?.filter(\n        item => item.target_scene_id === sceneSelected?.id,\n      )[0] || undefined,\n    [floorplanSelected, sceneSelected?.id],\n  );\n\n  const configDisplayPanel = useMemo(\n    () =>\n      configFloorplan?.floorplan?.type === 'panel'\n        ? configFloorplan?.floorplan\n        : undefined,\n    [configFloorplan?.floorplan],\n  );\n\n  const configDisplayBox = useMemo(\n    () =>\n      configFloorplan?.floorplan?.type === 'box'\n        ? {\n            ...{\n              offsetBottom: 48,\n              offsetLeft: 10,\n              offsetRight: 10,\n              offsetTop: 10,\n            },\n            ...configFloorplan?.floorplan,\n          }\n        : undefined,\n    [configFloorplan?.floorplan],\n  );\n\n  const [visiblePopup, setVisiblePopup] = useState(false);\n\n  const onCloseFloorplan = useCallback(() => {\n    setTourEventStats(prev => ({ ...prev, isVisibleFloorplan: false }));\n  }, [setTourEventStats]);\n\n  const onOpenPopup = useCallback(() => setVisiblePopup(true), []);\n  const onClosePopup = useCallback(() => setVisiblePopup(false), []);\n\n  const onZoomIn = useCallback(\n    () => floorplanRef.current?.getInstance().zoomIn(),\n    [floorplanRef],\n  );\n  const onZoomOut = useCallback(\n    () => floorplanRef.current?.getInstance().zoomOut(),\n    [floorplanRef],\n  );\n  const onCenterToMarkerActive = useCallback(() => {\n    const scale = floorplanRef.current?.getInstance().state.scale;\n    if (markerSelected?.id)\n      floorplanRef.current\n        ?.getInstance()\n        ?.zoomToElement(markerSelected.id, scale || undefined);\n  }, [floorplanRef, markerSelected]);\n\n  const onChangeFloorplan = useCallback(\n    ({ type }) => {\n      const fp = listFloorplan.filter(item => item.id === type)[0];\n      if (fp) setFloorplanSelected(fp);\n    },\n    [listFloorplan],\n  );\n\n  return useMemo(\n    () => ({\n      visiblePopup,\n      sceneSelected,\n      listFloorplan,\n      markerSelected,\n      configFloorplan,\n      configDisplayBox,\n      floorplanSelected,\n      configDisplayPanel,\n      onCenterToMarkerActive,\n      onChangeFloorplan,\n      onCloseFloorplan,\n      onClosePopup,\n      onOpenPopup,\n      onZoomOut,\n      onZoomIn,\n    }),\n    [\n      visiblePopup,\n      sceneSelected,\n      listFloorplan,\n      markerSelected,\n      configFloorplan,\n      configDisplayBox,\n      floorplanSelected,\n      configDisplayPanel,\n      onCenterToMarkerActive,\n      onChangeFloorplan,\n      onCloseFloorplan,\n      onClosePopup,\n      onOpenPopup,\n      onZoomOut,\n      onZoomIn,\n    ],\n  );\n};\n"],"names":["DropdownContainer","dynamic","Promise","all","__webpack_require__","e","then","bind","Popup","FloorplanPanel","memo","param","onChangeScene","floorplanRef","useRef","themeConfig","useSelector","selectThemeConfigGlobal","tourEventStats","useTourEventState","useEventFloorplan","visiblePopup","sceneSelected","listFloorplan","markerSelected","configFloorplan","floorplanSelected","configDisplayPanel","onCenterToMarkerActive","onChangeFloorplan","onCloseFloorplan","onClosePopup","onOpenPopup","onZoomOut","onZoomIn","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","FloorplanPanelWrapper","bgColor","DEFAULT_VALUE_FLOORPLAN_CONFIG","position","className","isVisibleFloorplan","concat","selected","jsx","div","ImageFloorplan","zoom","ref","ActionFloorplanWrapper","menuActive","id","listMenu","map","floorplan","type","classIcon","label","name","onClick","span","i","aria-hidden","visible","onCancel","__webpack_exports__","Marker","forwardRef","_param_zoom","_param_minZoom","minZoom","_param_maxZoom","maxZoom","useState","isImageLoaded","setIsImageLoaded","listScene","selectListScene","configRadar","useMemo","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_9__","_","radar","configMarker","marker","useEffect","setTimeout","scale","current","state","zoomToElement","useImperativeHandle","getInstance","onClickMarker","useCallback","scene","filter","item","target_scene_id","TransformWrapper","centerZoomedOut","initialScale","wheel","disabled","pinch","doubleClick","minScale","maxScale","alignmentAnimation","animationTime","animationType","TransformComponent","wrapperStyle","width","height","ImageFloorplanWrapper","img","src","alt","onLoad","markers","northRadar","north_ath","isTurnOnRadar","isEnabled","isActive","Z","selectListFloorplan","selectSceneSelected","selectConfigFloorplan","setTourEventStats","undefined","setFloorplanSelected","length","configDisplayBox","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_5__","offsetBottom","offsetLeft","offsetRight","offsetTop","setVisiblePopup","prev","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_6__","zoomIn","zoomOut","fp"],"sourceRoot":""}