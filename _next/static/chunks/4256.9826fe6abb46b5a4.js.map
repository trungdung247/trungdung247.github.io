{"version":3,"file":"static/chunks/4256.9826fe6abb46b5a4.js","mappings":"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","sources":["webpack://_N_E/./containers/Home/hook/useControlbarConfig.tsx","webpack://_N_E/./containers/Home/themes/ThemeDefault/Controlbar.Action.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectConfigControlbar, selectSceneSelected } from '../selectors';\nimport { I_ControlbarKey } from '../types';\nimport { useTourStats } from '../global/TourStats';\nimport { DEFAULT_VALUE_CONTROLBAR_CONFIG } from '../constants';\n\nexport const useControlbarConfig = () => {\n  const [tourStats] = useTourStats('stats');\n  const sceneSelected = useSelector(selectSceneSelected);\n  const controlbarConfig = useSelector(selectConfigControlbar);\n\n  const onCheckIsShowContentControlbarItem = useCallback(\n    (type: I_ControlbarKey) => {\n      if (type) {\n        const config =\n          controlbarConfig[type] || DEFAULT_VALUE_CONTROLBAR_CONFIG[type];\n\n        return type === 'gyro'\n          ? !!tourStats.isGyroscopeAvailable && !config?.isHide\n          : type === 'vr' || type === 'view_mode'\n          ? !config?.isHide && sceneSelected?.media?.subType !== 'flat'\n          : !config?.isHide;\n      }\n      return true;\n    },\n    [sceneSelected?.media, controlbarConfig, tourStats],\n  );\n\n  const onRenderContentControlbarItem = useCallback(\n    (type: I_ControlbarKey) => {\n      if (type) {\n        const config =\n          controlbarConfig[type] || DEFAULT_VALUE_CONTROLBAR_CONFIG[type];\n        if (config.type === 'icon' && config.icon)\n          return (\n            <i aria-hidden className={`controlbar-item__icon ${config.icon}`} />\n          );\n        if (config.type === 'image' && config.image?.src)\n          return (\n            <img\n              className=\"controlbar-item__img\"\n              src={config.image?.src}\n              alt=\"img\"\n            />\n          );\n      }\n      return '';\n    },\n    [controlbarConfig],\n  );\n\n  return useMemo(\n    () => ({\n      onRenderContentControlbarItem,\n      onCheckIsShowContentControlbarItem,\n    }),\n    [onRenderContentControlbarItem, onCheckIsShowContentControlbarItem],\n  );\n};\n","import { Type_RefFuncKrpano } from '@components/Krpano/types';\nimport { useTourEventState } from '@containers/Home/global/TourStats';\nimport { useControlbarConfig } from '@containers/Home/hook/useControlbarConfig';\nimport { useKrpano } from '@containers/Home/hook/useKrpano';\nimport {\n  selectConfigSoundProject,\n  selectLanguageProject,\n  selectThemeConfigGlobal,\n} from '@containers/Home/selectors';\nimport { Popover, Tooltip } from 'antd';\nimport React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ControlbarPopoverWrapper } from './styled';\nimport { isServer } from '@utils/helper';\n\ninterface Props {\n  krpanoRef: Type_RefFuncKrpano | null;\n}\n\nconst ControlbarAction = memo(({ krpanoRef }: Props) => {\n  const LANGUAGES = isServer ? {} : window.languages || {};\n\n  const [{ isSoundOnScene, isActiveModeMultipleStaging }] =\n    useTourEventState('state');\n  const { onRenderContentControlbarItem, onCheckIsShowContentControlbarItem } =\n    useControlbarConfig();\n\n  const themeConfig = useSelector(selectThemeConfigGlobal);\n  const languageProject = useSelector(selectLanguageProject);\n  const configSoundProject = useSelector(selectConfigSoundProject);\n\n  const {\n    //\n    onVR,\n    onToggleGyro,\n    onFullscreen,\n    onToFirstScene,\n    onViewNormal,\n    onViewMirrorBall,\n    onViewPlannet,\n    onTurnOnScreenshotCapture,\n    // NOTE: auto change scene\n    isChangeScene,\n    isShowIconChangeScene,\n    onChangeAutoChangeScene,\n    // NOTE: auto rotate\n    isRotate,\n    isShowIconRotate,\n    onToggleRotate,\n    // NOTE: info place\n    isShowIconInfoPlace,\n    onShowInfoPlace,\n    // NOTE: sound scene\n    isShowIconSoundScene,\n    onToggleSoundScene,\n    // NOTE: sound project\n    isShowIconSoundProject,\n    onTurnOffSoundProject,\n    onTurnOnSoundProject,\n    // NOTE: floorplan\n    isShowIconFloorplan,\n    onToggleFloorplan,\n    // NOTE: dollhouse\n    isShowIconDollhouse,\n    onToggleDollhouseView,\n    // NOTE: map\n    isShowIconMap,\n    onToggleMap,\n    // NOTE: multiple staging\n    isShowIconMultipleStaging,\n    onToggleModeMultipleStaging,\n    // NOTE: multi-language\n    languagesProject,\n    onChangeLanguageProject,\n  } = useKrpano({ krpanoRef });\n\n  return (\n    <div\n      className={`${\n        themeConfig?.selected === 'defaultNew' ? 'variant-palette' : ''\n      } actGroup`}\n    >\n      {onCheckIsShowContentControlbarItem('home') && (\n        <Tooltip\n          title={LANGUAGES[languageProject]?.controlbarFirstScene}\n          placement=\"top\"\n        >\n          <button type=\"button\" className=\"act\" onClick={onToFirstScene}>\n            {onRenderContentControlbarItem('home')}\n          </button>\n        </Tooltip>\n      )}\n      {isShowIconInfoPlace &&\n        onCheckIsShowContentControlbarItem('info_tour') && (\n          <Tooltip\n            title={LANGUAGES[languageProject]?.controlbarInfoTour}\n            placement=\"top\"\n          >\n            <button type=\"button\" className=\"act\" onClick={onShowInfoPlace}>\n              {onRenderContentControlbarItem('info_tour')}\n            </button>\n          </Tooltip>\n        )}\n      {isShowIconDollhouse &&\n        onCheckIsShowContentControlbarItem('dollhouse') && (\n          <Tooltip\n            title={LANGUAGES[languageProject]?.controlbarDollhouse}\n            placement=\"top\"\n          >\n            <button\n              type=\"button\"\n              className=\"act\"\n              onClick={onToggleDollhouseView}\n            >\n              {onRenderContentControlbarItem('dollhouse')}\n            </button>\n          </Tooltip>\n        )}\n      {isShowIconFloorplan &&\n        onCheckIsShowContentControlbarItem('floorplan') && (\n          <Tooltip\n            title={LANGUAGES[languageProject]?.controlbarFloorplan}\n            placement=\"top\"\n          >\n            <button type=\"button\" className=\"act\" onClick={onToggleFloorplan}>\n              {onRenderContentControlbarItem('floorplan')}\n            </button>\n          </Tooltip>\n        )}\n      {isShowIconMap && onCheckIsShowContentControlbarItem('map') && (\n        <Tooltip\n          title={LANGUAGES[languageProject]?.controlbarMap}\n          placement=\"top\"\n        >\n          <button type=\"button\" className=\"act\" onClick={onToggleMap}>\n            {onRenderContentControlbarItem('map')}\n          </button>\n        </Tooltip>\n      )}\n      {isShowIconSoundProject &&\n        onCheckIsShowContentControlbarItem('sound_project_off') &&\n        onCheckIsShowContentControlbarItem('sound_project_on') && (\n          <Tooltip\n            title={\n              configSoundProject.on\n                ? LANGUAGES[languageProject]?.controlbarTurnOffSoundProject\n                : LANGUAGES[languageProject]?.controlbarTurnOnSoundProject\n            }\n            placement=\"top\"\n          >\n            <button\n              type=\"button\"\n              className=\"act\"\n              onClick={\n                configSoundProject.on\n                  ? onTurnOffSoundProject\n                  : onTurnOnSoundProject\n              }\n            >\n              {configSoundProject.on\n                ? onRenderContentControlbarItem('sound_project_off')\n                : onRenderContentControlbarItem('sound_project_on')}\n            </button>\n          </Tooltip>\n        )}\n      {((isShowIconSoundScene &&\n        onCheckIsShowContentControlbarItem('sound_scene_off') &&\n        onCheckIsShowContentControlbarItem('sound_scene_on')) ||\n        (isShowIconRotate &&\n          onCheckIsShowContentControlbarItem('auto_rotate_off') &&\n          onCheckIsShowContentControlbarItem('auto_rotate_on')) ||\n        (isShowIconChangeScene &&\n          onCheckIsShowContentControlbarItem('auto_change_scene_off') &&\n          onCheckIsShowContentControlbarItem('auto_change_scene_on'))) && (\n        <Popover\n          placement=\"top\"\n          zIndex={99}\n          content={\n            <ControlbarPopoverWrapper>\n              <ul>\n                {isShowIconSoundScene &&\n                  onCheckIsShowContentControlbarItem('sound_scene_off') &&\n                  onCheckIsShowContentControlbarItem('sound_scene_on') && (\n                    <li>\n                      <button type=\"button\" onClick={onToggleSoundScene}>\n                        {!isSoundOnScene\n                          ? onRenderContentControlbarItem('sound_scene_on')\n                          : onRenderContentControlbarItem('sound_scene_off')}\n                        {LANGUAGES[languageProject]?.controlbarSoundScene}\n                      </button>\n                    </li>\n                  )}\n                {isShowIconRotate &&\n                  onCheckIsShowContentControlbarItem('auto_rotate_off') &&\n                  onCheckIsShowContentControlbarItem('auto_rotate_on') && (\n                    <li>\n                      <button type=\"button\" onClick={onToggleRotate}>\n                        {!isRotate\n                          ? onRenderContentControlbarItem('auto_rotate_on')\n                          : onRenderContentControlbarItem('auto_rotate_off')}\n                        {isRotate\n                          ? LANGUAGES[languageProject]?.controlbarStopRotate\n                          : LANGUAGES[languageProject]?.controlbarStartRotate}\n                      </button>\n                    </li>\n                  )}\n                {isShowIconChangeScene &&\n                  onCheckIsShowContentControlbarItem('auto_change_scene_off') &&\n                  onCheckIsShowContentControlbarItem(\n                    'auto_change_scene_on',\n                  ) && (\n                    <li>\n                      <button\n                        type=\"button\"\n                        onClick={onChangeAutoChangeScene.bind(\n                          this,\n                          !isChangeScene,\n                        )}\n                      >\n                        {!isChangeScene\n                          ? onRenderContentControlbarItem(\n                              'auto_change_scene_on',\n                            )\n                          : onRenderContentControlbarItem(\n                              'auto_change_scene_off',\n                            )}\n                        {isChangeScene\n                          ? LANGUAGES[languageProject]\n                              ?.controlbarStopAutoPlayScene\n                          : LANGUAGES[languageProject]\n                              ?.controlbarStartAutoPlayScene}\n                      </button>\n                    </li>\n                  )}\n              </ul>\n            </ControlbarPopoverWrapper>\n          }\n          overlayClassName=\"popoverControlbar\"\n        >\n          <div className=\"actPopGroup\">\n            <button type=\"button\" className=\"act\">\n              {onRenderContentControlbarItem('group_auto_play')}\n            </button>\n          </div>\n        </Popover>\n      )}\n\n      {onCheckIsShowContentControlbarItem('multi_language') &&\n        languagesProject?.length > 1 && (\n          <div className=\"actPopGroup\">\n            <Popover\n              placement=\"top\"\n              zIndex={99}\n              content={\n                <ControlbarPopoverWrapper>\n                  <ul>\n                    {languagesProject.map(item => (\n                      <li key={item.id}>\n                        <button\n                          type=\"button\"\n                          onClick={() => onChangeLanguageProject(item.id)}\n                        >\n                          <img src={item.flag?.src} />\n                          {item.name}\n                        </button>\n                      </li>\n                    ))}\n                  </ul>\n                </ControlbarPopoverWrapper>\n              }\n              overlayClassName=\"popoverControlbar\"\n            >\n              <button type=\"button\" className=\"act\">\n                {onRenderContentControlbarItem('multi_language')}\n              </button>\n            </Popover>\n          </div>\n        )}\n\n      {onCheckIsShowContentControlbarItem('view_mode') &&\n        (onCheckIsShowContentControlbarItem('view_mode_little_planet') ||\n          onCheckIsShowContentControlbarItem('view_mode_mirror') ||\n          onCheckIsShowContentControlbarItem('view_mode_normal')) && (\n          <div className=\"actPopGroup\">\n            <Popover\n              placement=\"top\"\n              zIndex={99}\n              content={\n                <ControlbarPopoverWrapper>\n                  <ul>\n                    {onCheckIsShowContentControlbarItem('view_mode_normal') && (\n                      <li>\n                        <button type=\"button\" onClick={() => onViewNormal()}>\n                          {onRenderContentControlbarItem('view_mode_normal')}\n                          Normal\n                        </button>\n                      </li>\n                    )}\n                    {onCheckIsShowContentControlbarItem('view_mode_mirror') && (\n                      <li>\n                        <button\n                          type=\"button\"\n                          onClick={() => onViewMirrorBall()}\n                        >\n                          {onRenderContentControlbarItem('view_mode_mirror')}\n                          Mirror Ball\n                        </button>\n                      </li>\n                    )}\n                    {onCheckIsShowContentControlbarItem(\n                      'view_mode_little_planet',\n                    ) && (\n                      <li>\n                        <button type=\"button\" onClick={() => onViewPlannet()}>\n                          {onRenderContentControlbarItem(\n                            'view_mode_little_planet',\n                          )}\n                          Little Planel\n                        </button>\n                      </li>\n                    )}\n                  </ul>\n                </ControlbarPopoverWrapper>\n              }\n              overlayClassName=\"popoverControlbar\"\n            >\n              <button type=\"button\" className=\"act\">\n                {onRenderContentControlbarItem('view_mode')}\n              </button>\n            </Popover>\n          </div>\n        )}\n\n      {isShowIconMultipleStaging &&\n        onCheckIsShowContentControlbarItem('multi_staging') && (\n          <Tooltip\n            title={\n              isActiveModeMultipleStaging\n                ? LANGUAGES[languageProject]\n                    ?.controlbarTurnOffModeMultipleStaging\n                : LANGUAGES[languageProject]\n                    ?.controlbarTurnOnModeMultipleStaging\n            }\n            placement=\"top\"\n          >\n            <button\n              type=\"button\"\n              className=\"act hide-on-mobile\"\n              onClick={() => onToggleModeMultipleStaging()}\n            >\n              {onRenderContentControlbarItem('multi_staging')}\n            </button>\n          </Tooltip>\n        )}\n\n      {onCheckIsShowContentControlbarItem('vr') && (\n        <Tooltip\n          title={LANGUAGES[languageProject]?.controlbarVRMode}\n          placement=\"top\"\n        >\n          <button type=\"button\" className=\"act\" onClick={onVR}>\n            {onRenderContentControlbarItem('vr')}\n          </button>\n        </Tooltip>\n      )}\n\n      {onCheckIsShowContentControlbarItem('screenshot_capture') && (\n        <Tooltip\n          title={LANGUAGES[languageProject]?.controlbarScreenshotCapture}\n          placement=\"top\"\n        >\n          <button\n            type=\"button\"\n            className=\"act\"\n            onClick={onTurnOnScreenshotCapture}\n          >\n            {onRenderContentControlbarItem('screenshot_capture')}\n          </button>\n        </Tooltip>\n      )}\n\n      {onCheckIsShowContentControlbarItem('fullscreen') && (\n        <Tooltip\n          title={LANGUAGES[languageProject]?.controlbarFullscreen}\n          placement=\"top\"\n        >\n          <button type=\"button\" className=\"act\" onClick={onFullscreen}>\n            {onRenderContentControlbarItem('fullscreen')}\n          </button>\n        </Tooltip>\n      )}\n\n      {onCheckIsShowContentControlbarItem('gyro') && (\n        <button type=\"button\" className=\"act\" onClick={onToggleGyro}>\n          {onRenderContentControlbarItem('gyro')}\n        </button>\n      )}\n    </div>\n  );\n});\n\nexport default ControlbarAction;\n"],"names":["useControlbarConfig","tourStats","useTourStats","sceneSelected","useSelector","selectSceneSelected","controlbarConfig","selectConfigControlbar","onCheckIsShowContentControlbarItem","useCallback","type","config","DEFAULT_VALUE_CONTROLBAR_CONFIG","isGyroscopeAvailable","isHide","media","subType","onRenderContentControlbarItem","icon","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","i","aria-hidden","className","concat","image","src","img","alt","useMemo","ControlbarAction","memo","param","LANGUAGES","krpanoRef","isServer","window","languages","_useTourEventState_","useTourEventState","isSoundOnScene","isActiveModeMultipleStaging","themeConfig","selectThemeConfigGlobal","languageProject","selectLanguageProject","configSoundProject","selectConfigSoundProject","useKrpano","onVR","onToggleGyro","onFullscreen","onToFirstScene","onViewNormal","onViewMirrorBall","onViewPlannet","onTurnOnScreenshotCapture","isChangeScene","isShowIconChangeScene","onChangeAutoChangeScene","isRotate","isShowIconRotate","onToggleRotate","isShowIconInfoPlace","onShowInfoPlace","isShowIconSoundScene","onToggleSoundScene","isShowIconSoundProject","onTurnOffSoundProject","onTurnOnSoundProject","isShowIconFloorplan","onToggleFloorplan","isShowIconDollhouse","onToggleDollhouseView","isShowIconMap","onToggleMap","isShowIconMultipleStaging","onToggleModeMultipleStaging","languagesProject","onChangeLanguageProject","jsxs","div","selected","Tooltip","title","controlbarFirstScene","placement","button","onClick","controlbarInfoTour","controlbarDollhouse","controlbarFloorplan","controlbarMap","on","controlbarTurnOffSoundProject","controlbarTurnOnSoundProject","Popover","zIndex","content","ControlbarPopoverWrapper","ul","li","controlbarSoundScene","controlbarStopRotate","controlbarStartRotate","bind","_this","controlbarStopAutoPlayScene","controlbarStartAutoPlayScene","overlayClassName","length","map","item","id","flag","name","controlbarTurnOffModeMultipleStaging","controlbarTurnOnModeMultipleStaging","controlbarVRMode","controlbarScreenshotCapture","controlbarFullscreen","__webpack_exports__"],"sourceRoot":""}