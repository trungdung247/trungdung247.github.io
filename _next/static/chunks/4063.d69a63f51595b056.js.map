{"version":3,"file":"static/chunks/4063.d69a63f51595b056.js","mappings":"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","sources":["webpack://_N_E/./containers/Home/hook/useControlbarConfig.tsx","webpack://_N_E/./containers/Home/themes/ThemeWall/Controlbar.Action.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectConfigControlbar, selectSceneSelected } from '../selectors';\nimport { I_ControlbarKey } from '../types';\nimport { useTourStats } from '../global/TourStats';\nimport { DEFAULT_VALUE_CONTROLBAR_CONFIG } from '../constants';\n\nexport const useControlbarConfig = () => {\n  const [tourStats] = useTourStats('stats');\n  const sceneSelected = useSelector(selectSceneSelected);\n  const controlbarConfig = useSelector(selectConfigControlbar);\n\n  const onCheckIsShowContentControlbarItem = useCallback(\n    (type: I_ControlbarKey) => {\n      if (type) {\n        const config =\n          controlbarConfig[type] || DEFAULT_VALUE_CONTROLBAR_CONFIG[type];\n\n        return type === 'gyro'\n          ? !!tourStats.isGyroscopeAvailable && !config?.isHide\n          : type === 'vr' || type === 'view_mode'\n          ? !config?.isHide && sceneSelected?.media?.subType !== 'flat'\n          : !config?.isHide;\n      }\n      return true;\n    },\n    [sceneSelected?.media, controlbarConfig, tourStats],\n  );\n\n  const onRenderContentControlbarItem = useCallback(\n    (type: I_ControlbarKey) => {\n      if (type) {\n        const config =\n          controlbarConfig[type] || DEFAULT_VALUE_CONTROLBAR_CONFIG[type];\n        if (config.type === 'icon' && config.icon)\n          return (\n            <i aria-hidden className={`controlbar-item__icon ${config.icon}`} />\n          );\n        if (config.type === 'image' && config.image?.src)\n          return (\n            <img\n              className=\"controlbar-item__img\"\n              src={config.image?.src}\n              alt=\"img\"\n            />\n          );\n      }\n      return '';\n    },\n    [controlbarConfig],\n  );\n\n  return useMemo(\n    () => ({\n      onRenderContentControlbarItem,\n      onCheckIsShowContentControlbarItem,\n    }),\n    [onRenderContentControlbarItem, onCheckIsShowContentControlbarItem],\n  );\n};\n","import { memo } from 'react';\nimport { Type_RefFuncKrpano } from '@components/Krpano/types';\nimport { useTourEventState } from '@containers/Home/global/TourStats';\nimport { useKrpano } from '@containers/Home/hook/useKrpano';\nimport {\n  selectConfigSoundProject,\n  selectLanguageProject,\n} from '@containers/Home/selectors';\nimport { Popover, Tooltip } from 'antd';\nimport { useSelector } from 'react-redux';\nimport { useControlbarConfig } from '@containers/Home/hook/useControlbarConfig';\nimport { ControlbarPopoverWrapper } from './styled';\nimport { isServer } from '@utils/helper';\n\ninterface Props {\n  krpanoRef: Type_RefFuncKrpano | null;\n}\n\nconst ControlbarAction = memo(({ krpanoRef }: Props) => {\n  const LANGUAGES = isServer ? {} : window.languages || {};\n\n  const [{ isSoundOnScene, isActiveModeMultipleStaging }] =\n    useTourEventState('state');\n  const { onCheckIsShowContentControlbarItem, onRenderContentControlbarItem } =\n    useControlbarConfig();\n\n  const languageProject = useSelector(selectLanguageProject);\n  const configSoundProject = useSelector(selectConfigSoundProject);\n\n  const {\n    //\n    onVR,\n    onToggleGyro,\n    onFullscreen,\n    onToFirstScene,\n    onViewNormal,\n    onViewMirrorBall,\n    onViewPlannet,\n    onTurnOnScreenshotCapture,\n    // NOTE: auto change scene\n    isChangeScene,\n    isShowIconChangeScene,\n    onChangeAutoChangeScene,\n    // NOTE: auto rotate\n    isRotate,\n    isShowIconRotate,\n    onToggleRotate,\n    // NOTE: sound scene\n    isShowIconSoundScene,\n    onToggleSoundScene,\n    // NOTE: sound project\n    isShowIconSoundProject,\n    onTurnOffSoundProject,\n    onTurnOnSoundProject,\n    // NOTE: multiple staging\n    isShowIconMultipleStaging,\n    onToggleModeMultipleStaging,\n    // NOTE: info place\n    isShowIconInfoPlace,\n    onShowInfoPlace,\n    // NOTE: info scene\n    isShowIconInfoScene,\n    onToggleInfoScene,\n    // NOTE: floorplan\n    isShowIconFloorplan,\n    onToggleFloorplan,\n    // NOTE: dollhouse\n    isShowIconDollhouse,\n    onToggleDollhouseView,\n    // NOTE: map\n    isShowIconMap,\n    onToggleMap,\n    // NOTE: multi-language\n    languagesProject,\n    onChangeLanguageProject,\n  } = useKrpano({ krpanoRef });\n\n  return (\n    <div className=\"controlBar\">\n      {onCheckIsShowContentControlbarItem('home') && (\n        <Tooltip\n          title={LANGUAGES[languageProject]?.controlbarFirstScene}\n          placement=\"left\"\n        >\n          <button\n            type=\"button\"\n            className=\"itemControlBtn\"\n            onClick={onToFirstScene}\n          >\n            {onRenderContentControlbarItem('home')}\n          </button>\n        </Tooltip>\n      )}\n      {isShowIconSoundProject &&\n        onCheckIsShowContentControlbarItem('sound_project_off') &&\n        onCheckIsShowContentControlbarItem('sound_project_on') && (\n          <Tooltip\n            title={\n              configSoundProject.on\n                ? LANGUAGES[languageProject]?.controlbarTurnOffSoundProject\n                : LANGUAGES[languageProject]?.controlbarTurnOnSoundProject\n            }\n            placement=\"left\"\n          >\n            <button\n              type=\"button\"\n              className=\"itemControlBtn\"\n              onClick={\n                configSoundProject.on\n                  ? onTurnOffSoundProject\n                  : onTurnOnSoundProject\n              }\n            >\n              {configSoundProject.on\n                ? onRenderContentControlbarItem('sound_project_off')\n                : onRenderContentControlbarItem('sound_project_on')}\n            </button>\n          </Tooltip>\n        )}\n      {((isShowIconSoundScene &&\n        onCheckIsShowContentControlbarItem('sound_scene_off') &&\n        onCheckIsShowContentControlbarItem('sound_scene_on')) ||\n        (isShowIconRotate &&\n          onCheckIsShowContentControlbarItem('auto_rotate_off') &&\n          onCheckIsShowContentControlbarItem('auto_rotate_on')) ||\n        (isShowIconChangeScene &&\n          onCheckIsShowContentControlbarItem('auto_change_scene_off') &&\n          onCheckIsShowContentControlbarItem('auto_change_scene_on'))) && (\n        <Popover\n          placement=\"left\"\n          zIndex={99}\n          content={\n            <ControlbarPopoverWrapper>\n              <ul>\n                {isShowIconSoundScene &&\n                  onCheckIsShowContentControlbarItem('sound_scene_off') &&\n                  onCheckIsShowContentControlbarItem('sound_scene_on') && (\n                    <li>\n                      <button type=\"button\" onClick={onToggleSoundScene}>\n                        {!isSoundOnScene\n                          ? onRenderContentControlbarItem('sound_scene_on')\n                          : onRenderContentControlbarItem('sound_scene_off')}\n                        {LANGUAGES[languageProject]?.controlbarSoundScene}\n                        {/* {isSoundOnScene ? 'Sound Scene' : 'Sound Scene'} */}\n                      </button>\n                    </li>\n                  )}\n                {isShowIconRotate &&\n                  onCheckIsShowContentControlbarItem('auto_rotate_off') &&\n                  onCheckIsShowContentControlbarItem('auto_rotate_on') && (\n                    <li>\n                      <button type=\"button\" onClick={onToggleRotate}>\n                        {!isRotate\n                          ? onRenderContentControlbarItem('auto_rotate_on')\n                          : onRenderContentControlbarItem('auto_rotate_off')}\n                        {isRotate\n                          ? LANGUAGES[languageProject]?.controlbarStopRotate\n                          : LANGUAGES[languageProject]?.controlbarStartRotate}\n                      </button>\n                    </li>\n                  )}\n                {isShowIconChangeScene &&\n                  onCheckIsShowContentControlbarItem('auto_change_scene_off') &&\n                  onCheckIsShowContentControlbarItem(\n                    'auto_change_scene_on',\n                  ) && (\n                    <li>\n                      <button\n                        type=\"button\"\n                        onClick={onChangeAutoChangeScene.bind(\n                          this,\n                          !isChangeScene,\n                        )}\n                      >\n                        {!isChangeScene\n                          ? onRenderContentControlbarItem(\n                              'auto_change_scene_on',\n                            )\n                          : onRenderContentControlbarItem(\n                              'auto_change_scene_off',\n                            )}\n                        {isChangeScene\n                          ? LANGUAGES[languageProject]\n                              ?.controlbarStopAutoPlayScene\n                          : LANGUAGES[languageProject]\n                              ?.controlbarStartAutoPlayScene}\n                      </button>\n                    </li>\n                  )}\n              </ul>\n            </ControlbarPopoverWrapper>\n          }\n          overlayClassName=\"popoverControlbar\"\n        >\n          <button type=\"button\" className=\"itemControlBtn\">\n            {onRenderContentControlbarItem('group_auto_play')}\n          </button>\n        </Popover>\n      )}\n\n      {onCheckIsShowContentControlbarItem('multi_language') &&\n        languagesProject?.length > 1 && (\n          <Popover\n            placement=\"left\"\n            zIndex={99}\n            content={\n              <ControlbarPopoverWrapper>\n                <ul>\n                  {languagesProject.map(item => (\n                    <li key={item.id}>\n                      <button\n                        type=\"button\"\n                        onClick={() => onChangeLanguageProject(item.id)}\n                      >\n                        <img src={item.flag?.src} />\n                        {item.name}\n                      </button>\n                    </li>\n                  ))}\n                </ul>\n              </ControlbarPopoverWrapper>\n            }\n            overlayClassName=\"popoverControlbar\"\n          >\n            <button type=\"button\" className=\"itemControlBtn\">\n              {onRenderContentControlbarItem('multi_language')}\n            </button>\n          </Popover>\n        )}\n\n      {onCheckIsShowContentControlbarItem('view_mode') &&\n        (onCheckIsShowContentControlbarItem('view_mode_little_planet') ||\n          onCheckIsShowContentControlbarItem('view_mode_mirror') ||\n          onCheckIsShowContentControlbarItem('view_mode_normal')) && (\n          <Popover\n            placement=\"left\"\n            zIndex={99}\n            content={\n              <ControlbarPopoverWrapper>\n                <ul>\n                  {onCheckIsShowContentControlbarItem('view_mode_normal') && (\n                    <li>\n                      <button type=\"button\" onClick={() => onViewNormal()}>\n                        {onRenderContentControlbarItem('view_mode_normal')}\n                        Normal\n                      </button>\n                    </li>\n                  )}\n                  {onCheckIsShowContentControlbarItem('view_mode_mirror') && (\n                    <li>\n                      <button type=\"button\" onClick={() => onViewMirrorBall()}>\n                        {onRenderContentControlbarItem('view_mode_mirror')}\n                        Mirror Ball\n                      </button>\n                    </li>\n                  )}\n                  {onCheckIsShowContentControlbarItem(\n                    'view_mode_little_planet',\n                  ) && (\n                    <li>\n                      <button type=\"button\" onClick={() => onViewPlannet()}>\n                        {onRenderContentControlbarItem(\n                          'view_mode_little_planet',\n                        )}\n                        Little Planel\n                      </button>\n                    </li>\n                  )}\n                </ul>\n              </ControlbarPopoverWrapper>\n            }\n            overlayClassName=\"popoverControlbar\"\n          >\n            <button type=\"button\" className=\"itemControlBtn\">\n              {onRenderContentControlbarItem('view_mode')}\n            </button>\n          </Popover>\n        )}\n\n      {isShowIconMultipleStaging &&\n        onCheckIsShowContentControlbarItem('multi_staging') && (\n          <Tooltip\n            title={\n              isActiveModeMultipleStaging\n                ? LANGUAGES[languageProject]\n                    ?.controlbarTurnOffModeMultipleStaging\n                : LANGUAGES[languageProject]\n                    ?.controlbarTurnOnModeMultipleStaging\n            }\n            placement=\"left\"\n          >\n            <button\n              type=\"button\"\n              className=\"itemControlBtn hide-on-mobile\"\n              onClick={() => onToggleModeMultipleStaging()}\n            >\n              {onRenderContentControlbarItem('multi_staging')}\n            </button>\n          </Tooltip>\n        )}\n\n      {onCheckIsShowContentControlbarItem('gyro') && (\n        <button\n          type=\"button\"\n          className=\"itemControlBtn \"\n          onClick={onToggleGyro}\n        >\n          {onRenderContentControlbarItem('gyro')}\n        </button>\n      )}\n\n      {isShowIconInfoPlace &&\n        onCheckIsShowContentControlbarItem('info_tour') && (\n          <Tooltip\n            title={LANGUAGES[languageProject]?.controlbarInfoTour}\n            placement=\"left\"\n          >\n            <button\n              type=\"button\"\n              className=\"itemControlBtn\"\n              onClick={onShowInfoPlace}\n            >\n              {onRenderContentControlbarItem('info_tour')}\n            </button>\n          </Tooltip>\n        )}\n\n      {isShowIconInfoScene &&\n        onCheckIsShowContentControlbarItem('info_scene') && (\n          <Tooltip\n            title={LANGUAGES[languageProject]?.controlbarInfoScene}\n            placement=\"left\"\n          >\n            <button\n              type=\"button\"\n              className=\"itemControlBtn\"\n              onClick={onToggleInfoScene.bind(this, undefined)}\n            >\n              {onRenderContentControlbarItem('info_scene')}\n            </button>\n          </Tooltip>\n        )}\n\n      {isShowIconDollhouse &&\n        onCheckIsShowContentControlbarItem('dollhouse') && (\n          <Tooltip\n            title={LANGUAGES[languageProject]?.controlbarDollhouse}\n            placement=\"left\"\n          >\n            <button\n              type=\"button\"\n              className=\"itemControlBtn\"\n              onClick={onToggleDollhouseView}\n            >\n              {onRenderContentControlbarItem('dollhouse')}\n            </button>\n          </Tooltip>\n        )}\n\n      {isShowIconFloorplan &&\n        onCheckIsShowContentControlbarItem('floorplan') && (\n          <Tooltip\n            title={LANGUAGES[languageProject]?.controlbarFloorplan}\n            placement=\"left\"\n          >\n            <button\n              type=\"button\"\n              className=\"itemControlBtn\"\n              onClick={onToggleFloorplan.bind(this, undefined)}\n            >\n              {onRenderContentControlbarItem('floorplan')}\n            </button>\n          </Tooltip>\n        )}\n\n      {isShowIconMap && onCheckIsShowContentControlbarItem('map') && (\n        <Tooltip\n          title={LANGUAGES[languageProject]?.controlbarMap}\n          placement=\"left\"\n        >\n          <button\n            type=\"button\"\n            className=\"itemControlBtn\"\n            onClick={onToggleMap.bind(this, undefined)}\n          >\n            {onRenderContentControlbarItem('map')}\n          </button>\n        </Tooltip>\n      )}\n\n      {onCheckIsShowContentControlbarItem('vr') && (\n        <Tooltip\n          title={LANGUAGES[languageProject]?.controlbarVRMode}\n          placement=\"left\"\n        >\n          <button type=\"button\" className=\"itemControlBtn\" onClick={onVR}>\n            {onRenderContentControlbarItem('vr')}\n          </button>\n        </Tooltip>\n      )}\n\n      {onCheckIsShowContentControlbarItem('screenshot_capture') && (\n        <Tooltip\n          title={LANGUAGES[languageProject]?.controlbarScreenshotCapture}\n          placement=\"left\"\n        >\n          <button\n            type=\"button\"\n            className=\"itemControlBtn\"\n            onClick={onTurnOnScreenshotCapture}\n          >\n            {onRenderContentControlbarItem('screenshot_capture')}\n          </button>\n        </Tooltip>\n      )}\n\n      {onCheckIsShowContentControlbarItem('fullscreen') && (\n        <Tooltip\n          title={LANGUAGES[languageProject]?.controlbarFullscreen}\n          placement=\"left\"\n        >\n          <button\n            type=\"button\"\n            className=\"itemControlBtn\"\n            onClick={onFullscreen}\n          >\n            {onRenderContentControlbarItem('fullscreen')}\n          </button>\n        </Tooltip>\n      )}\n    </div>\n  );\n});\n\nexport default ControlbarAction;\n"],"names":["useControlbarConfig","tourStats","useTourStats","sceneSelected","useSelector","selectSceneSelected","controlbarConfig","selectConfigControlbar","onCheckIsShowContentControlbarItem","useCallback","type","config","DEFAULT_VALUE_CONTROLBAR_CONFIG","isGyroscopeAvailable","isHide","media","subType","onRenderContentControlbarItem","icon","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","i","aria-hidden","className","concat","image","src","img","alt","useMemo","ControlbarAction","memo","param","LANGUAGES","krpanoRef","isServer","window","languages","_useTourEventState_","useTourEventState","isSoundOnScene","isActiveModeMultipleStaging","languageProject","selectLanguageProject","configSoundProject","selectConfigSoundProject","useKrpano","onVR","onToggleGyro","onFullscreen","onToFirstScene","onViewNormal","onViewMirrorBall","onViewPlannet","onTurnOnScreenshotCapture","isChangeScene","isShowIconChangeScene","onChangeAutoChangeScene","isRotate","isShowIconRotate","onToggleRotate","isShowIconSoundScene","onToggleSoundScene","isShowIconSoundProject","onTurnOffSoundProject","onTurnOnSoundProject","isShowIconMultipleStaging","onToggleModeMultipleStaging","isShowIconInfoPlace","onShowInfoPlace","isShowIconInfoScene","onToggleInfoScene","isShowIconFloorplan","onToggleFloorplan","isShowIconDollhouse","onToggleDollhouseView","isShowIconMap","onToggleMap","languagesProject","onChangeLanguageProject","jsxs","div","Tooltip","title","controlbarFirstScene","placement","button","onClick","on","controlbarTurnOffSoundProject","controlbarTurnOnSoundProject","Popover","zIndex","content","ControlbarPopoverWrapper","ul","li","controlbarSoundScene","controlbarStopRotate","controlbarStartRotate","bind","_this","controlbarStopAutoPlayScene","controlbarStartAutoPlayScene","overlayClassName","length","map","item","id","flag","name","controlbarTurnOffModeMultipleStaging","controlbarTurnOnModeMultipleStaging","controlbarInfoTour","controlbarInfoScene","undefined","controlbarDollhouse","controlbarFloorplan","controlbarMap","controlbarVRMode","controlbarScreenshotCapture","controlbarFullscreen","__webpack_exports__"],"sourceRoot":""}