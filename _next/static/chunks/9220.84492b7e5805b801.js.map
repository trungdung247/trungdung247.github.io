{"version":3,"file":"static/chunks/9220.84492b7e5805b801.js","mappings":"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","sources":["webpack://_N_E/./node_modules/rc-resize-observer/es/Collection.js","webpack://_N_E/./node_modules/resize-observer-polyfill/dist/ResizeObserver.es.js","webpack://_N_E/./node_modules/rc-resize-observer/es/utils/observerUtil.js","webpack://_N_E/./node_modules/rc-resize-observer/es/SingleObserver/DomWrapper.js","webpack://_N_E/./node_modules/rc-resize-observer/es/SingleObserver/index.js","webpack://_N_E/./node_modules/rc-resize-observer/es/index.js","webpack://_N_E/<anon>"],"sourcesContent":["import * as React from 'react';\nexport var CollectionContext = /*#__PURE__*/React.createContext(null);\n/**\n * Collect all the resize event from children ResizeObserver\n */\nexport function Collection(_ref) {\n  var children = _ref.children,\n    onBatchResize = _ref.onBatchResize;\n  var resizeIdRef = React.useRef(0);\n  var resizeInfosRef = React.useRef([]);\n  var onCollectionResize = React.useContext(CollectionContext);\n  var onResize = React.useCallback(function (size, element, data) {\n    resizeIdRef.current += 1;\n    var currentId = resizeIdRef.current;\n    resizeInfosRef.current.push({\n      size: size,\n      element: element,\n      data: data\n    });\n    Promise.resolve().then(function () {\n      if (currentId === resizeIdRef.current) {\n        onBatchResize === null || onBatchResize === void 0 || onBatchResize(resizeInfosRef.current);\n        resizeInfosRef.current = [];\n      }\n    });\n\n    // Continue bubbling if parent exist\n    onCollectionResize === null || onCollectionResize === void 0 || onCollectionResize(size, element, data);\n  }, [onBatchResize, onCollectionResize]);\n  return /*#__PURE__*/React.createElement(CollectionContext.Provider, {\n    value: onResize\n  }, children);\n}","/**\r\n * A collection of shims that provide minimal functionality of the ES6 collections.\r\n *\r\n * These implementations are not meant to be used outside of the ResizeObserver\r\n * modules as they cover only a limited range of use cases.\r\n */\r\n/* eslint-disable require-jsdoc, valid-jsdoc */\r\nvar MapShim = (function () {\r\n    if (typeof Map !== 'undefined') {\r\n        return Map;\r\n    }\r\n    /**\r\n     * Returns index in provided array that matches the specified key.\r\n     *\r\n     * @param {Array<Array>} arr\r\n     * @param {*} key\r\n     * @returns {number}\r\n     */\r\n    function getIndex(arr, key) {\r\n        var result = -1;\r\n        arr.some(function (entry, index) {\r\n            if (entry[0] === key) {\r\n                result = index;\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        return result;\r\n    }\r\n    return /** @class */ (function () {\r\n        function class_1() {\r\n            this.__entries__ = [];\r\n        }\r\n        Object.defineProperty(class_1.prototype, \"size\", {\r\n            /**\r\n             * @returns {boolean}\r\n             */\r\n            get: function () {\r\n                return this.__entries__.length;\r\n            },\r\n            enumerable: true,\r\n            configurable: true\r\n        });\r\n        /**\r\n         * @param {*} key\r\n         * @returns {*}\r\n         */\r\n        class_1.prototype.get = function (key) {\r\n            var index = getIndex(this.__entries__, key);\r\n            var entry = this.__entries__[index];\r\n            return entry && entry[1];\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @param {*} value\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.set = function (key, value) {\r\n            var index = getIndex(this.__entries__, key);\r\n            if (~index) {\r\n                this.__entries__[index][1] = value;\r\n            }\r\n            else {\r\n                this.__entries__.push([key, value]);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.delete = function (key) {\r\n            var entries = this.__entries__;\r\n            var index = getIndex(entries, key);\r\n            if (~index) {\r\n                entries.splice(index, 1);\r\n            }\r\n        };\r\n        /**\r\n         * @param {*} key\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.has = function (key) {\r\n            return !!~getIndex(this.__entries__, key);\r\n        };\r\n        /**\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.clear = function () {\r\n            this.__entries__.splice(0);\r\n        };\r\n        /**\r\n         * @param {Function} callback\r\n         * @param {*} [ctx=null]\r\n         * @returns {void}\r\n         */\r\n        class_1.prototype.forEach = function (callback, ctx) {\r\n            if (ctx === void 0) { ctx = null; }\r\n            for (var _i = 0, _a = this.__entries__; _i < _a.length; _i++) {\r\n                var entry = _a[_i];\r\n                callback.call(ctx, entry[1], entry[0]);\r\n            }\r\n        };\r\n        return class_1;\r\n    }());\r\n})();\n\n/**\r\n * Detects whether window and document objects are available in current environment.\r\n */\r\nvar isBrowser = typeof window !== 'undefined' && typeof document !== 'undefined' && window.document === document;\n\n// Returns global object of a current environment.\r\nvar global$1 = (function () {\r\n    if (typeof global !== 'undefined' && global.Math === Math) {\r\n        return global;\r\n    }\r\n    if (typeof self !== 'undefined' && self.Math === Math) {\r\n        return self;\r\n    }\r\n    if (typeof window !== 'undefined' && window.Math === Math) {\r\n        return window;\r\n    }\r\n    // eslint-disable-next-line no-new-func\r\n    return Function('return this')();\r\n})();\n\n/**\r\n * A shim for the requestAnimationFrame which falls back to the setTimeout if\r\n * first one is not supported.\r\n *\r\n * @returns {number} Requests' identifier.\r\n */\r\nvar requestAnimationFrame$1 = (function () {\r\n    if (typeof requestAnimationFrame === 'function') {\r\n        // It's required to use a bounded function because IE sometimes throws\r\n        // an \"Invalid calling object\" error if rAF is invoked without the global\r\n        // object on the left hand side.\r\n        return requestAnimationFrame.bind(global$1);\r\n    }\r\n    return function (callback) { return setTimeout(function () { return callback(Date.now()); }, 1000 / 60); };\r\n})();\n\n// Defines minimum timeout before adding a trailing call.\r\nvar trailingTimeout = 2;\r\n/**\r\n * Creates a wrapper function which ensures that provided callback will be\r\n * invoked only once during the specified delay period.\r\n *\r\n * @param {Function} callback - Function to be invoked after the delay period.\r\n * @param {number} delay - Delay after which to invoke callback.\r\n * @returns {Function}\r\n */\r\nfunction throttle (callback, delay) {\r\n    var leadingCall = false, trailingCall = false, lastCallTime = 0;\r\n    /**\r\n     * Invokes the original callback function and schedules new invocation if\r\n     * the \"proxy\" was called during current request.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function resolvePending() {\r\n        if (leadingCall) {\r\n            leadingCall = false;\r\n            callback();\r\n        }\r\n        if (trailingCall) {\r\n            proxy();\r\n        }\r\n    }\r\n    /**\r\n     * Callback invoked after the specified delay. It will further postpone\r\n     * invocation of the original function delegating it to the\r\n     * requestAnimationFrame.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function timeoutCallback() {\r\n        requestAnimationFrame$1(resolvePending);\r\n    }\r\n    /**\r\n     * Schedules invocation of the original function.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    function proxy() {\r\n        var timeStamp = Date.now();\r\n        if (leadingCall) {\r\n            // Reject immediately following calls.\r\n            if (timeStamp - lastCallTime < trailingTimeout) {\r\n                return;\r\n            }\r\n            // Schedule new call to be in invoked when the pending one is resolved.\r\n            // This is important for \"transitions\" which never actually start\r\n            // immediately so there is a chance that we might miss one if change\r\n            // happens amids the pending invocation.\r\n            trailingCall = true;\r\n        }\r\n        else {\r\n            leadingCall = true;\r\n            trailingCall = false;\r\n            setTimeout(timeoutCallback, delay);\r\n        }\r\n        lastCallTime = timeStamp;\r\n    }\r\n    return proxy;\r\n}\n\n// Minimum delay before invoking the update of observers.\r\nvar REFRESH_DELAY = 20;\r\n// A list of substrings of CSS properties used to find transition events that\r\n// might affect dimensions of observed elements.\r\nvar transitionKeys = ['top', 'right', 'bottom', 'left', 'width', 'height', 'size', 'weight'];\r\n// Check if MutationObserver is available.\r\nvar mutationObserverSupported = typeof MutationObserver !== 'undefined';\r\n/**\r\n * Singleton controller class which handles updates of ResizeObserver instances.\r\n */\r\nvar ResizeObserverController = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserverController.\r\n     *\r\n     * @private\r\n     */\r\n    function ResizeObserverController() {\r\n        /**\r\n         * Indicates whether DOM listeners have been added.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.connected_ = false;\r\n        /**\r\n         * Tells that controller has subscribed for Mutation Events.\r\n         *\r\n         * @private {boolean}\r\n         */\r\n        this.mutationEventsAdded_ = false;\r\n        /**\r\n         * Keeps reference to the instance of MutationObserver.\r\n         *\r\n         * @private {MutationObserver}\r\n         */\r\n        this.mutationsObserver_ = null;\r\n        /**\r\n         * A list of connected observers.\r\n         *\r\n         * @private {Array<ResizeObserverSPI>}\r\n         */\r\n        this.observers_ = [];\r\n        this.onTransitionEnd_ = this.onTransitionEnd_.bind(this);\r\n        this.refresh = throttle(this.refresh.bind(this), REFRESH_DELAY);\r\n    }\r\n    /**\r\n     * Adds observer to observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be added.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.addObserver = function (observer) {\r\n        if (!~this.observers_.indexOf(observer)) {\r\n            this.observers_.push(observer);\r\n        }\r\n        // Add listeners if they haven't been added yet.\r\n        if (!this.connected_) {\r\n            this.connect_();\r\n        }\r\n    };\r\n    /**\r\n     * Removes observer from observers list.\r\n     *\r\n     * @param {ResizeObserverSPI} observer - Observer to be removed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.removeObserver = function (observer) {\r\n        var observers = this.observers_;\r\n        var index = observers.indexOf(observer);\r\n        // Remove observer if it's present in registry.\r\n        if (~index) {\r\n            observers.splice(index, 1);\r\n        }\r\n        // Remove listeners if controller has no connected observers.\r\n        if (!observers.length && this.connected_) {\r\n            this.disconnect_();\r\n        }\r\n    };\r\n    /**\r\n     * Invokes the update of observers. It will continue running updates insofar\r\n     * it detects changes.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.refresh = function () {\r\n        var changesDetected = this.updateObservers_();\r\n        // Continue running updates if changes have been detected as there might\r\n        // be future ones caused by CSS transitions.\r\n        if (changesDetected) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Updates every observer from observers list and notifies them of queued\r\n     * entries.\r\n     *\r\n     * @private\r\n     * @returns {boolean} Returns \"true\" if any observer has detected changes in\r\n     *      dimensions of it's elements.\r\n     */\r\n    ResizeObserverController.prototype.updateObservers_ = function () {\r\n        // Collect observers that have active observations.\r\n        var activeObservers = this.observers_.filter(function (observer) {\r\n            return observer.gatherActive(), observer.hasActive();\r\n        });\r\n        // Deliver notifications in a separate cycle in order to avoid any\r\n        // collisions between observers, e.g. when multiple instances of\r\n        // ResizeObserver are tracking the same element and the callback of one\r\n        // of them changes content dimensions of the observed target. Sometimes\r\n        // this may result in notifications being blocked for the rest of observers.\r\n        activeObservers.forEach(function (observer) { return observer.broadcastActive(); });\r\n        return activeObservers.length > 0;\r\n    };\r\n    /**\r\n     * Initializes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.connect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already added.\r\n        if (!isBrowser || this.connected_) {\r\n            return;\r\n        }\r\n        // Subscription to the \"Transitionend\" event is used as a workaround for\r\n        // delayed transitions. This way it's possible to capture at least the\r\n        // final state of an element.\r\n        document.addEventListener('transitionend', this.onTransitionEnd_);\r\n        window.addEventListener('resize', this.refresh);\r\n        if (mutationObserverSupported) {\r\n            this.mutationsObserver_ = new MutationObserver(this.refresh);\r\n            this.mutationsObserver_.observe(document, {\r\n                attributes: true,\r\n                childList: true,\r\n                characterData: true,\r\n                subtree: true\r\n            });\r\n        }\r\n        else {\r\n            document.addEventListener('DOMSubtreeModified', this.refresh);\r\n            this.mutationEventsAdded_ = true;\r\n        }\r\n        this.connected_ = true;\r\n    };\r\n    /**\r\n     * Removes DOM listeners.\r\n     *\r\n     * @private\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.disconnect_ = function () {\r\n        // Do nothing if running in a non-browser environment or if listeners\r\n        // have been already removed.\r\n        if (!isBrowser || !this.connected_) {\r\n            return;\r\n        }\r\n        document.removeEventListener('transitionend', this.onTransitionEnd_);\r\n        window.removeEventListener('resize', this.refresh);\r\n        if (this.mutationsObserver_) {\r\n            this.mutationsObserver_.disconnect();\r\n        }\r\n        if (this.mutationEventsAdded_) {\r\n            document.removeEventListener('DOMSubtreeModified', this.refresh);\r\n        }\r\n        this.mutationsObserver_ = null;\r\n        this.mutationEventsAdded_ = false;\r\n        this.connected_ = false;\r\n    };\r\n    /**\r\n     * \"Transitionend\" event handler.\r\n     *\r\n     * @private\r\n     * @param {TransitionEvent} event\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverController.prototype.onTransitionEnd_ = function (_a) {\r\n        var _b = _a.propertyName, propertyName = _b === void 0 ? '' : _b;\r\n        // Detect whether transition may affect dimensions of an element.\r\n        var isReflowProperty = transitionKeys.some(function (key) {\r\n            return !!~propertyName.indexOf(key);\r\n        });\r\n        if (isReflowProperty) {\r\n            this.refresh();\r\n        }\r\n    };\r\n    /**\r\n     * Returns instance of the ResizeObserverController.\r\n     *\r\n     * @returns {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.getInstance = function () {\r\n        if (!this.instance_) {\r\n            this.instance_ = new ResizeObserverController();\r\n        }\r\n        return this.instance_;\r\n    };\r\n    /**\r\n     * Holds reference to the controller's instance.\r\n     *\r\n     * @private {ResizeObserverController}\r\n     */\r\n    ResizeObserverController.instance_ = null;\r\n    return ResizeObserverController;\r\n}());\n\n/**\r\n * Defines non-writable/enumerable properties of the provided target object.\r\n *\r\n * @param {Object} target - Object for which to define properties.\r\n * @param {Object} props - Properties to be defined.\r\n * @returns {Object} Target object.\r\n */\r\nvar defineConfigurable = (function (target, props) {\r\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\r\n        var key = _a[_i];\r\n        Object.defineProperty(target, key, {\r\n            value: props[key],\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: true\r\n        });\r\n    }\r\n    return target;\r\n});\n\n/**\r\n * Returns the global object associated with provided element.\r\n *\r\n * @param {Object} target\r\n * @returns {Object}\r\n */\r\nvar getWindowOf = (function (target) {\r\n    // Assume that the element is an instance of Node, which means that it\r\n    // has the \"ownerDocument\" property from which we can retrieve a\r\n    // corresponding global object.\r\n    var ownerGlobal = target && target.ownerDocument && target.ownerDocument.defaultView;\r\n    // Return the local global object if it's not possible extract one from\r\n    // provided element.\r\n    return ownerGlobal || global$1;\r\n});\n\n// Placeholder of an empty content rectangle.\r\nvar emptyRect = createRectInit(0, 0, 0, 0);\r\n/**\r\n * Converts provided string to a number.\r\n *\r\n * @param {number|string} value\r\n * @returns {number}\r\n */\r\nfunction toFloat(value) {\r\n    return parseFloat(value) || 0;\r\n}\r\n/**\r\n * Extracts borders size from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @param {...string} positions - Borders positions (top, right, ...)\r\n * @returns {number}\r\n */\r\nfunction getBordersSize(styles) {\r\n    var positions = [];\r\n    for (var _i = 1; _i < arguments.length; _i++) {\r\n        positions[_i - 1] = arguments[_i];\r\n    }\r\n    return positions.reduce(function (size, position) {\r\n        var value = styles['border-' + position + '-width'];\r\n        return size + toFloat(value);\r\n    }, 0);\r\n}\r\n/**\r\n * Extracts paddings sizes from provided styles.\r\n *\r\n * @param {CSSStyleDeclaration} styles\r\n * @returns {Object} Paddings box.\r\n */\r\nfunction getPaddings(styles) {\r\n    var positions = ['top', 'right', 'bottom', 'left'];\r\n    var paddings = {};\r\n    for (var _i = 0, positions_1 = positions; _i < positions_1.length; _i++) {\r\n        var position = positions_1[_i];\r\n        var value = styles['padding-' + position];\r\n        paddings[position] = toFloat(value);\r\n    }\r\n    return paddings;\r\n}\r\n/**\r\n * Calculates content rectangle of provided SVG element.\r\n *\r\n * @param {SVGGraphicsElement} target - Element content rectangle of which needs\r\n *      to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getSVGContentRect(target) {\r\n    var bbox = target.getBBox();\r\n    return createRectInit(0, 0, bbox.width, bbox.height);\r\n}\r\n/**\r\n * Calculates content rectangle of provided HTMLElement.\r\n *\r\n * @param {HTMLElement} target - Element for which to calculate the content rectangle.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getHTMLElementContentRect(target) {\r\n    // Client width & height properties can't be\r\n    // used exclusively as they provide rounded values.\r\n    var clientWidth = target.clientWidth, clientHeight = target.clientHeight;\r\n    // By this condition we can catch all non-replaced inline, hidden and\r\n    // detached elements. Though elements with width & height properties less\r\n    // than 0.5 will be discarded as well.\r\n    //\r\n    // Without it we would need to implement separate methods for each of\r\n    // those cases and it's not possible to perform a precise and performance\r\n    // effective test for hidden elements. E.g. even jQuery's ':visible' filter\r\n    // gives wrong results for elements with width & height less than 0.5.\r\n    if (!clientWidth && !clientHeight) {\r\n        return emptyRect;\r\n    }\r\n    var styles = getWindowOf(target).getComputedStyle(target);\r\n    var paddings = getPaddings(styles);\r\n    var horizPad = paddings.left + paddings.right;\r\n    var vertPad = paddings.top + paddings.bottom;\r\n    // Computed styles of width & height are being used because they are the\r\n    // only dimensions available to JS that contain non-rounded values. It could\r\n    // be possible to utilize the getBoundingClientRect if only it's data wasn't\r\n    // affected by CSS transformations let alone paddings, borders and scroll bars.\r\n    var width = toFloat(styles.width), height = toFloat(styles.height);\r\n    // Width & height include paddings and borders when the 'border-box' box\r\n    // model is applied (except for IE).\r\n    if (styles.boxSizing === 'border-box') {\r\n        // Following conditions are required to handle Internet Explorer which\r\n        // doesn't include paddings and borders to computed CSS dimensions.\r\n        //\r\n        // We can say that if CSS dimensions + paddings are equal to the \"client\"\r\n        // properties then it's either IE, and thus we don't need to subtract\r\n        // anything, or an element merely doesn't have paddings/borders styles.\r\n        if (Math.round(width + horizPad) !== clientWidth) {\r\n            width -= getBordersSize(styles, 'left', 'right') + horizPad;\r\n        }\r\n        if (Math.round(height + vertPad) !== clientHeight) {\r\n            height -= getBordersSize(styles, 'top', 'bottom') + vertPad;\r\n        }\r\n    }\r\n    // Following steps can't be applied to the document's root element as its\r\n    // client[Width/Height] properties represent viewport area of the window.\r\n    // Besides, it's as well not necessary as the <html> itself neither has\r\n    // rendered scroll bars nor it can be clipped.\r\n    if (!isDocumentElement(target)) {\r\n        // In some browsers (only in Firefox, actually) CSS width & height\r\n        // include scroll bars size which can be removed at this step as scroll\r\n        // bars are the only difference between rounded dimensions + paddings\r\n        // and \"client\" properties, though that is not always true in Chrome.\r\n        var vertScrollbar = Math.round(width + horizPad) - clientWidth;\r\n        var horizScrollbar = Math.round(height + vertPad) - clientHeight;\r\n        // Chrome has a rather weird rounding of \"client\" properties.\r\n        // E.g. for an element with content width of 314.2px it sometimes gives\r\n        // the client width of 315px and for the width of 314.7px it may give\r\n        // 314px. And it doesn't happen all the time. So just ignore this delta\r\n        // as a non-relevant.\r\n        if (Math.abs(vertScrollbar) !== 1) {\r\n            width -= vertScrollbar;\r\n        }\r\n        if (Math.abs(horizScrollbar) !== 1) {\r\n            height -= horizScrollbar;\r\n        }\r\n    }\r\n    return createRectInit(paddings.left, paddings.top, width, height);\r\n}\r\n/**\r\n * Checks whether provided element is an instance of the SVGGraphicsElement.\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nvar isSVGGraphicsElement = (function () {\r\n    // Some browsers, namely IE and Edge, don't have the SVGGraphicsElement\r\n    // interface.\r\n    if (typeof SVGGraphicsElement !== 'undefined') {\r\n        return function (target) { return target instanceof getWindowOf(target).SVGGraphicsElement; };\r\n    }\r\n    // If it's so, then check that element is at least an instance of the\r\n    // SVGElement and that it has the \"getBBox\" method.\r\n    // eslint-disable-next-line no-extra-parens\r\n    return function (target) { return (target instanceof getWindowOf(target).SVGElement &&\r\n        typeof target.getBBox === 'function'); };\r\n})();\r\n/**\r\n * Checks whether provided element is a document element (<html>).\r\n *\r\n * @param {Element} target - Element to be checked.\r\n * @returns {boolean}\r\n */\r\nfunction isDocumentElement(target) {\r\n    return target === getWindowOf(target).document.documentElement;\r\n}\r\n/**\r\n * Calculates an appropriate content rectangle for provided html or svg element.\r\n *\r\n * @param {Element} target - Element content rectangle of which needs to be calculated.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction getContentRect(target) {\r\n    if (!isBrowser) {\r\n        return emptyRect;\r\n    }\r\n    if (isSVGGraphicsElement(target)) {\r\n        return getSVGContentRect(target);\r\n    }\r\n    return getHTMLElementContentRect(target);\r\n}\r\n/**\r\n * Creates rectangle with an interface of the DOMRectReadOnly.\r\n * Spec: https://drafts.fxtf.org/geometry/#domrectreadonly\r\n *\r\n * @param {DOMRectInit} rectInit - Object with rectangle's x/y coordinates and dimensions.\r\n * @returns {DOMRectReadOnly}\r\n */\r\nfunction createReadOnlyRect(_a) {\r\n    var x = _a.x, y = _a.y, width = _a.width, height = _a.height;\r\n    // If DOMRectReadOnly is available use it as a prototype for the rectangle.\r\n    var Constr = typeof DOMRectReadOnly !== 'undefined' ? DOMRectReadOnly : Object;\r\n    var rect = Object.create(Constr.prototype);\r\n    // Rectangle's properties are not writable and non-enumerable.\r\n    defineConfigurable(rect, {\r\n        x: x, y: y, width: width, height: height,\r\n        top: y,\r\n        right: x + width,\r\n        bottom: height + y,\r\n        left: x\r\n    });\r\n    return rect;\r\n}\r\n/**\r\n * Creates DOMRectInit object based on the provided dimensions and the x/y coordinates.\r\n * Spec: https://drafts.fxtf.org/geometry/#dictdef-domrectinit\r\n *\r\n * @param {number} x - X coordinate.\r\n * @param {number} y - Y coordinate.\r\n * @param {number} width - Rectangle's width.\r\n * @param {number} height - Rectangle's height.\r\n * @returns {DOMRectInit}\r\n */\r\nfunction createRectInit(x, y, width, height) {\r\n    return { x: x, y: y, width: width, height: height };\r\n}\n\n/**\r\n * Class that is responsible for computations of the content rectangle of\r\n * provided DOM element and for keeping track of it's changes.\r\n */\r\nvar ResizeObservation = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObservation.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     */\r\n    function ResizeObservation(target) {\r\n        /**\r\n         * Broadcasted width of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastWidth = 0;\r\n        /**\r\n         * Broadcasted height of content rectangle.\r\n         *\r\n         * @type {number}\r\n         */\r\n        this.broadcastHeight = 0;\r\n        /**\r\n         * Reference to the last observed content rectangle.\r\n         *\r\n         * @private {DOMRectInit}\r\n         */\r\n        this.contentRect_ = createRectInit(0, 0, 0, 0);\r\n        this.target = target;\r\n    }\r\n    /**\r\n     * Updates content rectangle and tells whether it's width or height properties\r\n     * have changed since the last broadcast.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObservation.prototype.isActive = function () {\r\n        var rect = getContentRect(this.target);\r\n        this.contentRect_ = rect;\r\n        return (rect.width !== this.broadcastWidth ||\r\n            rect.height !== this.broadcastHeight);\r\n    };\r\n    /**\r\n     * Updates 'broadcastWidth' and 'broadcastHeight' properties with a data\r\n     * from the corresponding properties of the last observed content rectangle.\r\n     *\r\n     * @returns {DOMRectInit} Last observed content rectangle.\r\n     */\r\n    ResizeObservation.prototype.broadcastRect = function () {\r\n        var rect = this.contentRect_;\r\n        this.broadcastWidth = rect.width;\r\n        this.broadcastHeight = rect.height;\r\n        return rect;\r\n    };\r\n    return ResizeObservation;\r\n}());\n\nvar ResizeObserverEntry = /** @class */ (function () {\r\n    /**\r\n     * Creates an instance of ResizeObserverEntry.\r\n     *\r\n     * @param {Element} target - Element that is being observed.\r\n     * @param {DOMRectInit} rectInit - Data of the element's content rectangle.\r\n     */\r\n    function ResizeObserverEntry(target, rectInit) {\r\n        var contentRect = createReadOnlyRect(rectInit);\r\n        // According to the specification following properties are not writable\r\n        // and are also not enumerable in the native implementation.\r\n        //\r\n        // Property accessors are not being used as they'd require to define a\r\n        // private WeakMap storage which may cause memory leaks in browsers that\r\n        // don't support this type of collections.\r\n        defineConfigurable(this, { target: target, contentRect: contentRect });\r\n    }\r\n    return ResizeObserverEntry;\r\n}());\n\nvar ResizeObserverSPI = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback function that is invoked\r\n     *      when one of the observed elements changes it's content dimensions.\r\n     * @param {ResizeObserverController} controller - Controller instance which\r\n     *      is responsible for the updates of observer.\r\n     * @param {ResizeObserver} callbackCtx - Reference to the public\r\n     *      ResizeObserver instance which will be passed to callback function.\r\n     */\r\n    function ResizeObserverSPI(callback, controller, callbackCtx) {\r\n        /**\r\n         * Collection of resize observations that have detected changes in dimensions\r\n         * of elements.\r\n         *\r\n         * @private {Array<ResizeObservation>}\r\n         */\r\n        this.activeObservations_ = [];\r\n        /**\r\n         * Registry of the ResizeObservation instances.\r\n         *\r\n         * @private {Map<Element, ResizeObservation>}\r\n         */\r\n        this.observations_ = new MapShim();\r\n        if (typeof callback !== 'function') {\r\n            throw new TypeError('The callback provided as parameter 1 is not a function.');\r\n        }\r\n        this.callback_ = callback;\r\n        this.controller_ = controller;\r\n        this.callbackCtx_ = callbackCtx;\r\n    }\r\n    /**\r\n     * Starts observing provided element.\r\n     *\r\n     * @param {Element} target - Element to be observed.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.observe = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is already being observed.\r\n        if (observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.set(target, new ResizeObservation(target));\r\n        this.controller_.addObserver(this);\r\n        // Force the update of observations.\r\n        this.controller_.refresh();\r\n    };\r\n    /**\r\n     * Stops observing provided element.\r\n     *\r\n     * @param {Element} target - Element to stop observing.\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.unobserve = function (target) {\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        // Do nothing if current environment doesn't have the Element interface.\r\n        if (typeof Element === 'undefined' || !(Element instanceof Object)) {\r\n            return;\r\n        }\r\n        if (!(target instanceof getWindowOf(target).Element)) {\r\n            throw new TypeError('parameter 1 is not of type \"Element\".');\r\n        }\r\n        var observations = this.observations_;\r\n        // Do nothing if element is not being observed.\r\n        if (!observations.has(target)) {\r\n            return;\r\n        }\r\n        observations.delete(target);\r\n        if (!observations.size) {\r\n            this.controller_.removeObserver(this);\r\n        }\r\n    };\r\n    /**\r\n     * Stops observing all elements.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.disconnect = function () {\r\n        this.clearActive();\r\n        this.observations_.clear();\r\n        this.controller_.removeObserver(this);\r\n    };\r\n    /**\r\n     * Collects observation instances the associated element of which has changed\r\n     * it's content rectangle.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.gatherActive = function () {\r\n        var _this = this;\r\n        this.clearActive();\r\n        this.observations_.forEach(function (observation) {\r\n            if (observation.isActive()) {\r\n                _this.activeObservations_.push(observation);\r\n            }\r\n        });\r\n    };\r\n    /**\r\n     * Invokes initial callback function with a list of ResizeObserverEntry\r\n     * instances collected from active resize observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.broadcastActive = function () {\r\n        // Do nothing if observer doesn't have active observations.\r\n        if (!this.hasActive()) {\r\n            return;\r\n        }\r\n        var ctx = this.callbackCtx_;\r\n        // Create ResizeObserverEntry instance for every active observation.\r\n        var entries = this.activeObservations_.map(function (observation) {\r\n            return new ResizeObserverEntry(observation.target, observation.broadcastRect());\r\n        });\r\n        this.callback_.call(ctx, entries, ctx);\r\n        this.clearActive();\r\n    };\r\n    /**\r\n     * Clears the collection of active observations.\r\n     *\r\n     * @returns {void}\r\n     */\r\n    ResizeObserverSPI.prototype.clearActive = function () {\r\n        this.activeObservations_.splice(0);\r\n    };\r\n    /**\r\n     * Tells whether observer has active observations.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    ResizeObserverSPI.prototype.hasActive = function () {\r\n        return this.activeObservations_.length > 0;\r\n    };\r\n    return ResizeObserverSPI;\r\n}());\n\n// Registry of internal observers. If WeakMap is not available use current shim\r\n// for the Map collection as it has all required methods and because WeakMap\r\n// can't be fully polyfilled anyway.\r\nvar observers = typeof WeakMap !== 'undefined' ? new WeakMap() : new MapShim();\r\n/**\r\n * ResizeObserver API. Encapsulates the ResizeObserver SPI implementation\r\n * exposing only those methods and properties that are defined in the spec.\r\n */\r\nvar ResizeObserver = /** @class */ (function () {\r\n    /**\r\n     * Creates a new instance of ResizeObserver.\r\n     *\r\n     * @param {ResizeObserverCallback} callback - Callback that is invoked when\r\n     *      dimensions of the observed elements change.\r\n     */\r\n    function ResizeObserver(callback) {\r\n        if (!(this instanceof ResizeObserver)) {\r\n            throw new TypeError('Cannot call a class as a function.');\r\n        }\r\n        if (!arguments.length) {\r\n            throw new TypeError('1 argument required, but only 0 present.');\r\n        }\r\n        var controller = ResizeObserverController.getInstance();\r\n        var observer = new ResizeObserverSPI(callback, controller, this);\r\n        observers.set(this, observer);\r\n    }\r\n    return ResizeObserver;\r\n}());\r\n// Expose public methods of ResizeObserver.\r\n[\r\n    'observe',\r\n    'unobserve',\r\n    'disconnect'\r\n].forEach(function (method) {\r\n    ResizeObserver.prototype[method] = function () {\r\n        var _a;\r\n        return (_a = observers.get(this))[method].apply(_a, arguments);\r\n    };\r\n});\n\nvar index = (function () {\r\n    // Export existing implementation if available.\r\n    if (typeof global$1.ResizeObserver !== 'undefined') {\r\n        return global$1.ResizeObserver;\r\n    }\r\n    return ResizeObserver;\r\n})();\n\nexport default index;\n","import ResizeObserver from 'resize-observer-polyfill';\n// =============================== Const ===============================\nvar elementListeners = new Map();\nfunction onResize(entities) {\n  entities.forEach(function (entity) {\n    var _elementListeners$get;\n    var target = entity.target;\n    (_elementListeners$get = elementListeners.get(target)) === null || _elementListeners$get === void 0 || _elementListeners$get.forEach(function (listener) {\n      return listener(target);\n    });\n  });\n}\n\n// Note: ResizeObserver polyfill not support option to measure border-box resize\nvar resizeObserver = new ResizeObserver(onResize);\n\n// Dev env only\nexport var _el = process.env.NODE_ENV !== 'production' ? elementListeners : null; // eslint-disable-line\nexport var _rs = process.env.NODE_ENV !== 'production' ? onResize : null; // eslint-disable-line\n\n// ============================== Observe ==============================\nexport function observe(element, callback) {\n  if (!elementListeners.has(element)) {\n    elementListeners.set(element, new Set());\n    resizeObserver.observe(element);\n  }\n  elementListeners.get(element).add(callback);\n}\nexport function unobserve(element, callback) {\n  if (elementListeners.has(element)) {\n    elementListeners.get(element).delete(callback);\n    if (!elementListeners.get(element).size) {\n      resizeObserver.unobserve(element);\n      elementListeners.delete(element);\n    }\n  }\n}","import _classCallCheck from \"@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"@babel/runtime/helpers/esm/createSuper\";\nimport * as React from 'react';\n/**\n * Fallback to findDOMNode if origin ref do not provide any dom element\n */\nvar DomWrapper = /*#__PURE__*/function (_React$Component) {\n  _inherits(DomWrapper, _React$Component);\n  var _super = _createSuper(DomWrapper);\n  function DomWrapper() {\n    _classCallCheck(this, DomWrapper);\n    return _super.apply(this, arguments);\n  }\n  _createClass(DomWrapper, [{\n    key: \"render\",\n    value: function render() {\n      return this.props.children;\n    }\n  }]);\n  return DomWrapper;\n}(React.Component);\nexport { DomWrapper as default };","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nimport findDOMNode from \"rc-util/es/Dom/findDOMNode\";\nimport { supportRef, useComposeRef } from \"rc-util/es/ref\";\nimport * as React from 'react';\nimport { CollectionContext } from \"../Collection\";\nimport { observe, unobserve } from \"../utils/observerUtil\";\nimport DomWrapper from \"./DomWrapper\";\nfunction SingleObserver(props, ref) {\n  var children = props.children,\n    disabled = props.disabled;\n  var elementRef = React.useRef(null);\n  var wrapperRef = React.useRef(null);\n  var onCollectionResize = React.useContext(CollectionContext);\n\n  // =========================== Children ===========================\n  var isRenderProps = typeof children === 'function';\n  var mergedChildren = isRenderProps ? children(elementRef) : children;\n\n  // ============================= Size =============================\n  var sizeRef = React.useRef({\n    width: -1,\n    height: -1,\n    offsetWidth: -1,\n    offsetHeight: -1\n  });\n\n  // ============================= Ref ==============================\n  var canRef = !isRenderProps && /*#__PURE__*/React.isValidElement(mergedChildren) && supportRef(mergedChildren);\n  var originRef = canRef ? mergedChildren.ref : null;\n  var mergedRef = useComposeRef(originRef, elementRef);\n  var getDom = function getDom() {\n    var _elementRef$current;\n    return findDOMNode(elementRef.current) || (\n    // Support `nativeElement` format\n    elementRef.current && _typeof(elementRef.current) === 'object' ? findDOMNode((_elementRef$current = elementRef.current) === null || _elementRef$current === void 0 ? void 0 : _elementRef$current.nativeElement) : null) || findDOMNode(wrapperRef.current);\n  };\n  React.useImperativeHandle(ref, function () {\n    return getDom();\n  });\n\n  // =========================== Observe ============================\n  var propsRef = React.useRef(props);\n  propsRef.current = props;\n\n  // Handler\n  var onInternalResize = React.useCallback(function (target) {\n    var _propsRef$current = propsRef.current,\n      onResize = _propsRef$current.onResize,\n      data = _propsRef$current.data;\n    var _target$getBoundingCl = target.getBoundingClientRect(),\n      width = _target$getBoundingCl.width,\n      height = _target$getBoundingCl.height;\n    var offsetWidth = target.offsetWidth,\n      offsetHeight = target.offsetHeight;\n\n    /**\n     * Resize observer trigger when content size changed.\n     * In most case we just care about element size,\n     * let's use `boundary` instead of `contentRect` here to avoid shaking.\n     */\n    var fixedWidth = Math.floor(width);\n    var fixedHeight = Math.floor(height);\n    if (sizeRef.current.width !== fixedWidth || sizeRef.current.height !== fixedHeight || sizeRef.current.offsetWidth !== offsetWidth || sizeRef.current.offsetHeight !== offsetHeight) {\n      var size = {\n        width: fixedWidth,\n        height: fixedHeight,\n        offsetWidth: offsetWidth,\n        offsetHeight: offsetHeight\n      };\n      sizeRef.current = size;\n\n      // IE is strange, right?\n      var mergedOffsetWidth = offsetWidth === Math.round(width) ? width : offsetWidth;\n      var mergedOffsetHeight = offsetHeight === Math.round(height) ? height : offsetHeight;\n      var sizeInfo = _objectSpread(_objectSpread({}, size), {}, {\n        offsetWidth: mergedOffsetWidth,\n        offsetHeight: mergedOffsetHeight\n      });\n\n      // Let collection know what happened\n      onCollectionResize === null || onCollectionResize === void 0 || onCollectionResize(sizeInfo, target, data);\n      if (onResize) {\n        // defer the callback but not defer to next frame\n        Promise.resolve().then(function () {\n          onResize(sizeInfo, target);\n        });\n      }\n    }\n  }, []);\n\n  // Dynamic observe\n  React.useEffect(function () {\n    var currentElement = getDom();\n    if (currentElement && !disabled) {\n      observe(currentElement, onInternalResize);\n    }\n    return function () {\n      return unobserve(currentElement, onInternalResize);\n    };\n  }, [elementRef.current, disabled]);\n\n  // ============================ Render ============================\n  return /*#__PURE__*/React.createElement(DomWrapper, {\n    ref: wrapperRef\n  }, canRef ? /*#__PURE__*/React.cloneElement(mergedChildren, {\n    ref: mergedRef\n  }) : mergedChildren);\n}\nvar RefSingleObserver = /*#__PURE__*/React.forwardRef(SingleObserver);\nif (process.env.NODE_ENV !== 'production') {\n  RefSingleObserver.displayName = 'SingleObserver';\n}\nexport default RefSingleObserver;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport toArray from \"rc-util/es/Children/toArray\";\nimport { warning } from \"rc-util/es/warning\";\nimport SingleObserver from \"./SingleObserver\";\nimport { Collection } from \"./Collection\";\nvar INTERNAL_PREFIX_KEY = 'rc-observer-key';\nimport { _rs } from \"./utils/observerUtil\";\nexport { /** @private Test only for mock trigger resize event */\n_rs };\nfunction ResizeObserver(props, ref) {\n  var children = props.children;\n  var childNodes = typeof children === 'function' ? [children] : toArray(children);\n  if (process.env.NODE_ENV !== 'production') {\n    if (childNodes.length > 1) {\n      warning(false, 'Find more than one child node with `children` in ResizeObserver. Please use ResizeObserver.Collection instead.');\n    } else if (childNodes.length === 0) {\n      warning(false, '`children` of ResizeObserver is empty. Nothing is in observe.');\n    }\n  }\n  return childNodes.map(function (child, index) {\n    var key = (child === null || child === void 0 ? void 0 : child.key) || \"\".concat(INTERNAL_PREFIX_KEY, \"-\").concat(index);\n    return /*#__PURE__*/React.createElement(SingleObserver, _extends({}, props, {\n      key: key,\n      ref: index === 0 ? ref : undefined\n    }), child);\n  });\n}\nvar RefResizeObserver = /*#__PURE__*/React.forwardRef(ResizeObserver);\nif (process.env.NODE_ENV !== 'production') {\n  RefResizeObserver.displayName = 'ResizeObserver';\n}\nRefResizeObserver.Collection = Collection;\nexport default RefResizeObserver;"],"names":["CollectionContext","react","createContext","MapShim","Map","getIndex","arr","key","result","some","entry","index","class_1","__entries__","Object","defineProperty","prototype","get","length","enumerable","configurable","set","value","push","delete","entries","splice","has","clear","forEach","callback","ctx","_i","_a","call","isBrowser","window","document","global$1","__webpack_require__","g","Math","self","Function","requestAnimationFrame$1","requestAnimationFrame","bind","setTimeout","Date","now","transitionKeys","mutationObserverSupported","MutationObserver","ResizeObserverController","connected_","mutationEventsAdded_","mutationsObserver_","observers_","onTransitionEnd_","refresh","throttle","delay","leadingCall","trailingCall","lastCallTime","resolvePending","proxy","timeoutCallback","timeStamp","addObserver","observer","indexOf","connect_","removeObserver","observers","disconnect_","updateObservers_","activeObservers","filter","gatherActive","hasActive","broadcastActive","addEventListener","observe","attributes","childList","characterData","subtree","removeEventListener","disconnect","_b","propertyName","getInstance","instance_","defineConfigurable","target","props","keys","writable","getWindowOf","ownerGlobal","ownerDocument","defaultView","emptyRect","createRectInit","toFloat","parseFloat","getBordersSize","styles","positions","arguments","reduce","size","position","isSVGGraphicsElement","SVGGraphicsElement","SVGElement","getBBox","x","y","width","height","ResizeObservation","broadcastWidth","broadcastHeight","contentRect_","isActive","rect","getContentRect","bbox","getHTMLElementContentRect","clientWidth","clientHeight","getComputedStyle","paddings","getPaddings","positions_1","horizPad","left","right","vertPad","top","bottom","boxSizing","round","documentElement","vertScrollbar","horizScrollbar","abs","broadcastRect","ResizeObserverEntry","rectInit","contentRect","create","Constr","DOMRectReadOnly","ResizeObserverSPI","controller","callbackCtx","activeObservations_","observations_","callback_","controller_","callbackCtx_","Element","observations","unobserve","clearActive","_this","observation","map","WeakMap","ResizeObserver","method","apply","elementListeners","resizeObserver","entities","entity","_elementListeners$get","listener","_rs","DomWrapper","_React$Component","inherits","Z","_super","createSuper","classCallCheck","createClass","children","Component","RefSingleObserver","forwardRef","ref","disabled","elementRef","useRef","wrapperRef","onCollectionResize","useContext","isRenderProps","mergedChildren","sizeRef","offsetWidth","offsetHeight","canRef","isValidElement","es_ref","Yr","originRef","mergedRef","x1","getDom","_elementRef$current","findDOMNode","ZP","current","esm_typeof","nativeElement","useImperativeHandle","propsRef","onInternalResize","useCallback","_propsRef$current","onResize","data","_target$getBoundingCl","getBoundingClientRect","fixedWidth","floor","fixedHeight","mergedOffsetWidth","mergedOffsetHeight","sizeInfo","objectSpread2","Promise","resolve","then","useEffect","currentElement","Set","add","createElement","cloneElement","RefResizeObserver","childNodes","toArray","child","concat","esm_extends","undefined","Collection","_ref","onBatchResize","resizeIdRef","resizeInfosRef","element","currentId","Provider","es"],"sourceRoot":""}