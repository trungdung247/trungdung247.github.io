{"version":3,"file":"static/chunks/5569.6dbd29e48cc3d130.js","mappings":"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","sources":["webpack://_N_E/./containers/Home/hook/useEventKrpano.tsx","webpack://_N_E/./containers/Home/components/Tour.Event.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { Type_RefFuncKrpano } from '@components/Krpano/types';\nimport { TIME_DELAY_PAUSE_AUTOPLAYSCENE } from '@containers/Home/constants';\nimport { useState, useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  selectConfigAutoRotate,\n  selectConfigAutoChangeScene,\n} from '../selectors';\nimport { useKrpano } from './useKrpano';\nimport { useTourStats } from '../global/TourStats';\n\ninterface Props {\n  krpanoRef: Type_RefFuncKrpano | null;\n}\n\nexport const useEventKrpano = ({ krpanoRef }: Props) => {\n  const { onUp, onDown, onLeft, onRight, onStopHorizontal, onStopVertical } =\n    useKrpano({ krpanoRef });\n\n  const [, setTourStats] = useTourStats('stats');\n  const configAutoRotate = useSelector(selectConfigAutoRotate);\n  const configAutoChangeScene = useSelector(selectConfigAutoChangeScene);\n  const [isTemporaryPauseAutoChangeScene, setIsTemporaryPauseAutoChangeScene] =\n    useState<boolean>(false);\n  const [timePauseChangeScene, setTimePauseChangeScene] = useState<\n    number | undefined\n  >(undefined);\n\n  // const intervalTimeChangeScene = useRef<any>(null!);\n\n  // NOTE: auto change scene\n  const enableAutoChangeScene = useMemo(\n    () => configAutoChangeScene.enabled,\n    [configAutoChangeScene.enabled],\n  );\n  const isAutoChangeScene = useMemo(\n    () => configAutoChangeScene.on,\n    [configAutoChangeScene.on],\n  );\n  const timeChangeScene = useMemo(\n    () => configAutoChangeScene.waitTime,\n    [configAutoChangeScene],\n  );\n  const enabledAutoRotate = useMemo(\n    () => configAutoRotate.enabled,\n    [configAutoRotate],\n  );\n  const isTurnOnAutoRotate = useMemo(\n    () => configAutoRotate.on,\n    [configAutoRotate],\n  );\n\n  // SECTION: auto change scene\n\n  const onStopAutoChangeScene = useCallback(() => {\n    // if (intervalTimeChangeScene.current)\n    //   clearInterval(intervalTimeChangeScene.current);\n    setIsTemporaryPauseAutoChangeScene(true);\n    setTimePauseChangeScene(\n      +(timeChangeScene || 3) + +TIME_DELAY_PAUSE_AUTOPLAYSCENE,\n    );\n  }, [timeChangeScene]);\n\n  /**\n   * NOTE: add event remove autochangescene\n   */\n  const onEventAutoChangeScene = useCallback(() => {\n    krpanoRef\n      ?.getContainer()\n      .addEventListener('mousedown', onStopAutoChangeScene);\n    krpanoRef\n      ?.getContainer()\n      ?.addEventListener('touchstart', onStopAutoChangeScene);\n  }, [krpanoRef, onStopAutoChangeScene]);\n\n  const offEventAutoChangeScene = useCallback(() => {\n    krpanoRef\n      ?.getContainer()\n      ?.removeEventListener('mousedown', onStopAutoChangeScene);\n    krpanoRef\n      ?.getContainer()\n      ?.removeEventListener('touchstart', onStopAutoChangeScene);\n  }, [krpanoRef, onStopAutoChangeScene]);\n\n  // NOTE: event move scene by keycode\n  const onKeyUp = useCallback(\n    e => {\n      switch (e.keyCode) {\n        case 37:\n          onStopHorizontal();\n          break;\n        case 38:\n          onStopVertical();\n          break;\n        case 39:\n          onStopHorizontal();\n          break;\n        case 40:\n          onStopVertical();\n          break;\n        default:\n          break;\n      }\n    },\n    [onStopHorizontal, onStopVertical],\n  );\n\n  const onKeyDown = useCallback(\n    e => {\n      switch (e.keyCode) {\n        case 37:\n          onLeft();\n          break;\n        case 38:\n          onUp();\n          break;\n        case 39:\n          onRight();\n          break;\n        case 40:\n          onDown();\n          break;\n        default:\n          break;\n      }\n    },\n    [onDown, onLeft, onRight, onUp],\n  );\n\n  const onEventMoveByKeyCode = useCallback(() => {\n    krpanoRef?.getContainer()?.addEventListener('keyup', onKeyUp);\n    krpanoRef?.getContainer()?.addEventListener('keydown', onKeyDown);\n  }, [krpanoRef, onKeyDown, onKeyUp]);\n\n  const offEventMoveByKeyCode = useCallback(() => {\n    krpanoRef?.getContainer()?.removeEventListener('keyup', onKeyUp);\n    krpanoRef?.getContainer()?.removeEventListener('keydown', onKeyDown);\n  }, [krpanoRef, onKeyDown, onKeyUp]);\n\n  const onEventCheckGyroscopeAvailable = useCallback(() => {\n    const isAvailable = krpanoRef?.get(\n      'plugin[gyroscope].isavailable',\n    ) as unknown;\n    if (typeof isAvailable === 'boolean')\n      setTourStats(prev => ({ ...prev, isGyroscopeAvailable: isAvailable }));\n  }, [krpanoRef, setTourStats]);\n\n  return useMemo(\n    () => ({\n      isAutoChangeScene,\n      timeChangeScene,\n      enableAutoChangeScene,\n      isTurnOnAutoRotate,\n      enabledAutoRotate,\n      //\n      timePauseChangeScene,\n      setTimePauseChangeScene,\n      isTemporaryPauseAutoChangeScene,\n      setIsTemporaryPauseAutoChangeScene,\n      //\n      onEventMoveByKeyCode,\n      offEventMoveByKeyCode,\n      onEventAutoChangeScene,\n      offEventAutoChangeScene,\n      onEventCheckGyroscopeAvailable,\n    }),\n    [\n      isAutoChangeScene,\n      timeChangeScene,\n      enableAutoChangeScene,\n      isTurnOnAutoRotate,\n      enabledAutoRotate,\n      timePauseChangeScene,\n      isTemporaryPauseAutoChangeScene,\n      onEventMoveByKeyCode,\n      offEventMoveByKeyCode,\n      onEventAutoChangeScene,\n      offEventAutoChangeScene,\n      onEventCheckGyroscopeAvailable,\n    ],\n  );\n};\n","import { Type_RefFuncKrpano } from '@components/Krpano/types';\nimport { useEventKrpano } from '@containers/Home/hook/useEventKrpano';\nimport React, { memo, useEffect, useRef } from 'react';\nimport { useTourEventState } from '../global/TourStats';\n\ninterface Props {\n  isLoaded: boolean;\n  onNextScene: () => void;\n  onStartRotate: () => void;\n  krpanoRef: Type_RefFuncKrpano | null;\n}\n\nconst TourEvent = memo(\n  ({ isLoaded, onStartRotate, onNextScene, krpanoRef }: Props) => {\n    const intervalTimeChangeScene = useRef<any>(null!);\n    const [tourEventStats] = useTourEventState('state');\n\n    const {\n      timeChangeScene,\n      isAutoChangeScene,\n      enableAutoChangeScene,\n      //\n      isTurnOnAutoRotate,\n      enabledAutoRotate,\n      //\n      timePauseChangeScene,\n      setTimePauseChangeScene,\n      //\n      isTemporaryPauseAutoChangeScene,\n      setIsTemporaryPauseAutoChangeScene,\n      //\n      onEventAutoChangeScene,\n      offEventAutoChangeScene,\n      //\n      onEventMoveByKeyCode,\n      offEventMoveByKeyCode,\n      //\n      onEventCheckGyroscopeAvailable,\n    } = useEventKrpano({ krpanoRef });\n\n    useEffect(() => {\n      setTimePauseChangeScene(timeChangeScene);\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [timeChangeScene]);\n\n    /**\n     * NOTE: auto rotate (only when isLoaded)\n     */\n    useEffect(() => {\n      if (enabledAutoRotate && isTurnOnAutoRotate && isLoaded) onStartRotate();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [enabledAutoRotate, isLoaded, onStartRotate]);\n\n    /**\n     * NOTE: event autochangescene\n     */\n    useEffect(() => {\n      if (\n        !tourEventStats?.isVisibleDollhouse &&\n        isAutoChangeScene &&\n        timeChangeScene &&\n        isLoaded\n      ) {\n        intervalTimeChangeScene.current = setInterval(\n          () => {\n            onNextScene();\n            setTimePauseChangeScene(timeChangeScene);\n          },\n          (timePauseChangeScene || timeChangeScene) * 1000,\n        );\n        if (isTemporaryPauseAutoChangeScene)\n          setIsTemporaryPauseAutoChangeScene(false);\n      }\n      return () => {\n        if (intervalTimeChangeScene.current)\n          clearInterval(intervalTimeChangeScene.current);\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n      isLoaded,\n      isAutoChangeScene,\n      isTemporaryPauseAutoChangeScene,\n      tourEventStats.isVisibleDollhouse,\n    ]);\n\n    /**\n     * NOTE: add event remove autochangescene\n     */\n    useEffect(() => {\n      if (\n        enableAutoChangeScene &&\n        isAutoChangeScene &&\n        !tourEventStats?.isVisibleDollhouse\n      )\n        onEventAutoChangeScene();\n      return () => {\n        if (!isAutoChangeScene) offEventAutoChangeScene();\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n      isAutoChangeScene,\n      enableAutoChangeScene,\n      tourEventStats?.isVisibleDollhouse,\n    ]);\n\n    useEffect(() => {\n      onEventMoveByKeyCode();\n      return () => {\n        offEventMoveByKeyCode();\n      };\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n\n    useEffect(() => {\n      isLoaded && onEventCheckGyroscopeAvailable();\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [isLoaded]);\n\n    return <div />;\n  },\n);\n\nexport default TourEvent;\n"],"names":["useEventKrpano","param","krpanoRef","useKrpano","onUp","onDown","onLeft","onRight","onStopHorizontal","onStopVertical","setTourStats","useTourStats","configAutoRotate","useSelector","selectConfigAutoRotate","configAutoChangeScene","selectConfigAutoChangeScene","useState","isTemporaryPauseAutoChangeScene","setIsTemporaryPauseAutoChangeScene","undefined","timePauseChangeScene","setTimePauseChangeScene","enableAutoChangeScene","useMemo","enabled","isAutoChangeScene","on","timeChangeScene","waitTime","enabledAutoRotate","isTurnOnAutoRotate","onStopAutoChangeScene","useCallback","TIME_DELAY_PAUSE_AUTOPLAYSCENE","onEventAutoChangeScene","getContainer","addEventListener","offEventAutoChangeScene","removeEventListener","onKeyUp","e","keyCode","onKeyDown","onEventMoveByKeyCode","offEventMoveByKeyCode","onEventCheckGyroscopeAvailable","isAvailable","get","prev","_object_spread_props","_","_object_spread","isGyroscopeAvailable","Tour_Event","memo","isLoaded","onStartRotate","onNextScene","intervalTimeChangeScene","useRef","tourEventStats","useTourEventState","useEffect","isVisibleDollhouse","current","setInterval","clearInterval","jsx_runtime","jsx","div"],"sourceRoot":""}