{"version":3,"file":"static/chunks/925.d14763dea755cc63.js","mappings":"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","sources":["webpack://_N_E/./containers/Home/components/Tour.Sound.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import React, {\n  useRef,\n  memo,\n  useCallback,\n  useEffect,\n  useState,\n  useMemo,\n} from 'react';\nimport dynamic from 'next/dynamic';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectConfigSoundProject,\n  selectDetailProject,\n  selectIsFirstScene,\n  selectLanguageProjectSelected,\n  selectSceneSelected,\n} from '@containers/Home/selectors';\nimport { actions } from '@containers/Home/slice';\nimport { useKrpano } from '@containers/Home/hook/useKrpano';\nimport { Type_RefFuncKrpano } from '@components/Krpano/types';\nimport { TourSettingWrapper } from './styled';\nimport { useTourEventState } from '../global/TourStats';\n\nconst ModalConfirm = dynamic(() => import('@components/ModalConfirm'));\n\ninterface Props {\n  krpanoRef: Type_RefFuncKrpano | null;\n}\n\nconst Tour = ({ krpanoRef }: Props) => {\n  const dispatch = useDispatch();\n  const soundSceneRef = useRef<HTMLAudioElement>(null!);\n  const soundProjectRef = useRef<HTMLAudioElement>(null!);\n\n  const { onSetSoundOnScene, onStartHotspotSound } = useKrpano({\n    krpanoRef,\n  });\n\n  const [tourEventState] = useTourEventState('state');\n\n  const [visibleModalConfirm, setVisibleModalConfirm] = useState(false);\n\n  const isFirstScene = useSelector(selectIsFirstScene);\n  const detailProject = useSelector(selectDetailProject);\n  const sceneSelected = useSelector(selectSceneSelected);\n  const configSound = useSelector(selectConfigSoundProject);\n  const languageProjectSelected = useSelector(selectLanguageProjectSelected);\n\n  const bgSoundProject = detailProject?.multiLangEnabled\n    ? detailProject?.background_sound_multi_lang\n    : detailProject?.background_sound;\n  const bgSoundScene = detailProject?.multiLangEnabled\n    ? sceneSelected?.background_sound_multi_lang\n    : sceneSelected?.background_sound;\n\n  const isExistSoundOnScene = useMemo(\n    () =>\n      !!bgSoundProject ||\n      !!bgSoundScene ||\n      sceneSelected?.hotspots?.some(\n        item =>\n          (item.type === 'sound' &&\n            (item.config?.sound?.file || item.config?.sound?.url)) ||\n          (item.type === 'instructor' && item.config?.instructor?.media) ||\n          (item.type === 'media' &&\n            item.config?.media?.type === 'media-video' &&\n            item.config?.media?.media?.src),\n      ),\n    [bgSoundProject, bgSoundScene, sceneSelected],\n  );\n\n  const onCheckPlayPauseSoundScene = useCallback(() => {\n    if (soundSceneRef?.current)\n      if (!tourEventState.isSoundOnScene) soundSceneRef.current?.pause();\n      else soundSceneRef.current?.play();\n  }, [tourEventState]);\n\n  const onCheckPlayPauseSoundProject = useCallback(() => {\n    if (configSound) {\n      if (soundProjectRef.current) {\n        soundProjectRef.current.volume = configSound.on\n          ? detailProject?.background_sound_volume || 0.4\n          : 0;\n        soundProjectRef.current.muted = !configSound.on;\n        configSound.on && soundProjectRef.current?.play();\n      }\n      if (soundSceneRef.current) {\n        soundSceneRef.current.muted = !configSound.on;\n        soundSceneRef.current.volume = configSound.on\n          ? sceneSelected?.background_sound_volume || 0.8\n          : 0;\n        configSound.on && soundSceneRef.current?.play();\n      }\n    }\n  }, [\n    configSound,\n    detailProject?.background_sound_volume,\n    sceneSelected?.background_sound_volume,\n  ]);\n\n  /**\n   * NOTE: only open dialog confirm when exist hotspot sound on first scene\n   * NOTE: turn on alllow_sound on next_scenes (regardless not open_dialog_confirm on first_scene since !existHotspotSound)\n   *\n   */\n  useEffect(() => {\n    if (tourEventState.isVisiblePopupIntro === false && isExistSoundOnScene)\n      if (configSound?.on === undefined || configSound?.on === null) {\n        if (isFirstScene) setVisibleModalConfirm(true);\n        else onOKModalConfirm();\n      } else {\n        onCheckPlayPauseSoundProject();\n        onCheckPlayPauseSoundScene();\n      }\n    // else if (isFirstScene === false && configSound.on === null)\n    //   dispatch(actions.setConfigSoundProject({ on: true }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isFirstScene, isExistSoundOnScene, tourEventState.isVisiblePopupIntro]);\n\n  // NOTE: refresh sound scene\n  useEffect(() => {\n    if (\n      isFirstScene === false &&\n      configSound.on &&\n      bgSoundScene &&\n      soundSceneRef.current\n    ) {\n      soundSceneRef.current.src = bgSoundScene?.src;\n      soundSceneRef.current.currentTime = 0;\n      soundSceneRef.current.volume = configSound.on\n        ? sceneSelected?.background_sound_volume || 0.8\n        : 0;\n      soundSceneRef.current.muted = !configSound.on;\n      onCheckPlayPauseSoundScene();\n    }\n    // NOTE: auto close dialog confirm if user change scene => allow sound on\n    // if (isFirstScene === false && visibleModalConfirm) {\n    //   setVisibleModalConfirm(false);\n    //   dispatch(actions.setConfigSoundProject({ on: true }));\n    // }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sceneSelected?._id, configSound]);\n\n  const onCloseModalConfirm = useCallback(\n    (isPassiveAction = false) => {\n      setVisibleModalConfirm(false);\n      if (!isPassiveAction) {\n        onSetSoundOnScene(false);\n        dispatch(actions.setConfigSoundProject({ on: false }));\n      }\n    },\n    [dispatch, onSetSoundOnScene],\n  );\n\n  const onOKModalConfirm = useCallback(() => {\n    onSetSoundOnScene(true);\n    dispatch(actions.setConfigSoundProject({ on: true }));\n\n    if (sceneSelected) onStartHotspotSound();\n    soundProjectRef.current?.play();\n    soundSceneRef.current?.play();\n\n    onCloseModalConfirm(true);\n  }, [\n    dispatch,\n    sceneSelected,\n    onSetSoundOnScene,\n    onStartHotspotSound,\n    onCloseModalConfirm,\n  ]);\n\n  useEffect(() => {\n    onCheckPlayPauseSoundProject();\n    if (configSound.on && visibleModalConfirm) onCloseModalConfirm(true);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [configSound?.on, languageProjectSelected]);\n\n  useEffect(() => {\n    onCheckPlayPauseSoundScene();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [tourEventState.isSoundOnScene, languageProjectSelected]);\n\n  return (\n    <TourSettingWrapper>\n      {bgSoundProject && (\n        <audio\n          key={bgSoundProject?.src}\n          className=\"el-hide\"\n          loop\n          autoPlay={false}\n          ref={soundProjectRef}\n        >\n          <source src={bgSoundProject?.src} type={bgSoundProject?.mimetype} />\n        </audio>\n      )}\n      {/* NOTE: re-render audio when scene change */}\n      {bgSoundScene && (\n        <audio\n          key={bgSoundScene?.src}\n          className=\"el-hide\"\n          loop\n          autoPlay={false}\n          ref={soundSceneRef}\n        >\n          <source src={bgSoundScene?.src} type={bgSoundScene?.mimetype} />\n        </audio>\n      )}\n\n      {visibleModalConfirm && (\n        <ModalConfirm\n          visible={visibleModalConfirm}\n          onOK={onOKModalConfirm}\n          onCancel={onCloseModalConfirm.bind(this, false)}\n        />\n      )}\n    </TourSettingWrapper>\n  );\n};\n\nexport default memo(Tour);\n"],"names":["ModalConfirm","dynamic","__webpack_require__","e","then","bind","__webpack_exports__","memo","param","krpanoRef","dispatch","useDispatch","soundSceneRef","useRef","soundProjectRef","useKrpano","onSetSoundOnScene","onStartHotspotSound","tourEventState","useTourEventState","useState","visibleModalConfirm","setVisibleModalConfirm","isFirstScene","useSelector","selectIsFirstScene","detailProject","selectDetailProject","sceneSelected","selectSceneSelected","configSound","selectConfigSoundProject","languageProjectSelected","selectLanguageProjectSelected","bgSoundProject","multiLangEnabled","background_sound_multi_lang","background_sound","bgSoundScene","isExistSoundOnScene","useMemo","hotspots","some","item","type","config","sound","file","url","instructor","media","src","onCheckPlayPauseSoundScene","useCallback","current","isSoundOnScene","play","pause","onCheckPlayPauseSoundProject","volume","on","background_sound_volume","muted","useEffect","isVisiblePopupIntro","undefined","onOKModalConfirm","currentTime","_id","onCloseModalConfirm","isPassiveAction","actions","setConfigSoundProject","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","TourSettingWrapper","jsx","audio","className","loop","autoPlay","ref","source","mimetype","visible","onOK","onCancel","_this"],"sourceRoot":""}