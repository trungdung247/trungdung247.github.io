{"version":3,"file":"static/chunks/9967.8eafc5986e73bab5.js","mappings":"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","sources":["webpack://_N_E/./containers/Home/components/Map/DisplayOnMobile.tsx","webpack://_N_E/./containers/Home/hook/useEventMap.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { memo, useCallback } from 'react';\nimport { I_Scene } from '@containers/Home/types';\nimport dynamic from 'next/dynamic';\nimport { useEventMap } from '@containers/Home/hook/useEventMap';\nimport { useTourEventState } from '@containers/Home/global/TourStats';\n\nconst Popup = dynamic(() => import('./Popup'));\n\ninterface Props {\n  onChangeScene: (scene: I_Scene) => void;\n}\n\nconst FloorplanPanel = memo(({ onChangeScene }: Props) => {\n  const [tourEventStats, setTourEventStats] = useTourEventState('state');\n\n  const { mapData, configMap, markerSelected } = useEventMap();\n\n  const onClosePopup = useCallback(\n    () => setTourEventStats(prev => ({ ...prev, isVisibleMap: false })),\n    [setTourEventStats],\n  );\n\n  return tourEventStats.isVisibleMap ? (\n    <Popup\n      visible={tourEventStats.isVisibleMap}\n      markerSelected={markerSelected}\n      mapData={mapData}\n      configMap={configMap}\n      onChangeScene={onChangeScene}\n      onCancel={onClosePopup}\n    />\n  ) : null;\n});\n\nexport default FloorplanPanel;\n","import { useCallback, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTourEventState } from '../global/TourStats';\nimport {\n  selectDataMap,\n  selectConfigMap,\n  selectSceneSelected,\n} from '../selectors';\n\n// interface Props {}\n\nexport const useEventMap = () => {\n  const mapData = useSelector(selectDataMap);\n  const configMap = useSelector(selectConfigMap);\n  const sceneSelected = useSelector(selectSceneSelected);\n\n  const [, setTourEventStats] = useTourEventState('state');\n\n  const markerSelected = useMemo(\n    () =>\n      mapData?.markers?.filter(\n        item => item.target_scene_id === sceneSelected?.id,\n      )[0] || undefined,\n    [mapData, sceneSelected?.id],\n  );\n\n  const configDisplayPanel = useMemo(\n    () => (configMap?.map?.type === 'panel' ? configMap?.map : undefined),\n    [configMap?.map],\n  );\n\n  const configDisplayBox = useMemo(\n    () =>\n      configMap?.map?.type === 'box'\n        ? {\n            ...{\n              offsetBottom: 48,\n              offsetLeft: 10,\n              offsetRight: 10,\n              offsetTop: 10,\n            },\n            ...configMap?.map,\n          }\n        : undefined,\n    [configMap?.map],\n  );\n\n  const [visiblePopup, setVisiblePopup] = useState(false);\n\n  const onCloseMap = useCallback(() => {\n    setTourEventStats(prev => ({ ...prev, isVisibleMap: false }));\n  }, [setTourEventStats]);\n\n  const onOpenPopup = useCallback(() => setVisiblePopup(true), []);\n  const onClosePopup = useCallback(() => setVisiblePopup(false), []);\n\n  return useMemo(\n    () => ({\n      visiblePopup,\n      sceneSelected,\n      markerSelected,\n      configMap,\n      configDisplayBox,\n      mapData,\n      configDisplayPanel,\n      onCloseMap,\n      onClosePopup,\n      onOpenPopup,\n    }),\n    [\n      visiblePopup,\n      sceneSelected,\n      markerSelected,\n      configMap,\n      configDisplayBox,\n      mapData,\n      configDisplayPanel,\n      onCloseMap,\n      onClosePopup,\n      onOpenPopup,\n    ],\n  );\n};\n"],"names":["Popup","dynamic","Promise","all","__webpack_require__","e","then","bind","FloorplanPanel","memo","param","onChangeScene","useTourEventState","tourEventStats","setTourEventStats","useEventMap","mapData","configMap","markerSelected","onClosePopup","useCallback","prev","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_6__","_","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_7__","isVisibleMap","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","visible","onCancel","__webpack_exports__","useSelector","selectDataMap","selectConfigMap","sceneSelected","selectSceneSelected","useMemo","markers","filter","item","target_scene_id","id","undefined","configDisplayPanel","map","type","configDisplayBox","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_5__","offsetBottom","offsetLeft","offsetRight","offsetTop","useState","visiblePopup","setVisiblePopup","onCloseMap","onOpenPopup"],"sourceRoot":""}