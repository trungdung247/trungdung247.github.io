{"version":3,"file":"static/chunks/6231.2ca999a59c490e20.js","mappings":"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","sources":["webpack://_N_E/./containers/Home/hook/useControlbarConfig.tsx","webpack://_N_E/./containers/Home/themes/ThemeBaseKrpano/Controlbar.Action.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectConfigControlbar, selectSceneSelected } from '../selectors';\nimport { I_ControlbarKey } from '../types';\nimport { useTourStats } from '../global/TourStats';\nimport { DEFAULT_VALUE_CONTROLBAR_CONFIG } from '../constants';\n\nexport const useControlbarConfig = () => {\n  const [tourStats] = useTourStats('stats');\n  const sceneSelected = useSelector(selectSceneSelected);\n  const controlbarConfig = useSelector(selectConfigControlbar);\n\n  const onCheckIsShowContentControlbarItem = useCallback(\n    (type: I_ControlbarKey) => {\n      if (type) {\n        const config =\n          controlbarConfig[type] || DEFAULT_VALUE_CONTROLBAR_CONFIG[type];\n\n        return type === 'gyro'\n          ? !!tourStats.isGyroscopeAvailable && !config?.isHide\n          : type === 'vr' || type === 'view_mode'\n          ? !config?.isHide && sceneSelected?.media?.subType !== 'flat'\n          : !config?.isHide;\n      }\n      return true;\n    },\n    [sceneSelected?.media, controlbarConfig, tourStats],\n  );\n\n  const onRenderContentControlbarItem = useCallback(\n    (type: I_ControlbarKey) => {\n      if (type) {\n        const config =\n          controlbarConfig[type] || DEFAULT_VALUE_CONTROLBAR_CONFIG[type];\n        if (config.type === 'icon' && config.icon)\n          return (\n            <i aria-hidden className={`controlbar-item__icon ${config.icon}`} />\n          );\n        if (config.type === 'image' && config.image?.src)\n          return (\n            <img\n              className=\"controlbar-item__img\"\n              src={config.image?.src}\n              alt=\"img\"\n            />\n          );\n      }\n      return '';\n    },\n    [controlbarConfig],\n  );\n\n  return useMemo(\n    () => ({\n      onRenderContentControlbarItem,\n      onCheckIsShowContentControlbarItem,\n    }),\n    [onRenderContentControlbarItem, onCheckIsShowContentControlbarItem],\n  );\n};\n","import { Type_RefFuncKrpano } from '@components/Krpano/types';\nimport { useTourEventState } from '@containers/Home/global/TourStats';\nimport { useControlbarConfig } from '@containers/Home/hook/useControlbarConfig';\nimport { useKrpano } from '@containers/Home/hook/useKrpano';\nimport {\n  selectConfigSoundProject,\n  selectLanguageProject,\n} from '@containers/Home/selectors';\nimport { Popover, Tooltip } from 'antd';\nimport React, { memo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ControlbarPopoverWrapper } from './styled';\nimport { isServer } from '@utils/helper';\n\ninterface Props {\n  krpanoRef: Type_RefFuncKrpano | null;\n  isShowListScene: boolean;\n  isShowControlbar: boolean;\n  onToggleControlbar: () => void;\n  onToggleListScene: () => void;\n  onPrevScene: () => void;\n  onNextScene: () => void;\n}\n\nconst ControlbarAction = memo(\n  ({\n    krpanoRef,\n    onPrevScene,\n    onNextScene,\n    isShowListScene,\n    isShowControlbar,\n    onToggleControlbar,\n    onToggleListScene,\n  }: Props) => {\n    const LANGUAGES = isServer ? {} : window.languages || {};\n\n    const [{ isSoundOnScene, isActiveModeMultipleStaging }] =\n      useTourEventState('state');\n    const {\n      onRenderContentControlbarItem,\n      onCheckIsShowContentControlbarItem,\n    } = useControlbarConfig();\n    const languageProject = useSelector(selectLanguageProject);\n    const configSoundProject = useSelector(selectConfigSoundProject);\n\n    const {\n      //\n      onVR,\n      onToggleGyro,\n      onFullscreen,\n      onToFirstScene,\n      onViewNormal,\n      onViewMirrorBall,\n      onViewPlannet,\n      onTurnOnScreenshotCapture,\n      // NOTE: auto change scene\n      isChangeScene,\n      isShowIconChangeScene,\n      onChangeAutoChangeScene,\n      // NOTE: auto rotate\n      isRotate,\n      isShowIconRotate,\n      onToggleRotate,\n      // NOTE: sound scene\n      isShowIconSoundScene,\n      onToggleSoundScene,\n      // NOTE: sound project\n      isShowIconSoundProject,\n      onTurnOffSoundProject,\n      onTurnOnSoundProject,\n      // NOTE: multiple staging\n      isShowIconMultipleStaging,\n      onToggleModeMultipleStaging,\n      // NOTE: multi-language\n      languagesProject,\n      onChangeLanguageProject,\n    } = useKrpano({ krpanoRef });\n\n    return (\n      <div className=\"controlBar\">\n        <div className=\"--left\">\n          <button\n            type=\"button\"\n            className=\"itemControlBtn\"\n            onClick={onPrevScene}\n          >\n            <i aria-hidden className=\"far fa-chevron-circle-left\" />\n          </button>\n          <button\n            type=\"button\"\n            className={`itemControlBtn ${isShowListScene ? 'active' : ''}`}\n            onClick={onToggleListScene}\n          >\n            <i aria-hidden className=\"far fa-th\" />\n          </button>\n        </div>\n        <div className=\"--center\">\n          {onCheckIsShowContentControlbarItem('home') && (\n            <Tooltip\n              title={LANGUAGES[languageProject]?.controlbarFirstScene}\n              placement=\"top\"\n            >\n              <button\n                type=\"button\"\n                className=\"itemControlBtn\"\n                onClick={onToFirstScene}\n              >\n                {onRenderContentControlbarItem('home')}\n              </button>\n            </Tooltip>\n          )}\n          {isShowIconSoundProject &&\n            onCheckIsShowContentControlbarItem('sound_project_off') &&\n            onCheckIsShowContentControlbarItem('sound_project_on') && (\n              <Tooltip\n                title={\n                  configSoundProject.on\n                    ? LANGUAGES[languageProject]?.controlbarTurnOffSoundProject\n                    : LANGUAGES[languageProject]?.controlbarTurnOnSoundProject\n                }\n                placement=\"top\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"itemControlBtn\"\n                  onClick={\n                    configSoundProject.on\n                      ? onTurnOffSoundProject\n                      : onTurnOnSoundProject\n                  }\n                >\n                  {configSoundProject.on\n                    ? onRenderContentControlbarItem('sound_project_off')\n                    : onRenderContentControlbarItem('sound_project_on')}\n                </button>\n              </Tooltip>\n            )}\n          {((isShowIconSoundScene &&\n            onCheckIsShowContentControlbarItem('sound_scene_off') &&\n            onCheckIsShowContentControlbarItem('sound_scene_on')) ||\n            (isShowIconRotate &&\n              onCheckIsShowContentControlbarItem('auto_rotate_off') &&\n              onCheckIsShowContentControlbarItem('auto_rotate_on')) ||\n            (isShowIconChangeScene &&\n              onCheckIsShowContentControlbarItem('auto_change_scene_off') &&\n              onCheckIsShowContentControlbarItem('auto_change_scene_on'))) && (\n            <Popover\n              placement=\"top\"\n              zIndex={99}\n              content={\n                <ControlbarPopoverWrapper>\n                  <ul>\n                    {isShowIconSoundScene &&\n                      onCheckIsShowContentControlbarItem('sound_scene_off') &&\n                      onCheckIsShowContentControlbarItem('sound_scene_on') && (\n                        <li>\n                          <button type=\"button\" onClick={onToggleSoundScene}>\n                            {!isSoundOnScene\n                              ? onRenderContentControlbarItem('sound_scene_on')\n                              : onRenderContentControlbarItem(\n                                  'sound_scene_off',\n                                )}\n                            {LANGUAGES[languageProject]?.controlbarSoundScene}\n                            {/* {isSoundOnScene ? 'Sound Scene' : 'Sound Scene'} */}\n                          </button>\n                        </li>\n                      )}\n                    {isShowIconRotate &&\n                      onCheckIsShowContentControlbarItem('auto_rotate_off') &&\n                      onCheckIsShowContentControlbarItem('auto_rotate_on') && (\n                        <li>\n                          <button type=\"button\" onClick={onToggleRotate}>\n                            {!isRotate\n                              ? onRenderContentControlbarItem('auto_rotate_on')\n                              : onRenderContentControlbarItem(\n                                  'auto_rotate_off',\n                                )}\n                            {isRotate\n                              ? LANGUAGES[languageProject]?.controlbarStopRotate\n                              : LANGUAGES[languageProject]\n                                  ?.controlbarStartRotate}\n                          </button>\n                        </li>\n                      )}\n                    {isShowIconChangeScene &&\n                      onCheckIsShowContentControlbarItem(\n                        'auto_change_scene_off',\n                      ) &&\n                      onCheckIsShowContentControlbarItem(\n                        'auto_change_scene_on',\n                      ) && (\n                        <li>\n                          <button\n                            type=\"button\"\n                            onClick={onChangeAutoChangeScene.bind(\n                              this,\n                              !isChangeScene,\n                            )}\n                          >\n                            {!isChangeScene\n                              ? onRenderContentControlbarItem(\n                                  'auto_change_scene_on',\n                                )\n                              : onRenderContentControlbarItem(\n                                  'auto_change_scene_off',\n                                )}\n                            {isChangeScene\n                              ? LANGUAGES[languageProject]\n                                  ?.controlbarStopAutoPlayScene\n                              : LANGUAGES[languageProject]\n                                  ?.controlbarStartAutoPlayScene}\n                          </button>\n                        </li>\n                      )}\n                  </ul>\n                </ControlbarPopoverWrapper>\n              }\n              overlayClassName=\"popoverControlbar\"\n            >\n              <button type=\"button\" className=\"itemControlBtn\">\n                {onRenderContentControlbarItem('group_auto_play')}\n              </button>\n            </Popover>\n          )}\n\n          {onCheckIsShowContentControlbarItem('multi_language') &&\n            languagesProject?.length > 1 && (\n              <Popover\n                placement=\"top\"\n                zIndex={99}\n                content={\n                  <ControlbarPopoverWrapper>\n                    <ul>\n                      {languagesProject.map(item => (\n                        <li key={item.id}>\n                          <button\n                            type=\"button\"\n                            onClick={() => onChangeLanguageProject(item.id)}\n                          >\n                            <img src={item.flag?.src} />\n                            {item.name}\n                          </button>\n                        </li>\n                      ))}\n                    </ul>\n                  </ControlbarPopoverWrapper>\n                }\n                overlayClassName=\"popoverControlbar\"\n              >\n                <button type=\"button\" className=\"itemControlBtn\">\n                  {onRenderContentControlbarItem('multi_language')}\n                </button>\n              </Popover>\n            )}\n\n          {onCheckIsShowContentControlbarItem('view_mode') &&\n            (onCheckIsShowContentControlbarItem('view_mode_little_planet') ||\n              onCheckIsShowContentControlbarItem('view_mode_mirror') ||\n              onCheckIsShowContentControlbarItem('view_mode_normal')) && (\n              <Popover\n                placement=\"top\"\n                zIndex={99}\n                content={\n                  <ControlbarPopoverWrapper>\n                    <ul>\n                      {onCheckIsShowContentControlbarItem(\n                        'view_mode_normal',\n                      ) && (\n                        <li>\n                          <button type=\"button\" onClick={() => onViewNormal()}>\n                            {onRenderContentControlbarItem('view_mode_normal')}\n                            Normal\n                          </button>\n                        </li>\n                      )}\n                      {onCheckIsShowContentControlbarItem(\n                        'view_mode_mirror',\n                      ) && (\n                        <li>\n                          <button\n                            type=\"button\"\n                            onClick={() => onViewMirrorBall()}\n                          >\n                            {onRenderContentControlbarItem('view_mode_mirror')}\n                            Mirror Ball\n                          </button>\n                        </li>\n                      )}\n                      {onCheckIsShowContentControlbarItem(\n                        'view_mode_little_planet',\n                      ) && (\n                        <li>\n                          <button type=\"button\" onClick={() => onViewPlannet()}>\n                            {onRenderContentControlbarItem(\n                              'view_mode_little_planet',\n                            )}\n                            Little Planel\n                          </button>\n                        </li>\n                      )}\n                    </ul>\n                  </ControlbarPopoverWrapper>\n                }\n                overlayClassName=\"popoverControlbar\"\n              >\n                <button type=\"button\" className=\"itemControlBtn\">\n                  {onRenderContentControlbarItem('view_mode')}\n                </button>\n              </Popover>\n            )}\n\n          {isShowIconMultipleStaging &&\n            onCheckIsShowContentControlbarItem('multi_staging') && (\n              <Tooltip\n                title={\n                  isActiveModeMultipleStaging\n                    ? LANGUAGES[languageProject]\n                        ?.controlbarTurnOffModeMultipleStaging\n                    : LANGUAGES[languageProject]\n                        ?.controlbarTurnOnModeMultipleStaging\n                }\n                placement=\"top\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"itemControlBtn hide-on-mobile\"\n                  onClick={() => onToggleModeMultipleStaging()}\n                >\n                  {onRenderContentControlbarItem('multi_staging')}\n                </button>\n              </Tooltip>\n            )}\n\n          {onCheckIsShowContentControlbarItem('gyro') && (\n            <button\n              type=\"button\"\n              className=\"itemControlBtn\"\n              onClick={onToggleGyro}\n            >\n              {onRenderContentControlbarItem('gyro')}\n            </button>\n          )}\n\n          {onCheckIsShowContentControlbarItem('vr') && (\n            <Tooltip\n              title={LANGUAGES[languageProject]?.controlbarVRMode}\n              placement=\"top\"\n            >\n              <button type=\"button\" className=\"itemControlBtn\" onClick={onVR}>\n                {onRenderContentControlbarItem('vr')}\n              </button>\n            </Tooltip>\n          )}\n\n          {onCheckIsShowContentControlbarItem('screenshot_capture') && (\n            <Tooltip\n              title={LANGUAGES[languageProject]?.controlbarScreenshotCapture}\n              placement=\"top\"\n            >\n              <button\n                type=\"button\"\n                className=\"itemControlBtn\"\n                onClick={onTurnOnScreenshotCapture}\n              >\n                {onRenderContentControlbarItem('screenshot_capture')}\n              </button>\n            </Tooltip>\n          )}\n\n          {onCheckIsShowContentControlbarItem('fullscreen') && (\n            <Tooltip\n              title={LANGUAGES[languageProject]?.controlbarFullscreen}\n              placement=\"top\"\n            >\n              <button\n                type=\"button\"\n                className=\"itemControlBtn\"\n                onClick={onFullscreen}\n              >\n                {onRenderContentControlbarItem('fullscreen')}\n              </button>\n            </Tooltip>\n          )}\n        </div>\n        <div className=\"--right\">\n          <button\n            type=\"button\"\n            className=\"itemControlBtn\"\n            onClick={onToggleControlbar}\n          >\n            <i aria-hidden className=\"far fa-caret-circle-down\" />\n          </button>\n          <button\n            type=\"button\"\n            className=\"itemControlBtn\"\n            onClick={onNextScene}\n          >\n            <i aria-hidden className=\"far fa-chevron-circle-right\" />\n          </button>\n        </div>\n\n        <button\n          type=\"button\"\n          className={`itemControlBtn itemShowControlbar ${\n            !isShowControlbar ? '--show' : '--hide'\n          }`}\n          onClick={onToggleControlbar}\n        >\n          <i aria-hidden className=\"far fa-caret-circle-up\" />\n        </button>\n      </div>\n    );\n  },\n);\n\nexport default ControlbarAction;\n"],"names":["useControlbarConfig","tourStats","useTourStats","sceneSelected","useSelector","selectSceneSelected","controlbarConfig","selectConfigControlbar","onCheckIsShowContentControlbarItem","useCallback","type","config","DEFAULT_VALUE_CONTROLBAR_CONFIG","isGyroscopeAvailable","isHide","media","subType","onRenderContentControlbarItem","icon","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","i","aria-hidden","className","concat","image","src","img","alt","useMemo","ControlbarAction","memo","param","LANGUAGES","krpanoRef","onPrevScene","onNextScene","isShowListScene","isShowControlbar","onToggleControlbar","onToggleListScene","isServer","window","languages","_useTourEventState_","useTourEventState","isSoundOnScene","isActiveModeMultipleStaging","languageProject","selectLanguageProject","configSoundProject","selectConfigSoundProject","useKrpano","onVR","onToggleGyro","onFullscreen","onToFirstScene","onViewNormal","onViewMirrorBall","onViewPlannet","onTurnOnScreenshotCapture","isChangeScene","isShowIconChangeScene","onChangeAutoChangeScene","isRotate","isShowIconRotate","onToggleRotate","isShowIconSoundScene","onToggleSoundScene","isShowIconSoundProject","onTurnOffSoundProject","onTurnOnSoundProject","isShowIconMultipleStaging","onToggleModeMultipleStaging","languagesProject","onChangeLanguageProject","jsxs","div","button","onClick","Tooltip","title","controlbarFirstScene","placement","on","controlbarTurnOffSoundProject","controlbarTurnOnSoundProject","Popover","zIndex","content","ControlbarPopoverWrapper","ul","li","controlbarSoundScene","controlbarStopRotate","controlbarStartRotate","bind","_this","controlbarStopAutoPlayScene","controlbarStartAutoPlayScene","overlayClassName","length","map","item","id","flag","name","controlbarTurnOffModeMultipleStaging","controlbarTurnOnModeMultipleStaging","controlbarVRMode","controlbarScreenshotCapture","controlbarFullscreen","__webpack_exports__"],"sourceRoot":""}