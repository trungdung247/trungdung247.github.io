{"version":3,"file":"static/chunks/8306.f79029458b5dda25.js","mappings":"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","sources":["webpack://_N_E/./containers/Home/components/Floorplan/DisplayOnMobile.tsx","webpack://_N_E/./containers/Home/hook/useEventFloorplan.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { memo, useCallback, useRef } from 'react';\nimport { I_Scene } from '@containers/Home/types';\nimport dynamic from 'next/dynamic';\nimport { useEventFloorplan } from '@containers/Home/hook/useEventFloorplan';\nimport { useTourEventState } from '@containers/Home/global/TourStats';\nimport { Type_RefFuncImageFloorplan } from './ImageFloorplan';\n\nconst Popup = dynamic(() => import('./Popup'));\n\ninterface Props {\n  onChangeScene: (scene: I_Scene) => void;\n}\n\nconst FloorplanPanel = memo(({ onChangeScene }: Props) => {\n  const floorplanRef = useRef<Type_RefFuncImageFloorplan>(null!);\n  const [tourEventStats, setTourEventStats] = useTourEventState('state');\n\n  const {\n    listFloorplan,\n    markerSelected,\n    floorplanSelected,\n    configFloorplan,\n    onChangeFloorplan,\n  } = useEventFloorplan({\n    floorplanRef,\n  });\n\n  const onClosePopup = useCallback(\n    () => setTourEventStats(prev => ({ ...prev, isVisibleFloorplan: false })),\n    [setTourEventStats],\n  );\n\n  return tourEventStats.isVisibleFloorplan ? (\n    <Popup\n      visible={tourEventStats.isVisibleFloorplan}\n      listFloorplan={listFloorplan}\n      markerSelected={markerSelected}\n      floorplanSelected={floorplanSelected}\n      configFloorplan={configFloorplan}\n      onChangeFloorplan={onChangeFloorplan}\n      onChangeScene={onChangeScene}\n      onCancel={onClosePopup}\n    />\n  ) : null;\n});\n\nexport default FloorplanPanel;\n","import { RefObject, useCallback, useEffect, useMemo, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useTourEventState } from '../global/TourStats';\nimport {\n  selectListFloorplan,\n  selectConfigFloorplan,\n  selectSceneSelected,\n} from '../selectors';\nimport { I_Floorplan } from '../types';\nimport { Type_RefFuncImageFloorplan } from '../components/Floorplan/ImageFloorplan';\n\ninterface Props {\n  floorplanRef: RefObject<Type_RefFuncImageFloorplan>;\n}\n\nexport const useEventFloorplan = ({ floorplanRef }: Props) => {\n  const listFloorplan = useSelector(selectListFloorplan);\n  const sceneSelected = useSelector(selectSceneSelected);\n  const configFloorplan = useSelector(selectConfigFloorplan);\n\n  const [, setTourEventStats] = useTourEventState('state');\n\n  const [floorplanSelected, setFloorplanSelected] = useState<\n    I_Floorplan | undefined\n  >(undefined);\n\n  useEffect(() => {\n    // if (!floorplanSelected) {\n    const fp = listFloorplan\n      ? listFloorplan.filter(\n          item =>\n            item.markers?.filter(\n              marker => marker.target_scene_id === sceneSelected?.id,\n            ).length > 0,\n        )[0] ||\n        listFloorplan[0] ||\n        undefined\n      : undefined;\n    setFloorplanSelected(fp);\n    // }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [listFloorplan, sceneSelected?.id]);\n\n  const markerSelected = useMemo(\n    () =>\n      floorplanSelected?.markers?.filter(\n        item => item.target_scene_id === sceneSelected?.id,\n      )[0] || undefined,\n    [floorplanSelected, sceneSelected?.id],\n  );\n\n  const configDisplayPanel = useMemo(\n    () =>\n      configFloorplan?.floorplan?.type === 'panel'\n        ? configFloorplan?.floorplan\n        : undefined,\n    [configFloorplan?.floorplan],\n  );\n\n  const configDisplayBox = useMemo(\n    () =>\n      configFloorplan?.floorplan?.type === 'box'\n        ? {\n            ...{\n              offsetBottom: 48,\n              offsetLeft: 10,\n              offsetRight: 10,\n              offsetTop: 10,\n            },\n            ...configFloorplan?.floorplan,\n          }\n        : undefined,\n    [configFloorplan?.floorplan],\n  );\n\n  const [visiblePopup, setVisiblePopup] = useState(false);\n\n  const onCloseFloorplan = useCallback(() => {\n    setTourEventStats(prev => ({ ...prev, isVisibleFloorplan: false }));\n  }, [setTourEventStats]);\n\n  const onOpenPopup = useCallback(() => setVisiblePopup(true), []);\n  const onClosePopup = useCallback(() => setVisiblePopup(false), []);\n\n  const onZoomIn = useCallback(\n    () => floorplanRef.current?.getInstance().zoomIn(),\n    [floorplanRef],\n  );\n  const onZoomOut = useCallback(\n    () => floorplanRef.current?.getInstance().zoomOut(),\n    [floorplanRef],\n  );\n  const onCenterToMarkerActive = useCallback(() => {\n    const scale = floorplanRef.current?.getInstance().state.scale;\n    if (markerSelected?.id)\n      floorplanRef.current\n        ?.getInstance()\n        ?.zoomToElement(markerSelected.id, scale || undefined);\n  }, [floorplanRef, markerSelected]);\n\n  const onChangeFloorplan = useCallback(\n    ({ type }) => {\n      const fp = listFloorplan.filter(item => item.id === type)[0];\n      if (fp) setFloorplanSelected(fp);\n    },\n    [listFloorplan],\n  );\n\n  return useMemo(\n    () => ({\n      visiblePopup,\n      sceneSelected,\n      listFloorplan,\n      markerSelected,\n      configFloorplan,\n      configDisplayBox,\n      floorplanSelected,\n      configDisplayPanel,\n      onCenterToMarkerActive,\n      onChangeFloorplan,\n      onCloseFloorplan,\n      onClosePopup,\n      onOpenPopup,\n      onZoomOut,\n      onZoomIn,\n    }),\n    [\n      visiblePopup,\n      sceneSelected,\n      listFloorplan,\n      markerSelected,\n      configFloorplan,\n      configDisplayBox,\n      floorplanSelected,\n      configDisplayPanel,\n      onCenterToMarkerActive,\n      onChangeFloorplan,\n      onCloseFloorplan,\n      onClosePopup,\n      onOpenPopup,\n      onZoomOut,\n      onZoomIn,\n    ],\n  );\n};\n"],"names":["Popup","dynamic","__webpack_require__","e","then","bind","FloorplanPanel","memo","param","onChangeScene","floorplanRef","useRef","useTourEventState","tourEventStats","setTourEventStats","useEventFloorplan","listFloorplan","markerSelected","floorplanSelected","configFloorplan","onChangeFloorplan","onClosePopup","useCallback","prev","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_6__","_","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_7__","isVisibleFloorplan","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","visible","onCancel","__webpack_exports__","useSelector","selectListFloorplan","sceneSelected","selectSceneSelected","selectConfigFloorplan","useState","undefined","setFloorplanSelected","useEffect","filter","item","markers","marker","target_scene_id","id","length","useMemo","configDisplayPanel","floorplan","type","configDisplayBox","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_5__","offsetBottom","offsetLeft","offsetRight","offsetTop","visiblePopup","setVisiblePopup","onCloseFloorplan","onOpenPopup","onZoomIn","current","getInstance","zoomIn","onZoomOut","zoomOut","onCenterToMarkerActive","scale","state","zoomToElement","fp"],"sourceRoot":""}