{"version":3,"file":"static/chunks/6330.fa5f0288b43940c6.js","mappings":"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","sources":["webpack://_N_E/./containers/Home/hook/useControlbarConfig.tsx","webpack://_N_E/./containers/Home/themes/ThemeCompact/Controlbar.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import { useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectConfigControlbar, selectSceneSelected } from '../selectors';\nimport { I_ControlbarKey } from '../types';\nimport { useTourStats } from '../global/TourStats';\nimport { DEFAULT_VALUE_CONTROLBAR_CONFIG } from '../constants';\n\nexport const useControlbarConfig = () => {\n  const [tourStats] = useTourStats('stats');\n  const sceneSelected = useSelector(selectSceneSelected);\n  const controlbarConfig = useSelector(selectConfigControlbar);\n\n  const onCheckIsShowContentControlbarItem = useCallback(\n    (type: I_ControlbarKey) => {\n      if (type) {\n        const config =\n          controlbarConfig[type] || DEFAULT_VALUE_CONTROLBAR_CONFIG[type];\n\n        return type === 'gyro'\n          ? !!tourStats.isGyroscopeAvailable && !config?.isHide\n          : type === 'vr' || type === 'view_mode'\n          ? !config?.isHide && sceneSelected?.media?.subType !== 'flat'\n          : !config?.isHide;\n      }\n      return true;\n    },\n    [sceneSelected?.media, controlbarConfig, tourStats],\n  );\n\n  const onRenderContentControlbarItem = useCallback(\n    (type: I_ControlbarKey) => {\n      if (type) {\n        const config =\n          controlbarConfig[type] || DEFAULT_VALUE_CONTROLBAR_CONFIG[type];\n        if (config.type === 'icon' && config.icon)\n          return (\n            <i aria-hidden className={`controlbar-item__icon ${config.icon}`} />\n          );\n        if (config.type === 'image' && config.image?.src)\n          return (\n            <img\n              className=\"controlbar-item__img\"\n              src={config.image?.src}\n              alt=\"img\"\n            />\n          );\n      }\n      return '';\n    },\n    [controlbarConfig],\n  );\n\n  return useMemo(\n    () => ({\n      onRenderContentControlbarItem,\n      onCheckIsShowContentControlbarItem,\n    }),\n    [onRenderContentControlbarItem, onCheckIsShowContentControlbarItem],\n  );\n};\n","import { Type_RefFuncKrpano } from '@components/Krpano/types';\nimport { memo, useCallback, useState } from 'react';\nimport { ControlbarPopoverWrapper, ControlbarWrapper } from './styled';\nimport { useTourEventState } from '@containers/Home/global/TourStats';\nimport { useControlbarConfig } from '@containers/Home/hook/useControlbarConfig';\nimport { useSelector } from 'react-redux';\nimport {\n  selectConfigSoundProject,\n  selectLanguageProject,\n} from '@containers/Home/selectors';\nimport { useKrpano } from '@containers/Home/hook/useKrpano';\nimport { Popover, Tooltip } from 'antd';\nimport { isServer } from '@utils/helper';\n\nexport interface Props {\n  krpanoRef: Type_RefFuncKrpano | null;\n}\n\nexport const Controlbar = memo(({ krpanoRef }: Props) => {\n  const LANGUAGES = isServer ? {} : window.languages || {};\n\n  const [isShowControlbar, setIsShowControlbar] = useState(true);\n\n  const [{ isSoundOnScene, isActiveModeMultipleStaging }] =\n    useTourEventState('state');\n  const { onCheckIsShowContentControlbarItem, onRenderContentControlbarItem } =\n    useControlbarConfig();\n\n  const languageProject = useSelector(selectLanguageProject);\n  const configSoundProject = useSelector(selectConfigSoundProject);\n\n  const {\n    //\n    onVR,\n    onToggleGyro,\n    onFullscreen,\n    onToFirstScene,\n    onViewNormal,\n    onViewMirrorBall,\n    onViewPlannet,\n    onTurnOnScreenshotCapture,\n    // NOTE: auto change scene\n    isChangeScene,\n    isShowIconChangeScene,\n    onChangeAutoChangeScene,\n    // NOTE: auto rotate\n    isRotate,\n    isShowIconRotate,\n    onToggleRotate,\n    // NOTE: sound scene\n    isShowIconSoundScene,\n    onToggleSoundScene,\n    // NOTE: sound project\n    isShowIconSoundProject,\n    onTurnOffSoundProject,\n    onTurnOnSoundProject,\n    // NOTE: multiple staging\n    isShowIconMultipleStaging,\n    onToggleModeMultipleStaging,\n    // NOTE: info place\n    isShowIconInfoPlace,\n    onShowInfoPlace,\n    // NOTE: info scene\n    isShowIconInfoScene,\n    onToggleInfoScene,\n    // NOTE: floorplan\n    isShowIconFloorplan,\n    onToggleFloorplan,\n    // NOTE: dollhouse\n    isShowIconDollhouse,\n    onToggleDollhouseView,\n    // NOTE: map\n    isShowIconMap,\n    onToggleMap,\n    // NOTE: multi-language\n    languagesProject,\n    onChangeLanguageProject,\n  } = useKrpano({ krpanoRef });\n\n  const onToggleControlbar = useCallback(\n    () => setIsShowControlbar(prev => !prev),\n    [],\n  );\n\n  return (\n    <ControlbarWrapper\n      id=\"themeControlbar\"\n      className={`${isShowControlbar ? '' : 'inactive'}`}\n    >\n      <div className=\"--toggler\" onClick={onToggleControlbar}>\n        <i className=\"far fa-ellipsis-vertical\"></i>\n      </div>\n      <div className=\"controlBar\">\n        {onCheckIsShowContentControlbarItem('home') && (\n          <Tooltip\n            title={LANGUAGES[languageProject]?.controlbarFirstScene}\n            placement=\"left\"\n          >\n            <div className=\"--item\" onClick={onToFirstScene}>\n              {onRenderContentControlbarItem('home')}\n            </div>\n          </Tooltip>\n        )}\n        {isShowIconSoundProject &&\n          onCheckIsShowContentControlbarItem('sound_project_off') &&\n          onCheckIsShowContentControlbarItem('sound_project_on') && (\n            <Tooltip\n              title={\n                configSoundProject.on\n                  ? LANGUAGES[languageProject]?.controlbarTurnOffSoundProject\n                  : LANGUAGES[languageProject]?.controlbarTurnOnSoundProject\n              }\n              placement=\"left\"\n            >\n              <div\n                className=\"--item\"\n                onClick={\n                  configSoundProject.on\n                    ? onTurnOffSoundProject\n                    : onTurnOnSoundProject\n                }\n              >\n                {configSoundProject.on\n                  ? onRenderContentControlbarItem('sound_project_off')\n                  : onRenderContentControlbarItem('sound_project_on')}\n              </div>\n            </Tooltip>\n          )}\n        {((isShowIconSoundScene &&\n          onCheckIsShowContentControlbarItem('sound_scene_off') &&\n          onCheckIsShowContentControlbarItem('sound_scene_on')) ||\n          (isShowIconRotate &&\n            onCheckIsShowContentControlbarItem('auto_rotate_off') &&\n            onCheckIsShowContentControlbarItem('auto_rotate_on')) ||\n          (isShowIconChangeScene &&\n            onCheckIsShowContentControlbarItem('auto_change_scene_off') &&\n            onCheckIsShowContentControlbarItem('auto_change_scene_on'))) && (\n          <Popover\n            placement=\"left\"\n            zIndex={99}\n            content={\n              <ControlbarPopoverWrapper>\n                <ul>\n                  {isShowIconSoundScene &&\n                    onCheckIsShowContentControlbarItem('sound_scene_off') &&\n                    onCheckIsShowContentControlbarItem('sound_scene_on') && (\n                      <li>\n                        <button type=\"button\" onClick={onToggleSoundScene}>\n                          {!isSoundOnScene\n                            ? onRenderContentControlbarItem('sound_scene_on')\n                            : onRenderContentControlbarItem('sound_scene_off')}\n                          {LANGUAGES[languageProject]?.controlbarSoundScene}\n                          {/* {isSoundOnScene ? 'Sound Scene' : 'Sound Scene'} */}\n                        </button>\n                      </li>\n                    )}\n                  {isShowIconRotate &&\n                    onCheckIsShowContentControlbarItem('auto_rotate_off') &&\n                    onCheckIsShowContentControlbarItem('auto_rotate_on') && (\n                      <li>\n                        <button type=\"button\" onClick={onToggleRotate}>\n                          {!isRotate\n                            ? onRenderContentControlbarItem('auto_rotate_on')\n                            : onRenderContentControlbarItem('auto_rotate_off')}\n                          {isRotate\n                            ? LANGUAGES[languageProject]?.controlbarStopRotate\n                            : LANGUAGES[languageProject]?.controlbarStartRotate}\n                        </button>\n                      </li>\n                    )}\n                  {isShowIconChangeScene &&\n                    onCheckIsShowContentControlbarItem(\n                      'auto_change_scene_off',\n                    ) &&\n                    onCheckIsShowContentControlbarItem(\n                      'auto_change_scene_on',\n                    ) && (\n                      <li>\n                        <button\n                          type=\"button\"\n                          onClick={onChangeAutoChangeScene.bind(\n                            this,\n                            !isChangeScene,\n                          )}\n                        >\n                          {!isChangeScene\n                            ? onRenderContentControlbarItem(\n                                'auto_change_scene_on',\n                              )\n                            : onRenderContentControlbarItem(\n                                'auto_change_scene_off',\n                              )}\n                          {isChangeScene\n                            ? LANGUAGES[languageProject]\n                                ?.controlbarStopAutoPlayScene\n                            : LANGUAGES[languageProject]\n                                ?.controlbarStartAutoPlayScene}\n                        </button>\n                      </li>\n                    )}\n                </ul>\n              </ControlbarPopoverWrapper>\n            }\n            overlayClassName=\"popoverControlbar\"\n          >\n            <div className=\"--item\">\n              {onRenderContentControlbarItem('group_auto_play')}\n            </div>\n          </Popover>\n        )}\n\n        {onCheckIsShowContentControlbarItem('multi_language') &&\n          languagesProject?.length > 1 && (\n            <Popover\n              placement=\"left\"\n              zIndex={99}\n              content={\n                <ControlbarPopoverWrapper>\n                  <ul>\n                    {languagesProject.map(item => (\n                      <li key={item.id}>\n                        <button\n                          type=\"button\"\n                          onClick={() => onChangeLanguageProject(item.id)}\n                        >\n                          <img src={item.flag?.src} />\n                          {item.name}\n                        </button>\n                      </li>\n                    ))}\n                  </ul>\n                </ControlbarPopoverWrapper>\n              }\n              overlayClassName=\"popoverControlbar\"\n            >\n              <div className=\"--item\">\n                {onRenderContentControlbarItem('multi_language')}\n              </div>\n            </Popover>\n          )}\n\n        {onCheckIsShowContentControlbarItem('view_mode') &&\n          (onCheckIsShowContentControlbarItem('view_mode_little_planet') ||\n            onCheckIsShowContentControlbarItem('view_mode_mirror') ||\n            onCheckIsShowContentControlbarItem('view_mode_normal')) && (\n            <Popover\n              placement=\"left\"\n              zIndex={99}\n              content={\n                <ControlbarPopoverWrapper>\n                  <ul>\n                    {onCheckIsShowContentControlbarItem('view_mode_normal') && (\n                      <li>\n                        <button type=\"button\" onClick={() => onViewNormal()}>\n                          {onRenderContentControlbarItem('view_mode_normal')}\n                          Normal\n                        </button>\n                      </li>\n                    )}\n                    {onCheckIsShowContentControlbarItem('view_mode_mirror') && (\n                      <li>\n                        <button\n                          type=\"button\"\n                          onClick={() => onViewMirrorBall()}\n                        >\n                          {onRenderContentControlbarItem('view_mode_mirror')}\n                          Mirror Ball\n                        </button>\n                      </li>\n                    )}\n                    {onCheckIsShowContentControlbarItem(\n                      'view_mode_little_planet',\n                    ) && (\n                      <li>\n                        <button type=\"button\" onClick={() => onViewPlannet()}>\n                          {onRenderContentControlbarItem(\n                            'view_mode_little_planet',\n                          )}\n                          Little Planel\n                        </button>\n                      </li>\n                    )}\n                  </ul>\n                </ControlbarPopoverWrapper>\n              }\n              overlayClassName=\"popoverControlbar\"\n            >\n              <div className=\"--item\">\n                {onRenderContentControlbarItem('view_mode')}\n              </div>\n            </Popover>\n          )}\n\n        {isShowIconMultipleStaging &&\n          onCheckIsShowContentControlbarItem('multi_staging') && (\n            <Tooltip\n              title={\n                isActiveModeMultipleStaging\n                  ? LANGUAGES[languageProject]\n                      ?.controlbarTurnOffModeMultipleStaging\n                  : LANGUAGES[languageProject]\n                      ?.controlbarTurnOnModeMultipleStaging\n              }\n              placement=\"left\"\n            >\n              <div\n                className=\"--item\"\n                onClick={() => onToggleModeMultipleStaging()}\n              >\n                {onRenderContentControlbarItem('multi_staging')}\n              </div>\n            </Tooltip>\n          )}\n\n        {onCheckIsShowContentControlbarItem('gyro') && (\n          <div className=\"--item\" onClick={onToggleGyro}>\n            {onRenderContentControlbarItem('gyro')}\n          </div>\n        )}\n\n        {isShowIconInfoPlace &&\n          onCheckIsShowContentControlbarItem('info_tour') && (\n            <Tooltip\n              title={LANGUAGES[languageProject]?.controlbarInfoTour}\n              placement=\"left\"\n            >\n              <div className=\"--item\" onClick={onShowInfoPlace}>\n                {onRenderContentControlbarItem('info_tour')}\n              </div>\n            </Tooltip>\n          )}\n\n        {isShowIconInfoScene &&\n          onCheckIsShowContentControlbarItem('info_scene') && (\n            <Tooltip\n              title={LANGUAGES[languageProject]?.controlbarInfoScene}\n              placement=\"left\"\n            >\n              <div\n                className=\"--item\"\n                onClick={onToggleInfoScene.bind(this, undefined)}\n              >\n                {onRenderContentControlbarItem('info_scene')}\n              </div>\n            </Tooltip>\n          )}\n\n        {isShowIconDollhouse &&\n          onCheckIsShowContentControlbarItem('dollhouse') && (\n            <Tooltip\n              title={LANGUAGES[languageProject]?.controlbarDollhouse}\n              placement=\"left\"\n            >\n              <div className=\"--item\" onClick={onToggleDollhouseView}>\n                {onRenderContentControlbarItem('dollhouse')}\n              </div>\n            </Tooltip>\n          )}\n\n        {isShowIconFloorplan &&\n          onCheckIsShowContentControlbarItem('floorplan') && (\n            <Tooltip\n              title={LANGUAGES[languageProject]?.controlbarFloorplan}\n              placement=\"left\"\n            >\n              <div\n                className=\"--item\"\n                onClick={onToggleFloorplan.bind(this, undefined)}\n              >\n                {onRenderContentControlbarItem('floorplan')}\n              </div>\n            </Tooltip>\n          )}\n\n        {isShowIconMap && onCheckIsShowContentControlbarItem('map') && (\n          <Tooltip\n            title={LANGUAGES[languageProject]?.controlbarMap}\n            placement=\"left\"\n          >\n            <div className=\"--item\" onClick={onToggleMap.bind(this, undefined)}>\n              {onRenderContentControlbarItem('map')}\n            </div>\n          </Tooltip>\n        )}\n\n        {onCheckIsShowContentControlbarItem('vr') && (\n          <Tooltip\n            title={LANGUAGES[languageProject]?.controlbarVRMode}\n            placement=\"left\"\n          >\n            <div className=\"--item\" onClick={onVR}>\n              {onRenderContentControlbarItem('vr')}\n            </div>\n          </Tooltip>\n        )}\n\n        {onCheckIsShowContentControlbarItem('screenshot_capture') && (\n          <Tooltip\n            title={LANGUAGES[languageProject]?.controlbarScreenshotCapture}\n            placement=\"left\"\n          >\n            <div className=\"--item\" onClick={onTurnOnScreenshotCapture}>\n              {onRenderContentControlbarItem('screenshot_capture')}\n            </div>\n          </Tooltip>\n        )}\n\n        {onCheckIsShowContentControlbarItem('fullscreen') && (\n          <Tooltip\n            title={LANGUAGES[languageProject]?.controlbarFullscreen}\n            placement=\"left\"\n          >\n            <div className=\"--item\" onClick={onFullscreen}>\n              {onRenderContentControlbarItem('fullscreen')}\n            </div>\n          </Tooltip>\n        )}\n      </div>\n    </ControlbarWrapper>\n  );\n});\n\nexport default Controlbar;\n"],"names":["useControlbarConfig","tourStats","useTourStats","sceneSelected","useSelector","selectSceneSelected","controlbarConfig","selectConfigControlbar","onCheckIsShowContentControlbarItem","useCallback","type","config","DEFAULT_VALUE_CONTROLBAR_CONFIG","isGyroscopeAvailable","isHide","media","subType","onRenderContentControlbarItem","icon","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsx","i","aria-hidden","className","concat","image","src","img","alt","useMemo","Controlbar","memo","param","LANGUAGES","krpanoRef","isServer","window","languages","useState","isShowControlbar","setIsShowControlbar","_useTourEventState_","useTourEventState","isSoundOnScene","isActiveModeMultipleStaging","languageProject","selectLanguageProject","configSoundProject","selectConfigSoundProject","useKrpano","onVR","onToggleGyro","onFullscreen","onToFirstScene","onViewNormal","onViewMirrorBall","onViewPlannet","onTurnOnScreenshotCapture","isChangeScene","isShowIconChangeScene","onChangeAutoChangeScene","isRotate","isShowIconRotate","onToggleRotate","isShowIconSoundScene","onToggleSoundScene","isShowIconSoundProject","onTurnOffSoundProject","onTurnOnSoundProject","isShowIconMultipleStaging","onToggleModeMultipleStaging","isShowIconInfoPlace","onShowInfoPlace","isShowIconInfoScene","onToggleInfoScene","isShowIconFloorplan","onToggleFloorplan","isShowIconDollhouse","onToggleDollhouseView","isShowIconMap","onToggleMap","languagesProject","onChangeLanguageProject","onToggleControlbar","prev","jsxs","ControlbarWrapper","id","div","onClick","Tooltip","title","controlbarFirstScene","placement","on","controlbarTurnOffSoundProject","controlbarTurnOnSoundProject","Popover","zIndex","content","ControlbarPopoverWrapper","ul","li","button","controlbarSoundScene","controlbarStopRotate","controlbarStartRotate","bind","_this","controlbarStopAutoPlayScene","controlbarStartAutoPlayScene","overlayClassName","length","map","item","flag","name","controlbarTurnOffModeMultipleStaging","controlbarTurnOnModeMultipleStaging","controlbarInfoTour","controlbarInfoScene","undefined","controlbarDollhouse","controlbarFloorplan","controlbarMap","controlbarVRMode","controlbarScreenshotCapture","controlbarFullscreen","__webpack_exports__"],"sourceRoot":""}