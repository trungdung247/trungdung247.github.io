{"version":3,"file":"static/chunks/8223.ccd3d9a58b20d0b6.js","mappings":"iGAsOA,SAAAA,OAAAC,CAAA,EACA,OAAAA,KAAAA,EAAAC,OAAA,MACAC,mBAAAF,GACAA,CACA,CA1OA;;;;;CAKA,EASAG,EAAAC,CAAa,CAgCb,SAAAJ,CAAA,CAAAK,CAAA,EACA,oBAAAL,EACA,iDAQA,IALA,IAAAM,EAAA,GAEAC,EAAAC,CADAH,GAAA,IACAN,MAAA,EAAAA,OAEAU,EAAA,EACAA,EAAAT,EAAAU,MAAA,GACA,IAAAC,EAAAX,EAAAC,OAAA,KAAAQ,GAGA,GAAAE,KAAAA,EACA,MAGA,IAAAC,EAAAZ,EAAAC,OAAA,KAA+BQ,GAE/B,GAAAG,KAAAA,EACAA,EAAAZ,EAAAU,MAAA,MACM,GAAAE,EAAAD,EAAA,CAENF,EAAAT,EAAAa,WAAA,KAAgCF,EAAA,KAChC,QACA,CAEA,IAAAG,EAAAd,EAAAe,KAAA,CAAAN,EAAAE,GAAAK,IAAA,GAGA,GAAAC,KAAAA,IAAAX,CAAA,CAAAQ,EAAA,EACA,IAAAI,EAAAlB,EAAAe,KAAA,CAAAJ,EAAA,EAAAC,GAAAI,IAAA,EAGA,MAAAE,EAAAC,UAAA,KACAD,CAAAA,EAAAA,EAAAH,KAAA,QAGAT,CAAA,CAAAQ,EAAA,CAAAM,SAsLApB,CAAA,CAAAD,CAAA,EACA,IACA,OAAAA,EAAAC,EACA,CAAI,MAAAqB,EAAA,CACJ,OAAArB,CACA,CACA,EA5LAkB,EAAAX,EACA,CAEAE,EAAAG,EAAA,CACA,CAEA,OAAAN,CACA,EAtEAgB,OAAAC,SAAA,CAAAC,QAAA,6BCNYC,mCAAAA,EAAAA,GAAAA,CAAAA,EAAAA,CAAAA,CAAAA","sources":["webpack://_N_E/./node_modules/cookie/index.js","webpack://_N_E/./type/customType.ts","webpack://_N_E/<anon>"],"sourcesContent":["/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar __toString = Object.prototype.toString\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var dec = opt.decode || decode;\n\n  var index = 0\n  while (index < str.length) {\n    var eqIdx = str.indexOf('=', index)\n\n    // no more cookie pairs\n    if (eqIdx === -1) {\n      break\n    }\n\n    var endIdx = str.indexOf(';', index)\n\n    if (endIdx === -1) {\n      endIdx = str.length\n    } else if (endIdx < eqIdx) {\n      // backtrack on prior semicolon\n      index = str.lastIndexOf(';', eqIdx - 1) + 1\n      continue\n    }\n\n    var key = str.slice(index, eqIdx).trim()\n\n    // only assign once\n    if (undefined === obj[key]) {\n      var val = str.slice(eqIdx + 1, endIdx).trim()\n\n      // quoted values\n      if (val.charCodeAt(0) === 0x22) {\n        val = val.slice(1, -1)\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n\n    index = endIdx + 1\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    var expires = opt.expires\n\n    if (!isDate(expires) || isNaN(expires.valueOf())) {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + expires.toUTCString()\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.partitioned) {\n    str += '; Partitioned'\n  }\n\n  if (opt.priority) {\n    var priority = typeof opt.priority === 'string'\n      ? opt.priority.toLowerCase()\n      : opt.priority\n\n    switch (priority) {\n      case 'low':\n        str += '; Priority=Low'\n        break\n      case 'medium':\n        str += '; Priority=Medium'\n        break\n      case 'high':\n        str += '; Priority=High'\n        break\n      default:\n        throw new TypeError('option priority is invalid')\n    }\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * URL-decode string value. Optimized to skip native call when no %.\n *\n * @param {string} str\n * @returns {string}\n */\n\nfunction decode (str) {\n  return str.indexOf('%') !== -1\n    ? decodeURIComponent(str)\n    : str\n}\n\n/**\n * URL-encode value.\n *\n * @param {string} val\n * @returns {string}\n */\n\nfunction encode (val) {\n  return encodeURIComponent(val)\n}\n\n/**\n * Determine if value is a Date.\n *\n * @param {*} val\n * @private\n */\n\nfunction isDate (val) {\n  return __toString.call(val) === '[object Date]' ||\n    val instanceof Date\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n","export type objectType = {\n  [key: string]: any;\n};\n\ntype AllKeyOf<K> = K extends never ? never : keyof K;\n\ntype RequireField<T, K> = { [P in Extract<keyof T, K>]: T[P] };\n\ntype OptionalField<T, K> = { [P in Exclude<keyof T, K>]?: T[P] };\n\nexport type RequireSomeField<T, K extends AllKeyOf<T>> = T extends never\n  ? never\n  : OptionalField<T, K> & RequireField<T, K>;\n\nexport type ExtractTypeFromArray<T> = T extends (infer U)[] ? U : never;\n\nexport enum KEY_COOKIE {\n  PASSWORD_TOUR = 'passwordTour',\n  LIST_PROJECT_PASS_GUARD = 'listProjectGuardOpened',\n  LIST_FORM_CAPTURE_OPENED = 'listFormCaptureOpened',\n}\n"],"names":["decode","str","indexOf","decodeURIComponent","exports","Q","options","obj","dec","opt","index","length","eqIdx","endIdx","lastIndexOf","key","slice","trim","undefined","val","charCodeAt","tryDecode","e","Object","prototype","toString","KEY_COOKIE"],"sourceRoot":""}