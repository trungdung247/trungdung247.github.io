{"version":3,"file":"static/chunks/886.afc7b11187f1835a.js","mappings":"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","sources":["webpack://_N_E/./containers/Home/themes/ThemeDefault/ListScene.tsx","webpack://_N_E/<anon>"],"sourcesContent":["import {\n  selectListGroup,\n  selectListSceneByGroup,\n  selectSceneSelected,\n  selectThemeConfigGlobal,\n} from '@containers/Home/selectors';\nimport { I_Scene } from '@containers/Home/types';\nimport { toggleItemArrs } from '@utils/helper';\nimport React, { memo, useEffect, useState, useCallback, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { ListSceneWrapper } from './styled';\n\ninterface Props {\n  isShowListScene: boolean;\n  setIsShowListScene: React.Dispatch<React.SetStateAction<boolean>>;\n  onChangeScene: (scene: I_Scene) => void;\n}\n\nexport const ListScene = memo(\n  ({ isShowListScene, setIsShowListScene, onChangeScene }: Props) => {\n    const containerRef = useRef<HTMLDivElement | null>(null!);\n    const sceneActiveRef = useRef<HTMLDivElement | null>(null!);\n\n    const listGroup = useSelector(selectListGroup);\n    const listScene = useSelector(selectListSceneByGroup);\n    const sceneSelected = useSelector(selectSceneSelected);\n    const themeConfig = useSelector(selectThemeConfigGlobal);\n\n    const [listGroupCollapse, setListGroupCollapse] = useState<string[]>([]);\n\n    const onToggleCollapse = useCallback(\n      id => {\n        const listXor = toggleItemArrs(listGroupCollapse, id);\n        setListGroupCollapse(listXor);\n      },\n      [listGroupCollapse],\n    );\n\n    const onOpenListScene = e => {\n      e.stopPropagation();\n      setIsShowListScene(true);\n    };\n\n    const onCloseListScene = e => {\n      e.stopPropagation();\n      setIsShowListScene(false);\n    };\n\n    useEffect(() => {\n      if (containerRef.current && sceneActiveRef.current && !isShowListScene)\n        containerRef.current.scrollTo({\n          top: sceneActiveRef.current.offsetTop - 50,\n          behavior: 'smooth',\n        });\n      // sceneActiveRef.current.scrollTo();\n    }, [isShowListScene, sceneSelected?.id]);\n\n    return (\n      <ListSceneWrapper\n        id=\"themeListScene\"\n        onMouseOver={onOpenListScene}\n        onMouseLeave={onCloseListScene}\n        className={`${\n          themeConfig?.selected === 'defaultNew' ? 'variant-palette' : ''\n        } leftSidebar ${isShowListScene ? 'active' : ''}`}\n        onTouchStart={onCloseListScene}\n      >\n        <div\n          className={`closeBtn ${isShowListScene ? 'show' : 'hide'}`}\n          onClick={onCloseListScene}\n        >\n          <i aria-hidden className=\"fal fa-times\" />\n        </div>\n        <div className=\"galleryDots\" onClick={onOpenListScene}>\n          {listScene.map(item => (\n            <span\n              key={item.id}\n              className={item.id === sceneSelected?.id ? 'active' : ''}\n            />\n          ))}\n        </div>\n        <div\n          className=\"gallery\"\n          ref={containerRef}\n          onTouchStart={e => {\n            e.stopPropagation();\n          }}\n        >\n          {listGroup.map(item => (\n            <div key={item.id} className=\"galleryGroup\">\n              {item.name !== 'Uncategory' && (\n                <div\n                  className=\"galleryGroupName\"\n                  onClick={e => {\n                    e.stopPropagation();\n                    onToggleCollapse(item.id);\n                  }}\n                >\n                  <h5>{item.name}</h5>\n                  <i\n                    className={`fal fa-angle-${\n                      listGroupCollapse.indexOf(item.id) > -1 ? 'up' : 'down'\n                    }`}\n                  />\n                </div>\n              )}\n              {!!item.scenes.length && (\n                <div\n                  className={`galleryThumb ${\n                    listGroupCollapse.indexOf(item.id) > -1 ? 'hide' : 'show'\n                  }`}\n                >\n                  {item.scenes.map(scene => (\n                    <div\n                      key={scene.id}\n                      className={`galleryImg ${\n                        sceneSelected?.id === scene.id ? 'active' : ''\n                      }`}\n                      ref={node => {\n                        if (sceneSelected?.id === scene.id)\n                          sceneActiveRef.current = node;\n                      }}\n                      onClick={e => {\n                        e.stopPropagation();\n                        onChangeScene(scene);\n                      }}\n                    >\n                      <img\n                        src={scene.screenshot || scene.media?.src_thumb || ''}\n                        alt=\"\"\n                      />\n                      <h2 className=\"--menuSceneTitle\">{scene.title}</h2>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n      </ListSceneWrapper>\n    );\n  },\n);\n\nexport default ListScene;\n"],"names":["ListScene","memo","param","isShowListScene","setIsShowListScene","onChangeScene","containerRef","useRef","sceneActiveRef","listGroup","useSelector","selectListGroup","listScene","selectListSceneByGroup","sceneSelected","selectSceneSelected","themeConfig","selectThemeConfigGlobal","useState","listGroupCollapse","setListGroupCollapse","onToggleCollapse","useCallback","id","toggleItemArrs","onOpenListScene","e","stopPropagation","onCloseListScene","useEffect","current","scrollTo","top","offsetTop","behavior","react_jsx_runtime__WEBPACK_IMPORTED_MODULE_0__","jsxs","ListSceneWrapper","onMouseOver","onMouseLeave","className","selected","concat","onTouchStart","jsx","div","onClick","i","aria-hidden","map","item","span","ref","name","h5","indexOf","scenes","length","scene","node","img","src","screenshot","media","src_thumb","alt","h2","title","__webpack_exports__"],"sourceRoot":""}