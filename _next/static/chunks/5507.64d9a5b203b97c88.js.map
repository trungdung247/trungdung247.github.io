{"version":3,"file":"static/chunks/5507.64d9a5b203b97c88.js","mappings":"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","sources":["webpack://_N_E/./components/LoadingContainer/styled.ts","webpack://_N_E/./components/LoadingContainer/index.tsx","webpack://_N_E/./containers/Home/global/TourStats.tsx","webpack://_N_E/./containers/Home/hook/useKrpano.tsx","webpack://_N_E/./containers/Home/hook/useLeadFormCapture.tsx","webpack://_N_E/./containers/Home/styled.tsx","webpack://_N_E/./containers/Home/hook/useCheckPasswordTour.tsx","webpack://_N_E/./containers/Home/index.tsx","webpack://_N_E/./utils/ga.ts","webpack://_N_E/./utils/hooks/useGoogleAnalytics.tsx","webpack://_N_E/<anon>"],"sourcesContent":["/**\n *\n * styled LoadingContainer\n *\n */\nimport styled from 'styled-components';\n\nexport const LoadingContainerWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  .ant-spin {\n    color: #d1005c;\n    &-container {\n      width: 100%;\n      height: 100%;\n    }\n    &-nested-loading {\n      width: 100%;\n      height: 100%;\n      > div > .ant-spin {\n        width: 100%;\n        height: 100%;\n        max-height: 100%;\n      }\n    }\n  }\n`;\n","/**\n *\n * LoadingContainer\n *\n */\nimport React, { memo } from 'react';\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { Spin } from 'antd';\nimport { LoadingContainerWrapper } from './styled';\n\ninterface Props {\n  loading?: boolean;\n  description?: string;\n  children?: React.ReactNode;\n}\n\nconst antIcon = <LoadingOutlined style={{ fontSize: 24 }} spin />;\n\nexport const LoadingContainer = memo(\n  ({ loading = false, description = '', children }: Props) => {\n    return (\n      <LoadingContainerWrapper>\n        <Spin indicator={antIcon} tip={description} spinning={loading}>\n          {children}\n        </Spin>\n      </LoadingContainerWrapper>\n    );\n  },\n);\n\nexport default LoadingContainer;\n","import { Type_RefFuncKrpano } from '@components/Krpano/types';\nimport { createGlobalState } from 'react-hooks-global-state';\nimport { I_CommentScene, I_PayloadCommentScene } from '../types';\n\nconst { useGlobalState: useVLookatKrpano } = createGlobalState<{\n  vlookat?: number;\n}>({ vlookat: undefined });\n\nconst { useGlobalState: useHLookatKrpano } = createGlobalState<{\n  hlookat?: number;\n}>({ hlookat: undefined });\n\nconst { useGlobalState: useZoomKrpano } = createGlobalState<{ zoom?: number }>({\n  zoom: undefined,\n});\n\nconst { useGlobalState: useCollaborationMode } = createGlobalState<{\n  loading: boolean;\n  krpanoRef: Type_RefFuncKrpano | null;\n  commentSceneSelected: I_CommentScene | null;\n  isShowDialogCreateCommentScene: boolean;\n  commentSceneTemporary: I_PayloadCommentScene | null;\n}>({\n  loading: false,\n  krpanoRef: null,\n  commentSceneSelected: null,\n  isShowDialogCreateCommentScene: false,\n  commentSceneTemporary: null,\n});\n\nconst { useGlobalState: useTourStats } = createGlobalState<{\n  stats: {\n    isShowControlbar: boolean;\n    btnDirectionActive: string;\n    isGyroscopeAvailable: boolean;\n  };\n}>({\n  stats: {\n    isShowControlbar: true, // for theme\n    btnDirectionActive: '',\n    isGyroscopeAvailable: false,\n  },\n});\n\nconst { useGlobalState: useTourEventState } = createGlobalState<{\n  state: {\n    isLoaded: boolean;\n    idPostProjectSelected: string;\n    visibleDialogPostProject: boolean;\n    idPostSceneSelected: string;\n    visibleDialogPostScene: boolean;\n    isSoundOnScene: boolean;\n    isVisibleDollhouse: boolean;\n    isVisibleMap: boolean;\n    isVisibleFloorplan: boolean;\n    isVisiblePopupIntro?: boolean;\n    isActiveModeMultipleStaging: boolean;\n    descriptionHotspotSelected?: string;\n  };\n}>({\n  state: {\n    isLoaded: false,\n    //\n    idPostProjectSelected: '',\n    visibleDialogPostProject: false,\n    //\n    idPostSceneSelected: '',\n    visibleDialogPostScene: false,\n    isSoundOnScene: false,\n    //\n    isVisibleMap: true,\n    isVisibleFloorplan: true,\n    isVisibleDollhouse: false,\n    isVisiblePopupIntro: undefined,\n    isActiveModeMultipleStaging: false,\n    // hotspot compact when hover\n    descriptionHotspotSelected: undefined,\n  },\n});\n\nexport {\n  useTourStats,\n  useZoomKrpano,\n  useHLookatKrpano,\n  useVLookatKrpano,\n  useTourEventState,\n  useCollaborationMode,\n};\n","import { Type_RefFuncKrpano } from '@components/Krpano/types';\nimport { useCallback, useMemo, useRef, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { I_Group, I_Hotspot, I_Scene } from '@containers/Home/types';\nimport { useLeadFormCapture } from '@containers/Home/hook/useLeadFormCapture';\nimport { useTourEventState, useTourStats } from '../global/TourStats';\nimport {\n  selectConfigAutoChangeScene,\n  selectConfigAutoRotate,\n  selectConfigMap,\n  selectDetailFirstScene,\n  selectDetailProject,\n  selectDollhouseConfigGlobal,\n  selectDollhouseProject,\n  selectLanguagesProject,\n  selectListFloorplan,\n  selectListGroup,\n  selectListScene,\n  selectSceneSelected,\n} from '../selectors';\nimport { actions } from '../slice';\nimport { separateColorAndTransparency } from '@utils/helper';\nimport { HOTSPOT_COLOR_DOLLHOUSE_DEFAULT } from '../constants';\n\ninterface Props {\n  krpanoRef: Type_RefFuncKrpano | null;\n}\n\nexport const useKrpano = ({ krpanoRef }: Props) => {\n  const dispatch = useDispatch();\n  const configAutoRotate = useSelector(selectConfigAutoRotate);\n  const configAutoChangeScene = useSelector(selectConfigAutoChangeScene);\n  const detailFirstScene = useSelector(selectDetailFirstScene);\n  const detailProject = useSelector(selectDetailProject);\n  const listGroup = useSelector(selectListGroup);\n  const listScene = useSelector(selectListScene);\n  const sceneSelected = useSelector(selectSceneSelected);\n  const listFloorplan = useSelector(selectListFloorplan);\n  const configMap = useSelector(selectConfigMap);\n  const languagesProject = useSelector(selectLanguagesProject);\n  const dollhouse = useSelector(selectDollhouseProject);\n  const dollhouseConfigGlobal = useSelector(selectDollhouseConfigGlobal);\n\n  const [, setTourStats] = useTourStats('stats');\n  const [tourEventStats, setTourEventState] = useTourEventState('state');\n  const { onCheckShowFormCaptureOnHotspot } = useLeadFormCapture({});\n  const configAutoChangeSceneRef = useRef<typeof configAutoChangeScene>(null!);\n\n  const isExistSound = useMemo(\n    () =>\n      sceneSelected?.hotspots?.some(\n        item =>\n          (item.type === 'sound' &&\n            (item.config?.sound?.file || item.config?.sound?.url)) ||\n          (item.type === 'instructor' && item.config?.instructor?.media) ||\n          (item.type === 'media' &&\n            item.config?.media?.type === 'media-video' &&\n            item.config?.media?.media?.src),\n      ) ||\n      !!detailProject?.background_sound ||\n      !!sceneSelected?.background_sound,\n    [detailProject, sceneSelected?.background_sound, sceneSelected?.hotspots],\n  );\n\n  const isShowIconInfoPlace = useMemo(\n    () => !!detailProject?.post,\n    [detailProject],\n  );\n\n  const isShowIconInfoScene = useMemo(\n    () => !!sceneSelected?.post,\n    [sceneSelected?.post],\n  );\n\n  const isShowIconMap = useMemo(() => !!configMap?.isEnabled, [configMap]);\n\n  const isShowIconFloorplan = useMemo(\n    () => !!listFloorplan.length,\n    [listFloorplan],\n  );\n\n  const isShowIconMultipleStaging = useMemo(\n    () =>\n      !!(\n        sceneSelected?.mode === 'staging' &&\n        sceneSelected?.staging?.length &&\n        sceneSelected?.staging?.filter(item => item.media).length &&\n        !!sceneSelected?.configStaging?.modeDisplay\n      ),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [sceneSelected?.id],\n  );\n\n  const isShowIconSoundProject = useMemo(() => isExistSound, [isExistSound]);\n\n  const isShowIconSoundScene = useMemo(\n    () => !!sceneSelected?.background_sound,\n    [sceneSelected],\n  );\n\n  const isShowIconDollhouse = useMemo(\n    () => !!dollhouse?.obj_path,\n    [dollhouse?.obj_path],\n  );\n\n  // NOTE: play change scene\n  const isShowIconChangeScene = useMemo(\n    () => configAutoChangeScene.enabled,\n    [configAutoChangeScene],\n  );\n  const isChangeScene = useMemo(\n    () => configAutoChangeScene.on,\n    [configAutoChangeScene],\n  );\n\n  // NOTE: rotate\n  const isShowIconRotate = useMemo(\n    () => configAutoRotate.enabled,\n    [configAutoRotate],\n  );\n  const isRotate = useMemo(() => configAutoRotate.on, [configAutoRotate]);\n  const waitTimeAutoRotate = useMemo(\n    () => configAutoRotate.waitTime,\n    [configAutoRotate],\n  );\n  const speedAutoRotate = useMemo(\n    () => configAutoRotate.speed,\n    [configAutoRotate],\n  );\n\n  // NOTE: dollhouse\n  const dollhouseXml = useMemo(() => {\n    const hotspotColor = separateColorAndTransparency(\n      dollhouseConfigGlobal?.hotspotColor || HOTSPOT_COLOR_DOLLHOUSE_DEFAULT,\n    );\n    return dollhouse\n      ? `<scene name=\"dollhouse\">\n            <image>\n              <depthmap encoding='rgb24' rendermode=\"3dmodel\" scale=\"5\" textured=\"true\" url=\"${dollhouse?.obj_path}\" />\n            </image>\n            ${listScene\n              .filter(item => item.dollhouseData?.mesh)\n              .reduce((result, item) => {\n                result += `\n                  <hotspot\n                    name=\"hotspot_dollhouse_${\n                      item.id\n                    }\" type=\"text\" distorted=\"true\" depth=\"0\" depthbuffer=\"true\" rotationorder=\"xzy\"\n                    width=\"40\" height=\"40\" bgcolor=\"${hotspotColor.color.replace(\n                      '#',\n                      '0x',\n                    )}\" roundedge=\"20\"\n                    tx=\"${item.dollhouseData?.tx}\" ty=\"${item.dollhouseData\n                      ?.ty}\" tz=\"${item.dollhouseData\n                      ?.tz}\" rx=\"-90.0\" ry=\"-0.0\" rz=\"0.0\"\n                    onclick=\"set(is_dollhouse_view, false); tween(view.oz, 0.0, 1.75); set(control.invert,false);\n                    if (global.customtransition != 'SKIP', if(global.customtransition !== null, global.customtransition();,\n\t\t\t\t              tween(view.tx|view.ty|view.tz, calc(${\n                        item.dollhouseData.tx\n                      } + '|' + ${item.dollhouseData.ty} + '|' + ${\n                        item.dollhouseData.tz\n                      }), 1.75, easeinoutsine););); delete(global.customtransition); delete(global.customtransitiontime);\n\t                  wait(1.25);\n                    tween(layer[depthmap_walkinfo].alpha, 0.0, 0.25); removelayer('popup_close_x'); set(sceneId, '${\n                      item.id\n                    }'); events.dispatch('onnewpanovr');\"\n                    bgshadow=\"0 0 3 ${hotspotColor.color.replace(\n                      '#',\n                      '0x',\n                    )} 0.5\"\n                    onover=\"tween(scale,1);\"\n                    onout=\"tween(scale,0.7);\"\n                    alpha=\"1\" scale=\"0.7\"\n                  />`;\n                return result;\n              }, '')}\n          </scene>`\n      : null;\n  }, [dollhouse, dollhouseConfigGlobal?.hotspotColor, listScene]);\n\n  useEffect(() => {\n    configAutoChangeSceneRef.current = configAutoChangeScene;\n  }, [configAutoChangeScene]);\n\n  const onClickHotspot = useCallback(\n    ({ hotspot }) => onCheckShowFormCaptureOnHotspot(hotspot),\n    [onCheckShowFormCaptureOnHotspot],\n  );\n\n  const onChangeAutoChangeScene = useCallback(\n    on => {\n      if (\n        configAutoChangeSceneRef.current?.enabled &&\n        configAutoChangeSceneRef.current?.on !== on\n      )\n        dispatch(actions.setConfigAutoChangeScene({ on }));\n    },\n    [dispatch],\n  );\n\n  const onToFirstScene = useCallback(() => {\n    dispatch(actions.setSceneSelected(detailFirstScene));\n  }, [detailFirstScene, dispatch]);\n\n  const onChangeLanguageProject = useCallback(\n    (id: string) => {\n      const language = languagesProject.find(item => item.id === id);\n      language && dispatch(actions.setLanguageProjectSelected(language));\n    },\n    [dispatch, languagesProject],\n  );\n\n  // NOTE: event krpano controlbar\n  const onUp = useCallback(() => {\n    setTourStats(prev => ({ ...prev, btnDirectionActive: 'top' }));\n    krpanoRef?.toUp();\n  }, [krpanoRef, setTourStats]);\n\n  const onLeft = useCallback(() => {\n    setTourStats(prev => ({ ...prev, btnDirectionActive: 'left' }));\n    krpanoRef?.toLeft();\n  }, [krpanoRef, setTourStats]);\n\n  const onDown = useCallback(() => {\n    setTourStats(prev => ({ ...prev, btnDirectionActive: 'bottom' }));\n    krpanoRef?.toDown();\n  }, [krpanoRef, setTourStats]);\n\n  const onRight = useCallback(() => {\n    setTourStats(prev => ({ ...prev, btnDirectionActive: 'right' }));\n    krpanoRef?.toRight();\n  }, [krpanoRef, setTourStats]);\n\n  const onVR = useCallback(() => krpanoRef?.viewWebvr(), [krpanoRef]);\n\n  const onViewNormal = useCallback(() => {\n    krpanoRef?.viewNormal();\n  }, [krpanoRef]);\n\n  const onViewPlannet = useCallback(() => {\n    krpanoRef?.viewPlanet();\n  }, [krpanoRef]);\n\n  const onViewMirrorBall = useCallback(() => {\n    krpanoRef?.viewMirrorBall();\n  }, [krpanoRef]);\n\n  const onToggleGyro = useCallback(() => {\n    krpanoRef?.toggleGyro();\n  }, [krpanoRef]);\n\n  const onRemoveAllChevronHotspot = useCallback(\n    (hotspots: I_Hotspot[]) => krpanoRef?.removeAllChevronHotspot(hotspots),\n    [krpanoRef],\n  );\n\n  const onStopRotate = useCallback(() => {\n    dispatch(actions.setConfigAutoRotate({ on: false }));\n    krpanoRef?.stopAutoRotate();\n  }, [dispatch, krpanoRef]);\n\n  const onStartRotate = useCallback(() => {\n    dispatch(actions.setConfigAutoRotate({ on: true }));\n    krpanoRef?.startAutoRotate({\n      speed: speedAutoRotate,\n      wait_time: waitTimeAutoRotate,\n    });\n  }, [dispatch, krpanoRef, speedAutoRotate, waitTimeAutoRotate]);\n\n  const onToggleRotate = useCallback(() => {\n    if (!isRotate) onStartRotate();\n    else onStopRotate();\n  }, [isRotate, onStartRotate, onStopRotate]);\n\n  const onStopVertical = useCallback(() => {\n    setTourStats(prev => ({ ...prev, btnDirectionActive: '' }));\n    krpanoRef?.stopToVertical();\n  }, [krpanoRef, setTourStats]);\n\n  const onStopHorizontal = useCallback(() => {\n    setTourStats(prev => ({ ...prev, btnDirectionActive: '' }));\n    krpanoRef?.stopToHorizontal();\n  }, [krpanoRef, setTourStats]);\n\n  const onFullscreen = useCallback(() => {\n    krpanoRef?.viewFullscreen();\n  }, [krpanoRef]);\n\n  const onTurnOnScreenshotCapture = useCallback(() => {\n    krpanoRef?.call('show_snapshot(true)');\n  }, [krpanoRef]);\n\n  // NOTE: sound hotspot\n  const onStartHotspotSound = useCallback(() => {\n    krpanoRef?.triggerSound();\n  }, [krpanoRef]);\n\n  const onStopHotspotSound = useCallback(() => {\n    krpanoRef?.destroySound();\n  }, [krpanoRef]);\n\n  const onUnmuteHotspotSound = useCallback(() => {\n    sceneSelected && krpanoRef?.unmuteAllSound(sceneSelected);\n  }, [krpanoRef, sceneSelected]);\n\n  const onMuteHotspotSound = useCallback(() => {\n    sceneSelected && krpanoRef?.muteAllSound(sceneSelected);\n  }, [krpanoRef, sceneSelected]);\n\n  // NOTE: sound scene\n  const onSetSoundOnScene = useCallback(\n    isSoundOnScene =>\n      setTourEventState(prev => ({\n        ...prev,\n        isSoundOnScene,\n      })),\n    [setTourEventState],\n  );\n\n  // NOTE: mode multiple staging\n  const onToggleModeMultipleStaging = useCallback(\n    (active: boolean | undefined = undefined) => {\n      setTourEventState(prev => ({\n        ...prev,\n        isActiveModeMultipleStaging:\n          active === undefined ? !prev.isActiveModeMultipleStaging : active,\n      }));\n    },\n    [setTourEventState],\n  );\n\n  const onTurnOnSoundScene = useCallback(\n    () => onSetSoundOnScene(true),\n    [onSetSoundOnScene],\n  );\n\n  const onTurnOffSoundScene = useCallback(\n    () => onSetSoundOnScene(false),\n    [onSetSoundOnScene],\n  );\n\n  const onToggleSoundScene = useCallback(() => {\n    if (!tourEventStats.isSoundOnScene) onTurnOnSoundScene();\n    else onTurnOffSoundScene();\n  }, [onTurnOffSoundScene, onTurnOnSoundScene, tourEventStats.isSoundOnScene]);\n\n  // NOTE: sound project\n  const onTurnOnSoundProject = useCallback(() => {\n    onUnmuteHotspotSound();\n    dispatch(actions.setConfigSoundProject({ on: true }));\n  }, [dispatch, onUnmuteHotspotSound]);\n\n  const onTurnOffSoundProject = useCallback(() => {\n    onMuteHotspotSound();\n    dispatch(actions.setConfigSoundProject({ on: false }));\n  }, [dispatch, onMuteHotspotSound]);\n\n  // NOTE: info place tour\n  const onOpenDialogPostProject = useCallback(() => {\n    setTourEventState(prev => ({ ...prev, visibleDialogPostProject: true }));\n  }, [setTourEventState]);\n\n  const onCloseDialogPostProject = useCallback(() => {\n    setTourEventState(prev => ({ ...prev, visibleDialogPostProject: false }));\n  }, [setTourEventState]);\n\n  const onShowInfoPlace = useCallback(() => {\n    setTourEventState(prev => ({\n      ...prev,\n      idPostProjectSelected: detailProject?.post || '',\n    }));\n    onOpenDialogPostProject();\n  }, [detailProject, onOpenDialogPostProject, setTourEventState]);\n\n  // NOTE: info post scene\n  const onOpenDialogPostScene = useCallback(() => {\n    setTourEventState(prev => ({ ...prev, visibleDialogPostScene: true }));\n  }, [setTourEventState]);\n\n  const onCloseDialogPostScene = useCallback(() => {\n    setTourEventState(prev => ({\n      ...prev,\n      visibleDialogPostScene: false,\n    }));\n  }, [setTourEventState]);\n\n  const onToggleInfoScene = useCallback(\n    (isVisible: boolean | undefined = undefined) => {\n      if (sceneSelected?.post) {\n        if (\n          (isVisible !== undefined && isVisible) ||\n          !tourEventStats.visibleDialogPostScene\n        ) {\n          setTourEventState(prev => ({\n            ...prev,\n            idPostSceneSelected: sceneSelected?.post || '',\n          }));\n          onOpenDialogPostScene();\n        } else if (\n          (isVisible !== undefined && !isVisible) ||\n          tourEventStats.visibleDialogPostScene\n        )\n          onCloseDialogPostScene();\n      } else onCloseDialogPostScene();\n    },\n    [\n      tourEventStats,\n      setTourEventState,\n      sceneSelected?.post,\n      onOpenDialogPostScene,\n      onCloseDialogPostScene,\n    ],\n  );\n\n  const onToggleFloorplan = useCallback(() => {\n    setTourEventState(prev => ({\n      ...prev,\n      isVisibleFloorplan: !prev.isVisibleFloorplan,\n    }));\n  }, [setTourEventState]);\n\n  const onToggleMap = useCallback(() => {\n    setTourEventState(prev => ({\n      ...prev,\n      isVisibleMap: !prev.isVisibleMap,\n    }));\n  }, [setTourEventState]);\n\n  const onToggleDollhouseView = useCallback(() => {\n    setTourEventState(prev => ({\n      ...prev,\n      isVisibleDollhouse: krpanoRef?.get('is_dollhouse_view') ? false : true,\n    }));\n    krpanoRef?.set('sceneId', sceneSelected?.id);\n    krpanoRef?.call(\n      krpanoRef?.get('is_dollhouse_view')\n        ? 'reset_view()'\n        : 'dollhouse_view(false)',\n    );\n  }, [krpanoRef, sceneSelected?.id, setTourEventState]);\n\n  // UTILS\n\n  const onGenerateXMLMenuThumbnailOnVR = useCallback(() => {\n    let xml = '<krpano thumbready=\"0\">';\n\n    function generateSceneXml(\n      scene: I_Scene,\n      group: I_Group | undefined = undefined,\n    ) {\n      return `<scene name=\"scene_${scene.id}\" title=\"${scene.title\n        .replaceAll('&', '&amp;')\n        .replaceAll('<', '&lt;')\n        .replaceAll('>', '&gt;')\n        .replaceAll(`'`, '&apos;')\n        .replaceAll('\"', '&quot;')}\" onstart=\"set(sceneId, '${\n        scene.id\n      }'); trace(${scene.id}); events.dispatch('onnewpanovr');\" thumburl=\"${\n        scene.media.src_thumb || scene.media.src_preview\n      }\" lat=\"\" lng=\"\" alt=\"\" heading=\"\" group=\"${\n        group ? 'group_' + group?.id : ``\n      }\" nogrid=\"false\"/>`;\n    }\n\n    if (listGroup.length === 1 && listGroup[0].id === 'uncategory') {\n      listGroup[0].scenes.forEach(scene => {\n        xml += generateSceneXml(scene);\n      });\n    } else {\n      xml += ``;\n      listGroup.forEach(group => {\n        // xml += `<panoramagroup name=\"group_${group.id}\" title=\"Title: ${group.name}\" description=\"\" mainscene=\"${group.scenes[0].id}\" thumburl=\"${group.scenes[0].media?.src_thumb}\" />`;\n        group.scenes.forEach(scene => {\n          xml += generateSceneXml(scene);\n        });\n      });\n    }\n    xml += '</krpano>';\n\n    return xml;\n  }, [listGroup]);\n\n  return useMemo(\n    () => ({\n      onUp,\n      onDown,\n      onLeft,\n      onRight,\n      onVR,\n      onToggleGyro,\n      onViewNormal,\n      onViewPlannet,\n      onViewMirrorBall,\n      onStopVertical,\n      onStopHorizontal,\n      onFullscreen,\n      onToFirstScene,\n      onTurnOnScreenshotCapture,\n      onRemoveAllChevronHotspot,\n      // multi-language project\n      languagesProject,\n      onChangeLanguageProject,\n      // rotate\n      isRotate,\n      onStopRotate,\n      onToggleRotate,\n      onStartRotate,\n      isShowIconRotate,\n      //\n      onClickHotspot,\n      // auto change scene\n      isChangeScene,\n      isShowIconChangeScene,\n      onChangeAutoChangeScene,\n      // info tour\n      onShowInfoPlace,\n      onOpenDialogPostProject,\n      onCloseDialogPostProject,\n      isShowIconInfoPlace,\n      // info tour\n      onToggleInfoScene,\n      onOpenDialogPostScene,\n      onCloseDialogPostScene,\n      isShowIconInfoScene,\n      // sound\n      isExistSound,\n      // sound scene\n      onSetSoundOnScene,\n      onTurnOnSoundScene,\n      onToggleSoundScene,\n      onTurnOffSoundScene,\n      isShowIconSoundScene,\n      // sound hotspot\n      onStartHotspotSound,\n      onStopHotspotSound,\n      // sound project\n      onTurnOnSoundProject,\n      onTurnOffSoundProject,\n      isShowIconSoundProject,\n      // map\n      isShowIconMap,\n      onToggleMap,\n      // floorplan\n      isShowIconFloorplan,\n      onToggleFloorplan,\n      // multiple staging\n      isShowIconMultipleStaging,\n      onToggleModeMultipleStaging,\n      // dollhouse\n      dollhouseXml,\n      isShowIconDollhouse,\n      onToggleDollhouseView,\n      //\n      onGenerateXMLMenuThumbnailOnVR,\n    }),\n    [\n      onUp,\n      onDown,\n      onLeft,\n      onRight,\n      onVR,\n      onToggleGyro,\n      onViewNormal,\n      onViewPlannet,\n      onViewMirrorBall,\n      onStopVertical,\n      onStopHorizontal,\n      onFullscreen,\n      onToFirstScene,\n      languagesProject,\n      onChangeLanguageProject,\n      onTurnOnScreenshotCapture,\n      onRemoveAllChevronHotspot,\n      isRotate,\n      onStopRotate,\n      onToggleRotate,\n      onStartRotate,\n      isShowIconRotate,\n      onClickHotspot,\n      isChangeScene,\n      isShowIconChangeScene,\n      onChangeAutoChangeScene,\n      onShowInfoPlace,\n      onOpenDialogPostProject,\n      onCloseDialogPostProject,\n      isShowIconInfoPlace,\n      onToggleInfoScene,\n      onOpenDialogPostScene,\n      onCloseDialogPostScene,\n      isShowIconInfoScene,\n      isExistSound,\n      onSetSoundOnScene,\n      onTurnOnSoundScene,\n      onToggleSoundScene,\n      onTurnOffSoundScene,\n      isShowIconSoundScene,\n      onStartHotspotSound,\n      onStopHotspotSound,\n      onTurnOnSoundProject,\n      onTurnOffSoundProject,\n      isShowIconSoundProject,\n      isShowIconMap,\n      onToggleMap,\n      isShowIconFloorplan,\n      onToggleFloorplan,\n      isShowIconMultipleStaging,\n      onToggleModeMultipleStaging,\n      dollhouseXml,\n      isShowIconDollhouse,\n      onToggleDollhouseView,\n      onGenerateXMLMenuThumbnailOnVR,\n    ],\n  );\n};\n","import {\n  selectFormCaptureSelected,\n  selectFormCaptureConfigSelected,\n  selectListSceneIdToOpenFormCapture,\n  selectListHotspotIdToOpenFormCapture,\n  selectListHotspotTypeToOpenFormCapture,\n  selectListFormCaptureConfigCorrespondingToListSceneId,\n  selectListFormCaptureConfigCorrespondingToListHotspotId,\n  selectListFormCaptureConfigCorrespondingToListHotspotType,\n  selectIsVisibleFormCapture,\n  selectHotspotSelectedTemporary,\n  selectFormCaptureConfigGlobal,\n} from '@containers/Home/selectors';\nimport { actions } from '@containers/Home/slice';\nimport {\n  I_FormCaptureConfig,\n  I_Hotspot,\n  I_Scene,\n} from '@containers/Home/types';\nimport { KEY_COOKIE } from '@type/customType';\nimport { isServer } from '@utils/helper';\nimport { parse } from 'cookie';\nimport { useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\ninterface Props {\n  listFormCaptureOpenedCookie?: string;\n}\n\nexport const useLeadFormCapture = ({\n  listFormCaptureOpenedCookie = '[]',\n}: Props) => {\n  const dispatch = useDispatch();\n\n  const isVisibleFormCapture = useSelector(selectIsVisibleFormCapture);\n\n  const formCaptureSelected = useSelector(selectFormCaptureSelected);\n  const formCaptureConfigSelected = useSelector(\n    selectFormCaptureConfigSelected,\n  );\n  const formCaptureConfigGlobal = useSelector(selectFormCaptureConfigGlobal);\n  const hotspotSelectedTemporary = useSelector(selectHotspotSelectedTemporary);\n\n  const listSceneIdToOpenFormCapture = useSelector(\n    selectListSceneIdToOpenFormCapture,\n  );\n  const listFormCaptureConfigCorrespondingToListSceneId = useSelector(\n    selectListFormCaptureConfigCorrespondingToListSceneId,\n  );\n\n  const listHotspotIdToOpenFormCapture = useSelector(\n    selectListHotspotIdToOpenFormCapture,\n  );\n  const listFormCaptureConfigCorrespondingToListHotspotId = useSelector(\n    selectListFormCaptureConfigCorrespondingToListHotspotId,\n  );\n\n  const listHotspotTypeToOpenFormCapture = useSelector(\n    selectListHotspotTypeToOpenFormCapture,\n  );\n  const listFormCaptureConfigCorrespondingToListHotspotType = useSelector(\n    selectListFormCaptureConfigCorrespondingToListHotspotType,\n  );\n\n  const cookies = useCallback(\n    () => (!isServer ? parse(document.cookie) : {} || {}),\n    [],\n  );\n\n  const onGetListFormCaptureIdOpened = useCallback(\n    () =>\n      JSON.parse(\n        (isServer\n          ? listFormCaptureOpenedCookie\n          : cookies()[KEY_COOKIE.LIST_FORM_CAPTURE_OPENED] || '[]') || '[]',\n      ),\n    [cookies, listFormCaptureOpenedCookie],\n  );\n\n  const onOpenFormCapture = useCallback(\n    (\n      formCaptureConfig: I_FormCaptureConfig,\n      isEventHotspotClick = false,\n      hotspot: I_Hotspot | undefined = undefined,\n    ) => {\n      const listFormCaptureOpened = onGetListFormCaptureIdOpened();\n      const isOpened =\n        listFormCaptureOpened.indexOf(formCaptureConfig?.form) > -1;\n      if (!isOpened) dispatch(actions.setIsVisibleFormCapture(true));\n      else if (isEventHotspotClick && hotspot) {\n        dispatch(actions.setHotspotSelected(hotspot));\n        dispatch(actions.setHotspotSelectedTemporary(null));\n      } else dispatch(actions.setIsVisibleFormCapture(false));\n    },\n    [dispatch, onGetListFormCaptureIdOpened],\n  );\n\n  const onCloseFormCapture = useCallback(() => {\n    const listFormCaptureOpened = onGetListFormCaptureIdOpened();\n    if (listFormCaptureOpened.indexOf(formCaptureSelected?.id) === -1) {\n      if (!listFormCaptureOpened.length)\n        document.cookie = `${\n          KEY_COOKIE.LIST_FORM_CAPTURE_OPENED\n        }=${JSON.stringify([\n          formCaptureSelected?.id,\n        ])}; path=/; SameSite=None; Secure`;\n      else\n        document.cookie = `${\n          KEY_COOKIE.LIST_FORM_CAPTURE_OPENED\n        }=${JSON.stringify([\n          ...listFormCaptureOpened,\n          formCaptureSelected?.id,\n        ])}; path=/; SameSite=None; Secure`;\n    }\n    dispatch(actions.setIsVisibleFormCapture(false));\n    if (hotspotSelectedTemporary) {\n      dispatch(actions.setHotspotSelected(hotspotSelectedTemporary));\n      dispatch(actions.setHotspotSelectedTemporary(null));\n    }\n  }, [\n    dispatch,\n    formCaptureSelected,\n    hotspotSelectedTemporary,\n    onGetListFormCaptureIdOpened,\n  ]);\n\n  const onCheckShowFormCaptureOnHotspot = useCallback(\n    (item: I_Hotspot) => {\n      const indexOnListHotspotId = listHotspotIdToOpenFormCapture.indexOf(\n        item.id,\n      );\n      const indexOnListHotspotType = listHotspotTypeToOpenFormCapture.indexOf(\n        item.type,\n      );\n      if (indexOnListHotspotId !== -1) {\n        onOpenFormCapture(\n          listFormCaptureConfigCorrespondingToListHotspotId[\n            indexOnListHotspotId\n          ],\n          true,\n          item,\n        );\n        dispatch(\n          actions.setFormCaptureConfigSelelected(\n            listFormCaptureConfigCorrespondingToListHotspotId[\n              indexOnListHotspotId\n            ],\n          ),\n        );\n        dispatch(actions.setHotspotSelectedTemporary(item));\n      } else if (indexOnListHotspotType !== -1) {\n        const form =\n          listFormCaptureConfigCorrespondingToListHotspotType[\n            indexOnListHotspotType\n          ];\n        if (form) onOpenFormCapture(form, true, item);\n        dispatch(actions.setFormCaptureConfigSelelected(form));\n        dispatch(actions.setHotspotSelectedTemporary(item));\n      } else dispatch(actions.setHotspotSelected(item));\n    },\n    [\n      dispatch,\n      onOpenFormCapture,\n      listHotspotIdToOpenFormCapture,\n      listHotspotTypeToOpenFormCapture,\n      listFormCaptureConfigCorrespondingToListHotspotId,\n      listFormCaptureConfigCorrespondingToListHotspotType,\n    ],\n  );\n\n  const onCheckShowFormCaptureOnScene = useCallback(\n    (item: I_Scene) => {\n      const index = listSceneIdToOpenFormCapture.findIndex(\n        sceneId => sceneId === item.id,\n      );\n      if (index > -1) {\n        const form = listFormCaptureConfigCorrespondingToListSceneId[index];\n        if (form) onOpenFormCapture(form);\n        dispatch(actions.setFormCaptureConfigSelelected(form));\n      }\n    },\n    [\n      dispatch,\n      onOpenFormCapture,\n      listSceneIdToOpenFormCapture,\n      listFormCaptureConfigCorrespondingToListSceneId,\n    ],\n  );\n\n  const onCheckShowFormCaptureOnProject = useCallback(() => {\n    if (\n      formCaptureConfigSelected &&\n      formCaptureConfigSelected?.type === 'project'\n    )\n      setTimeout(\n        () => {\n          onOpenFormCapture(formCaptureConfigSelected);\n        },\n        (formCaptureConfigSelected.waitTime || 2) * 1000,\n      );\n    else dispatch(actions.setIsVisibleFormCapture(false));\n  }, [dispatch, formCaptureConfigSelected, onOpenFormCapture]);\n\n  return useMemo(\n    () => ({\n      onOpenFormCapture,\n      onCloseFormCapture,\n      formCaptureSelected,\n      isVisibleFormCapture,\n      formCaptureConfigGlobal,\n      formCaptureConfigSelected,\n      onCheckShowFormCaptureOnScene,\n      onCheckShowFormCaptureOnHotspot,\n      onCheckShowFormCaptureOnProject,\n    }),\n    [\n      onOpenFormCapture,\n      onCloseFormCapture,\n      formCaptureSelected,\n      isVisibleFormCapture,\n      formCaptureConfigGlobal,\n      formCaptureConfigSelected,\n      onCheckShowFormCaptureOnScene,\n      onCheckShowFormCaptureOnHotspot,\n      onCheckShowFormCaptureOnProject,\n    ],\n  );\n};\n","import styled, { css } from 'styled-components';\nimport {\n  BackgroundCover,\n  FlexColCenter,\n  FlexRowCenter,\n} from '@styles/global-styles';\n\nexport const HomeWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  background-color: #fefefe;\n  color: rgba(0, 0, 0, 0.75);\n  position: relative;\n  display: flex;\n  .mainContent {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n`;\n\nexport const HeaderWrapper = styled.div`\n  position: absolute;\n  width: 100%;\n  z-index: 10;\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0.5) 0%, rgba(0, 0, 0, 0));\n  padding: 0.25rem 0.75rem 1.5rem;\n  color: #fff;\n  ${FlexColCenter};\n  .title {\n    &-main {\n      font-weight: 500;\n      margin-top: 0.7rem;\n      margin-bottom: 0.7rem;\n      font-size: 0.9rem;\n      text-transform: uppercase;\n      letter-spacing: 0.06rem;\n      text-shadow: 0 1px 6px rgb(0 0 0 / 0.1);\n    }\n    &-extra {\n      ${FlexRowCenter};\n      font-size: 15px;\n      width: 100%;\n      &__scene {\n        font-size: 0.8rem;\n        font-weight: 300;\n        margin: 0 1.6rem;\n        margin-top: -0.25px;\n        text-shadow: 0 1px 6px rgb(0 0 0 / 0.35);\n        text-align: center;\n        /* font-family: 'Dancing Script', cursive; */\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        overflow: hidden;\n        max-width: 100%;\n      }\n      &__icon {\n        font-size: 1.1rem;\n        cursor: pointer;\n        transition: all 0.05;\n        i {\n          width: 1.9rem;\n          height: 1.2rem;\n          border: 1px solid rgb(255 255 255 / 0.6);\n          /* background: rgb(0 0 0 / 0.5); */\n          backdrop-filter: blur(10px);\n          /* border-radius: 6px; */\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          transition: var(--transition-smooth);\n          @media (hover: hover) and (pointer: fine) {\n            &:hover {\n              /* transform: scale(1.2, 1); */\n              background: #fff;\n              color: #212121;\n            }\n          }\n        }\n        &.prevIcon {\n        }\n        &.nextIcon {\n        }\n        @media (hover: hover) and (pointer: fine) {\n          &:hover {\n            text-shadow:\n              0 0 20px #fff,\n              0 0 30px #ff4da6,\n              0 0 40px #ff4da6,\n              0 0 50px #ff4da6,\n              0 0 60px #ff4da6,\n              0 0 70px #ff4da6,\n              0 0 80px #ff4da6;\n          }\n        }\n      }\n    }\n  }\n`;\n\nexport const ChangeSceneWrapper = styled.div<{ bgUrl: string; show: boolean }>`\n  ${BackgroundCover};\n  position: absolute;\n  width: 220px;\n  height: 100%;\n  z-index: 10;\n  cursor: pointer;\n  transition: transform 0.4s;\n  top: 0;\n  .navigation {\n    position: absolute;\n    width: 50px;\n    height: 50px;\n    top: 50%;\n    margin-top: -25px;\n    left: -25px;\n    cursor: pointer;\n    background: white;\n    transform: rotate(45deg);\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);\n    z-index: 11;\n    i {\n      position: absolute;\n      font-size: 24px;\n    }\n  }\n  .title {\n    position: absolute;\n    left: 3rem;\n    top: 50%;\n    transform: translateY(-50%);\n    color: #fff;\n    z-index: 15;\n    .subTitle {\n      font-size: 12px;\n      text-transform: uppercase;\n      letter-spacing: 1.5px;\n      opacity: 0.75;\n    }\n    .mainTitle {\n      /* font-family: 'Dancing Script', cursive; */\n      font-size: 1.25rem;\n    }\n  }\n  &:after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    background-color: black;\n    opacity: 0.75;\n  }\n`;\n\nexport const PrevSceneWrapper = styled(ChangeSceneWrapper)`\n  box-shadow: 12px 0px 24px rgba(0, 0, 0, 0.15);\n  border-right: 1px solid rgb(255 255 255 / 0.5);\n  left: 0;\n  transform: translateX(-100%);\n  transition: var(--transition-smooth);\n  .navigation {\n    right: -25px;\n    left: auto;\n    i {\n      ${props =>\n        props.show\n          ? css`\n              transform: translate(-50%, -50%) rotate(-45deg);\n              left: 50%;\n              top: 50%;\n            `\n          : css`\n              transform: rotate(135deg);\n              right: 10px;\n              left: auto;\n              top: 3px;\n            `}\n    }\n  }\n  .title {\n    right: 3rem;\n    text-align: right;\n    overflow: hidden;\n  }\n  ${props =>\n    props.show &&\n    css`\n      transform: none;\n    `}\n\n  @media(max-width: 768px) {\n    transform: translateX(-100%) !important;\n    .navigation i {\n      transform: rotate(-45deg) !important;\n      right: 10px !important;\n      top: 3px !important;\n      left: unset !important;\n    }\n  }\n`;\n\nexport const NextSceneWrapper = styled(ChangeSceneWrapper)`\n  box-shadow: -12px 0px 24px rgba(0, 0, 0, 0.15);\n  border-left: 1px solid rgb(255 255 255 / 0.5);\n  right: 0;\n  transform: translateX(100%);\n  transition: var(--transition-smooth);\n  .navigation {\n    i {\n      ${props =>\n        props.show\n          ? css`\n              transform: translate(-50%, -50%) rotate(-45deg);\n              left: 50%;\n              top: 50%;\n            `\n          : css`\n              transform: rotate(135deg);\n              left: 10px;\n              right: auto;\n              top: 20px;\n            `}\n    }\n  }\n  ${props =>\n    props.show &&\n    css`\n      transform: none;\n    `}\n\n  @media(max-width: 768px) {\n    transform: translateX(100%) !important;\n    .navigation i {\n      transform: rotate(-45deg) !important;\n      left: 10px !important;\n      top: 24px !important;\n    }\n  }\n`;\n\nexport const TourWrapper = styled.div`\n  width: 100%;\n  height: 100%;\n  position: relative;\n`;\n","import { KEY_COOKIE, objectType } from '@type/customType';\nimport { encryptText, isServer } from '@utils/helper';\nimport { parse } from 'cookie';\nimport { useCallback, useMemo, useState } from 'react';\nimport { I_Project, I_ProtectPasswordConfig } from '../types';\n\ninterface Props {\n  detailProject?: I_Project;\n  configProtectPassword?: I_ProtectPasswordConfig;\n  listProjectGuardOpenedCookie?: string;\n  passwordTourCookie?: string;\n}\n\nexport const useCheckPasswordTour = ({\n  detailProject,\n  configProtectPassword,\n  listProjectGuardOpenedCookie = '[]',\n  passwordTourCookie,\n}: Props) => {\n  const [isPasswordCorrectly, setIsPasswordCorrectly] = useState(false);\n\n  const cookies: () => objectType = useCallback(\n    () => (!isServer ? parse(document.cookie) : {} || {}),\n    [],\n  );\n\n  const listProjectGuardOpened = useMemo(\n    () =>\n      JSON.parse(\n        (isServer\n          ? listProjectGuardOpenedCookie\n          : cookies()[KEY_COOKIE.LIST_PROJECT_PASS_GUARD] || '[]') || '[]',\n      ),\n    [cookies, listProjectGuardOpenedCookie],\n  );\n\n  const isOpenGuardPassword = useMemo(() => {\n    if (configProtectPassword?.isEnabled && configProtectPassword?.password) {\n      const previousPassword = isServer\n        ? passwordTourCookie\n        : cookies()[KEY_COOKIE.PASSWORD_TOUR] || '';\n      const currentPassword = encryptText(configProtectPassword?.password);\n\n      if (!configProtectPassword?.isAlwaysAsk) {\n        if (\n          isPasswordCorrectly ||\n          (listProjectGuardOpened.indexOf(\n            encryptText(detailProject?.id || ''),\n          ) > -1 &&\n            previousPassword === currentPassword)\n        )\n          return false;\n        return true;\n      }\n      return !isPasswordCorrectly;\n    }\n\n    return false;\n  }, [\n    cookies,\n    detailProject,\n    passwordTourCookie,\n    isPasswordCorrectly,\n    configProtectPassword,\n    listProjectGuardOpened,\n  ]);\n\n  const onCheckGuardPassword = useCallback(() => {\n    setIsPasswordCorrectly(true);\n    if (!configProtectPassword?.isAlwaysAsk) {\n      document.cookie = `${KEY_COOKIE.PASSWORD_TOUR}=${encryptText(\n        configProtectPassword?.password || '',\n      )}; path=/; SameSite=None; Secure`;\n      const projectId = encryptText(detailProject?.id || '');\n      if (!listProjectGuardOpened.length)\n        document.cookie = `${\n          KEY_COOKIE.LIST_PROJECT_PASS_GUARD\n        }=${JSON.stringify([projectId])}; path=/; SameSite=None; Secure`;\n      else\n        document.cookie = `${\n          KEY_COOKIE.LIST_PROJECT_PASS_GUARD\n        }=${JSON.stringify(\n          Array.from(new Set([...listProjectGuardOpened, projectId])),\n        )}; path=/; SameSite=None; Secure`;\n    }\n  }, [configProtectPassword, detailProject, listProjectGuardOpened]);\n\n  return useMemo(\n    () => ({\n      isPasswordCorrectly,\n      setIsPasswordCorrectly,\n      isOpenGuardPassword,\n      onCheckGuardPassword,\n    }),\n    [isOpenGuardPassword, isPasswordCorrectly, onCheckGuardPassword],\n  );\n};\n","/* eslint-disable no-nested-ternary */\n/* eslint-disable react/no-danger */\nimport { memo, useEffect, useRef } from 'react';\nimport { useSelector } from 'react-redux';\nimport { useRouter } from 'next/router';\nimport dynamic from 'next/dynamic';\nimport { isServer } from '@utils/helper';\nimport { useGoogleAnalytics } from '@utils/hooks/useGoogleAnalytics';\nimport { useLeadFormCapture } from '@containers/Home/hook/useLeadFormCapture';\nimport { HomeWrapper } from './styled';\nimport {\n  selectSceneSelected,\n  selectDetailProject,\n  selectListCallToAction,\n  selectThemeConfigGlobal,\n  selectIsMatterportProject,\n  selectConfigProtectPassword,\n  selectCallToActionConfigGlobal,\n  selectDollhouseConfigGlobal,\n} from './selectors';\nimport { useCheckPasswordTour } from './hook/useCheckPasswordTour';\nimport { useTourEventState } from './global/TourStats';\nimport { useKrpano } from './hook/useKrpano';\nimport LoadingContainer from '@components/LoadingContainer';\n\nconst Theme = dynamic(() => import('./components/Theme'));\nconst Scripts = dynamic(() => import('./components/Scripts'));\n\nconst DialogPost = dynamic(() => import('@components/DialogPost'));\nconst ProtectPassword = dynamic(() => import('@components/ProtectPassword'));\nconst PopupIntro = dynamic(\n  () => import('@containers/Home/components/PopupIntro'),\n  { ssr: false },\n);\nconst Collaboration = dynamic(() => import('./components/Collaboration'), {\n  ssr: false,\n});\nconst DialogFormCapture = dynamic(\n  () => import('@components/DialogFormCapture'),\n  { ssr: false },\n);\nconst CallToActions = dynamic(() => import('@components/CallToActions'));\n\ninterface Props {\n  isPublic?: boolean;\n  isExport?: boolean;\n  isCollaborationMode?: boolean;\n  // NOTE: is case custom domain => not save scene on url\n  isPreventChangeUrl?: boolean;\n  // NOTE: fetch cookies from server\n  passwordTourCookie?: string;\n  listProjectGuardOpenedCookie?: string;\n  listFormCaptureOpenedCookie?: string;\n}\n\nfunction Home({\n  isPublic,\n  isExport,\n  isCollaborationMode = false,\n  isPreventChangeUrl = false,\n  passwordTourCookie,\n  listProjectGuardOpenedCookie,\n  listFormCaptureOpenedCookie,\n}: Props) {\n  const router = useRouter();\n  const containerRef = useRef<HTMLDivElement>(null!);\n\n  const detailProject = useSelector(selectDetailProject);\n  const sceneSelected = useSelector(selectSceneSelected);\n  const themeConfig = useSelector(selectThemeConfigGlobal);\n  const listCallToAction = useSelector(selectListCallToAction);\n  const isMatterportProject = useSelector(selectIsMatterportProject);\n  const dollhouseConfigGlobal = useSelector(selectDollhouseConfigGlobal);\n  const callToActionConfigGlobal = useSelector(selectCallToActionConfigGlobal);\n\n  const configProtectPassword = useSelector(selectConfigProtectPassword);\n\n  const [tourEventStats, setTourEventStats] = useTourEventState('state');\n  const { onUpdatePageViewByUrl } = useGoogleAnalytics();\n\n  const { onCloseDialogPostProject } = useKrpano({ krpanoRef: null });\n\n  const { isOpenGuardPassword, onCheckGuardPassword } = useCheckPasswordTour({\n    detailProject,\n    configProtectPassword,\n    passwordTourCookie,\n    listProjectGuardOpenedCookie,\n  });\n\n  const {\n    onCloseFormCapture,\n    formCaptureSelected,\n    isVisibleFormCapture,\n    formCaptureConfigGlobal,\n    formCaptureConfigSelected,\n    onCheckShowFormCaptureOnScene,\n    onCheckShowFormCaptureOnProject,\n  } = useLeadFormCapture({\n    listFormCaptureOpenedCookie,\n  });\n\n  useEffect(() => {\n    if (sceneSelected && !isPreventChangeUrl && !isMatterportProject) {\n      if (!isCollaborationMode) {\n        if (isExport)\n          window.history.pushState(\n            null,\n            '',\n            `${process.env.NEXT_PUBLIC_SUBFOLDER || ''}/?scene=${\n              sceneSelected.id\n            }`,\n          );\n        else\n          router.push(\n            isPublic\n              ? `${process.env.NEXT_PUBLIC_BASE_URL_PUBLIC}/${router.query.tour}/${sceneSelected.id}`\n              : `${process.env.NEXT_PUBLIC_BASE_URL_PREVIEW}?tour=${router.query.tour}&scene=${sceneSelected.id}`,\n            undefined,\n            { shallow: true },\n          );\n      } else {\n        const url = `${process.env.NEXT_PUBLIC_BASE_URL_COLLABORATION}?tour=${router.query.tour}&scene=${sceneSelected.id}`;\n        if (!isServer) window.history.pushState(null, '', url);\n      }\n      onUpdatePageViewByUrl();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sceneSelected?.id]);\n\n  useEffect(() => {\n    if (dollhouseConfigGlobal?.isShowOnStart)\n      setTourEventStats(prev => ({\n        ...prev,\n        isVisibleDollhouse: !!dollhouseConfigGlobal?.isShowOnStart,\n      }));\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dollhouseConfigGlobal?.isShowOnStart]);\n\n  // CHECK FORM CAPTURE TO SHOW\n  useEffect(() => {\n    if (isVisibleFormCapture === null && detailProject?.id)\n      onCheckShowFormCaptureOnProject();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (isVisibleFormCapture === false && sceneSelected)\n      onCheckShowFormCaptureOnScene(sceneSelected);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isVisibleFormCapture, sceneSelected?.id]);\n\n  return isOpenGuardPassword ? (\n    <ProtectPassword\n      scene={sceneSelected}\n      password={configProtectPassword?.password}\n      onSubmit={onCheckGuardPassword}\n    />\n  ) : detailProject?.id ? (\n    <>\n      <HomeWrapper ref={containerRef}>\n        {isCollaborationMode && <Collaboration />}\n        <div className=\"mainContent\">\n          <Theme />\n\n          {!!listCallToAction.length && (\n            <CallToActions\n              listCallToAction={listCallToAction}\n              callToActionConfig={callToActionConfigGlobal}\n            />\n          )}\n\n          <PopupIntro />\n\n          {!!formCaptureSelected?.id && isVisibleFormCapture && (\n            <DialogFormCapture\n              onCancel={onCloseFormCapture}\n              visible={isVisibleFormCapture}\n              formCaptureSelected={formCaptureSelected}\n              formCaptureConfigGlobal={formCaptureConfigGlobal}\n              formCaptureConfigSelected={formCaptureConfigSelected}\n            />\n          )}\n\n          {tourEventStats?.idPostProjectSelected && (\n            <DialogPost\n              onCancel={onCloseDialogPostProject}\n              key={tourEventStats?.idPostProjectSelected}\n              idPost={tourEventStats?.idPostProjectSelected}\n              visible={tourEventStats?.visibleDialogPostProject}\n              isUseDefaultStyle={themeConfig?.selected === 'default'}\n            />\n          )}\n        </div>\n      </HomeWrapper>\n\n      <Scripts />\n    </>\n  ) : (\n    <LoadingContainer loading>\n      <div style={{ width: '100%', height: '100%' }}>Loading</div>\n    </LoadingContainer>\n  );\n}\n\nexport default memo(Home);\n","import { isServer } from './helper';\n\nconst _window = isServer ? undefined : (window as any);\nexport const gaConfig = () => ({\n  pageview: (pageTitle, pageLocation, page, gtag) => {\n    if (!isServer && _window.gtag) {\n      _window.gtag('event', 'page_view', {\n        page_title: pageTitle,\n        page_location: pageLocation,\n        page_path: page,\n        send_to: gtag,\n      });\n    }\n  },\n  event: ({ eventName, sceneName, hotspotType, hotspotName }) => {\n    if (!isServer && _window.gtag) {\n      _window.gtag('event', eventName, {\n        hotspotName,\n        hotspotType,\n        sceneName,\n      });\n    }\n  },\n});\n\n// export const onHandleRouteChange = url => {\n//   if (!isServer) {\n//     console.log(url);\n//     // gaConfig().pageview(window.origin + url);\n//   }\n// };\n\nexport default gaConfig;\n","import {\n  selectTitleProject,\n  selectSceneSelected,\n  selectMetaDataProject,\n  selectHotspotSelected,\n  selectGATrackingProject,\n  selectGATagTrackingProject,\n} from '@containers/Home/selectors';\nimport gaConfig from '@utils/ga';\nimport { useRouter } from 'next/router';\nimport { useCallback, useMemo } from 'react';\nimport { useSelector } from 'react-redux';\n\nexport const useGoogleAnalytics = () => {\n  const router = useRouter();\n  const title = useSelector(selectTitleProject);\n  const metadata = useSelector(selectMetaDataProject);\n  const ga_tracking = useSelector(selectGATrackingProject);\n  const ggtag_tracking = useSelector(selectGATagTrackingProject);\n  const sceneSelected = useSelector(selectSceneSelected);\n  const hotspotSelected = useSelector(selectHotspotSelected);\n\n  const onUpdatePageViewByUrl = useCallback(() => {\n    const pageTitle = `${sceneSelected?.title} | ${(\n      metadata?.title ||\n      title ||\n      ''\n    ).toUpperCase()}`;\n    const pageLocation = metadata?.description || 'Panoee - Virtual Tour 360';\n    const url = window.origin + router.asPath;\n    if (ga_tracking)\n      gaConfig().pageview(pageTitle, pageLocation, url, ga_tracking);\n    if (ggtag_tracking)\n      gaConfig().pageview(pageTitle, pageLocation, url, ggtag_tracking);\n  }, [\n    title,\n    metadata,\n    ga_tracking,\n    sceneSelected,\n    router.asPath,\n    ggtag_tracking,\n  ]);\n\n  const onPushEventClickedHotspot = useCallback(() => {\n    if (hotspotSelected) {\n      const { title: hotspotName, type: hotspotType } = hotspotSelected;\n      if (hotspotSelected.title)\n        gaConfig().event({\n          eventName: `clicked-hotspot-name-${hotspotName}`,\n          sceneName: sceneSelected?.title || '',\n          hotspotType,\n          hotspotName,\n        });\n      gaConfig().event({\n        eventName: `clicked-hotspot-type-${hotspotType}`,\n        sceneName: sceneSelected?.title || '',\n        hotspotType,\n        hotspotName,\n      });\n    }\n  }, [hotspotSelected, sceneSelected]);\n\n  return useMemo(\n    () => ({\n      onUpdatePageViewByUrl,\n      onPushEventClickedHotspot,\n    }),\n    [onUpdatePageViewByUrl, onPushEventClickedHotspot],\n  );\n};\n"],"names":["LoadingContainerWrapper","styled","div","withConfig","antIcon","jsx_runtime","jsx","LoadingOutlined","style","fontSize","spin","LoadingContainer","memo","param","loading","_param_description","description","children","Spin","indicator","tip","spinning","_param_loading","components_LoadingContainer","useGlobalState","createGlobalState","vlookat","undefined","hlookat","zoom","krpanoRef","commentSceneSelected","isShowDialogCreateCommentScene","commentSceneTemporary","stats","isShowControlbar","btnDirectionActive","isGyroscopeAvailable","state","isLoaded","idPostProjectSelected","visibleDialogPostProject","idPostSceneSelected","visibleDialogPostScene","isSoundOnScene","isVisibleMap","isVisibleFloorplan","isVisibleDollhouse","isVisiblePopupIntro","isActiveModeMultipleStaging","descriptionHotspotSelected","useKrpano","dispatch","useDispatch","configAutoRotate","useSelector","selectConfigAutoRotate","configAutoChangeScene","selectConfigAutoChangeScene","detailFirstScene","selectDetailFirstScene","detailProject","selectDetailProject","listGroup","selectListGroup","listScene","selectListScene","sceneSelected","selectSceneSelected","listFloorplan","selectListFloorplan","configMap","selectConfigMap","languagesProject","selectLanguagesProject","dollhouse","selectDollhouseProject","dollhouseConfigGlobal","selectDollhouseConfigGlobal","setTourStats","useTourStats","useTourEventState","tourEventStats","setTourEventState","onCheckShowFormCaptureOnHotspot","useLeadFormCapture","configAutoChangeSceneRef","useRef","isExistSound","useMemo","hotspots","some","item","type","config","sound","file","url","instructor","media","src","background_sound","isShowIconInfoPlace","post","isShowIconInfoScene","isShowIconMap","isEnabled","isShowIconFloorplan","length","isShowIconMultipleStaging","mode","staging","filter","configStaging","modeDisplay","id","isShowIconSoundProject","isShowIconSoundScene","isShowIconDollhouse","obj_path","isShowIconChangeScene","enabled","isChangeScene","on","isShowIconRotate","isRotate","waitTimeAutoRotate","waitTime","speedAutoRotate","speed","dollhouseXml","hotspotColor","separateColorAndTransparency","HOTSPOT_COLOR_DOLLHOUSE_DEFAULT","concat","dollhouseData","mesh","reduce","result","color","replace","tx","ty","tz","useEffect","current","onClickHotspot","useCallback","hotspot","onChangeAutoChangeScene","actions","setConfigAutoChangeScene","onToFirstScene","setSceneSelected","onChangeLanguageProject","language","find","setLanguageProjectSelected","onUp","prev","_swc_helpers_object_spread_props__WEBPACK_IMPORTED_MODULE_9__","_","_swc_helpers_object_spread__WEBPACK_IMPORTED_MODULE_10__","toUp","onLeft","toLeft","onDown","toDown","onRight","toRight","onVR","viewWebvr","onViewNormal","viewNormal","onViewPlannet","viewPlanet","onViewMirrorBall","viewMirrorBall","onToggleGyro","toggleGyro","onRemoveAllChevronHotspot","removeAllChevronHotspot","onStopRotate","setConfigAutoRotate","stopAutoRotate","onStartRotate","startAutoRotate","wait_time","onToggleRotate","onStopVertical","stopToVertical","onStopHorizontal","stopToHorizontal","onFullscreen","viewFullscreen","onTurnOnScreenshotCapture","call","onStartHotspotSound","triggerSound","onStopHotspotSound","destroySound","onUnmuteHotspotSound","unmuteAllSound","onMuteHotspotSound","muteAllSound","onSetSoundOnScene","onToggleModeMultipleStaging","active","onTurnOnSoundScene","onTurnOffSoundScene","onToggleSoundScene","onTurnOnSoundProject","setConfigSoundProject","onTurnOffSoundProject","onOpenDialogPostProject","onCloseDialogPostProject","onShowInfoPlace","onOpenDialogPostScene","onCloseDialogPostScene","onToggleInfoScene","isVisible","onToggleFloorplan","onToggleMap","onToggleDollhouseView","get","set","onGenerateXMLMenuThumbnailOnVR","generateSceneXml","scene","group","title","replaceAll","src_thumb","src_preview","xml","scenes","forEach","listFormCaptureOpenedCookie","_param_listFormCaptureOpenedCookie","isVisibleFormCapture","selectIsVisibleFormCapture","formCaptureSelected","selectFormCaptureSelected","formCaptureConfigSelected","selectFormCaptureConfigSelected","formCaptureConfigGlobal","selectFormCaptureConfigGlobal","hotspotSelectedTemporary","selectHotspotSelectedTemporary","listSceneIdToOpenFormCapture","selectListSceneIdToOpenFormCapture","listFormCaptureConfigCorrespondingToListSceneId","selectListFormCaptureConfigCorrespondingToListSceneId","listHotspotIdToOpenFormCapture","selectListHotspotIdToOpenFormCapture","listFormCaptureConfigCorrespondingToListHotspotId","selectListFormCaptureConfigCorrespondingToListHotspotId","listHotspotTypeToOpenFormCapture","selectListHotspotTypeToOpenFormCapture","listFormCaptureConfigCorrespondingToListHotspotType","selectListFormCaptureConfigCorrespondingToListHotspotType","cookies","isServer","parse","document","cookie","onGetListFormCaptureIdOpened","JSON","KEY_COOKIE","LIST_FORM_CAPTURE_OPENED","onOpenFormCapture","formCaptureConfig","isEventHotspotClick","listFormCaptureOpened","indexOf","form","setHotspotSelected","setHotspotSelectedTemporary","setIsVisibleFormCapture","onCloseFormCapture","stringify","_swc_helpers_to_consumable_array__WEBPACK_IMPORTED_MODULE_7__","indexOnListHotspotId","indexOnListHotspotType","setFormCaptureConfigSelelected","onCheckShowFormCaptureOnScene","index","findIndex","sceneId","onCheckShowFormCaptureOnProject","setTimeout","HomeWrapper","FlexColCenter","FlexRowCenter","ChangeSceneWrapper","BackgroundCover","props","show","css","useCheckPasswordTour","configProtectPassword","listProjectGuardOpenedCookie","_param_listProjectGuardOpenedCookie","passwordTourCookie","useState","isPasswordCorrectly","setIsPasswordCorrectly","listProjectGuardOpened","LIST_PROJECT_PASS_GUARD","isOpenGuardPassword","password","previousPassword","PASSWORD_TOUR","currentPassword","encryptText","isAlwaysAsk","onCheckGuardPassword","projectId","Array","from","Set","_to_consumable_array","Theme","dynamic","__webpack_require__","e","then","bind","Scripts","DialogPost","ProtectPassword","Promise","all","PopupIntro","ssr","Collaboration","DialogFormCapture","CallToActions","containers_Home","isPublic","isExport","isCollaborationMode","_param_isCollaborationMode","_param_isPreventChangeUrl","isPreventChangeUrl","router","useRouter","containerRef","themeConfig","selectThemeConfigGlobal","listCallToAction","selectListCallToAction","isMatterportProject","selectIsMatterportProject","callToActionConfigGlobal","selectCallToActionConfigGlobal","selectConfigProtectPassword","setTourEventStats","onUpdatePageViewByUrl","useGoogleAnalytics","process","query","tour","window","history","pushState","push","shallow","isShowOnStart","_object_spread_props","_object_spread","onSubmit","jsxs","Fragment","ref","className","callToActionConfig","onCancel","visible","idPost","isUseDefaultStyle","selected","width","height","_window","ga","pageview","pageTitle","pageLocation","page","gtag","page_title","page_location","page_path","send_to","event","eventName","sceneName","hotspotType","hotspotName","selectTitleProject","metadata","selectMetaDataProject","ga_tracking","selectGATrackingProject","ggtag_tracking","selectGATagTrackingProject","hotspotSelected","selectHotspotSelected","toUpperCase","origin","asPath","gaConfig","onPushEventClickedHotspot"],"sourceRoot":""}